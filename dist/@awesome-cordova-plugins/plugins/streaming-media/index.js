var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var StreamingMediaOriginal = /** @class */ (function (_super) {
    __extends(StreamingMediaOriginal, _super);
    function StreamingMediaOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    StreamingMediaOriginal.prototype.playVideo = function (videoUrl, options) { return cordova(this, "playVideo", { "sync": true }, arguments); };
    StreamingMediaOriginal.prototype.playAudio = function (audioUrl, options) { return cordova(this, "playAudio", { "sync": true }, arguments); };
    StreamingMediaOriginal.prototype.stopAudio = function () { return cordova(this, "stopAudio", { "sync": true }, arguments); };
    StreamingMediaOriginal.prototype.pauseAudio = function () { return cordova(this, "pauseAudio", { "sync": true, "platforms": ["iOS"] }, arguments); };
    StreamingMediaOriginal.prototype.resumeAudio = function () { return cordova(this, "resumeAudio", { "sync": true, "platforms": ["iOS"] }, arguments); };
    StreamingMediaOriginal.pluginName = "StreamingMedia";
    StreamingMediaOriginal.plugin = "cordova-plugin-streaming-media";
    StreamingMediaOriginal.pluginRef = "plugins.streamingMedia";
    StreamingMediaOriginal.repo = "https://github.com/nchutchind/cordova-plugin-streaming-media";
    StreamingMediaOriginal.platforms = ["Amazon Fire OS", "Android", "iOS"];
    return StreamingMediaOriginal;
}(AwesomeCordovaNativePlugin));
var StreamingMedia = new StreamingMediaOriginal();
export { StreamingMedia };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvc3RyZWFtaW5nLW1lZGlhL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFDQSxPQUFPLHVDQUErQyxNQUFNLCtCQUErQixDQUFDOztJQWdGeEQsa0NBQTBCOzs7O0lBUTVELGtDQUFTLGFBQUMsUUFBZ0IsRUFBRSxPQUErQjtJQVMzRCxrQ0FBUyxhQUFDLFFBQWdCLEVBQUUsT0FBK0I7SUFNM0Qsa0NBQVM7SUFNVCxtQ0FBVTtJQU1WLG9DQUFXOzs7Ozs7eUJBcEhiO0VBaUZvQywwQkFBMEI7U0FBakQsY0FBYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvcmRvdmEsIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvY29yZSc7XG5cbi8qKlxuICogT2JqZWN0IG9mIG9wdGlvbnMgdG8gcGFzcyBpbnRvIHRoZSBwbGF5VmlkZW8gbWV0aG9kLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFN0cmVhbWluZ1ZpZGVvT3B0aW9ucyB7XG4gIC8qKiBFeGVjdXRlcyBhZnRlciBzdWNjZXNzIHBsYXlpbmcgYXVkaW8uICovXG4gIHN1Y2Nlc3NDYWxsYmFjaz86IEZ1bmN0aW9uO1xuICAvKiogRXhlY3V0ZXMgYWZ0ZXIgZXJyb3IgcGxheWluZyB2aWRlby4gKi9cbiAgZXJyb3JDYWxsYmFjaz86IEZ1bmN0aW9uO1xuICAvKiogRm9yY2Ugb25lIG9yaWVudGF0aW9uIGZvciBwbGF5aW5nIHZpZGVvLiAqL1xuICBvcmllbnRhdGlvbj86IHN0cmluZztcbiAgLyoqIFNob3VsZCB0aGUgdmlkZW8gY2xvc2UgYWZ0ZXIgaXQncyBvdmVyLiBEZWZhdWx0cyB0byB0cnVlLiAqL1xuICBzaG91bGRBdXRvQ2xvc2U/OiBib29sZWFuO1xuICAvKiogU2hvdWxkIHRoZSB2aWRlbyBoYXZlIGNvbnRyb2xzLiBEZWZhdWx0cyB0byB0cnVlLiBBbmRyb2lkIG9ubHkuICovXG4gIGNvbnRyb2xzPzogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBPYmplY3Qgb2Ygb3B0aW9ucyB0byBwYXNzIGludG8gdGhlIHBsYXlBdWRpbyBtZXRob2QuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU3RyZWFtaW5nQXVkaW9PcHRpb25zIHtcbiAgLyoqIEJhY2tncm91bmQgY29sb3IgZm9yIGF1ZGlvIHBsYXllci4gKi9cbiAgYmdDb2xvcj86IHN0cmluZztcbiAgLyoqIEJhY2tncm91bmQgaW1hZ2UgZm9yIGF1ZGlvIHBsYXllci4gKi9cbiAgYmdJbWFnZT86IHN0cmluZztcbiAgLyoqXG4gICAqIEJhY2tncm91bmQgaW1hZ2Ugc2NhbGUgZm9yIGF1ZGlvIHBsYXllci5cbiAgICogVmFsaWQgdmFsdWVzIGFyZTpcbiAgICogZml0XG4gICAqIHN0cmV0Y2hcbiAgICogYXNwZWN0U3RyZXRjaC5cbiAgICovXG4gIGJnSW1hZ2VTY2FsZT86IHN0cmluZztcbiAgLyoqIFN0YXJ0IGF1ZGlvIHBsYXllciBpbiBmdWxsIHNjcmVlbi4gaU9TIG9ubHkuICovXG4gIGluaXRGdWxsc2NyZWVuPzogYm9vbGVhbjtcbiAgLyoqXG4gICAqIEtlZXBzIHRoZSBzY3JlZW4gbGl0IGFuZCBzdG9wcyBpdCBmcm9tIGxvY2tpbmdcbiAgICogd2hpbGUgYXVkaW8gaXMgcGxheWluZy4gQW5kcm9pZCBvbmx5LlxuICAgKi9cbiAga2VlcEF3YWtlPzogYm9vbGVhbjtcbiAgLyoqIEV4ZWN1dGVzIGFmdGVyIHN1Y2Nlc3MgcGxheWluZyBhdWRpby4gKi9cbiAgc3VjY2Vzc0NhbGxiYWNrPzogRnVuY3Rpb247XG4gIC8qKiBFeGVjdXRlcyBhZnRlciBlcnJvciBwbGF5aW5nIGF1ZGlvLiAqL1xuICBlcnJvckNhbGxiYWNrPzogRnVuY3Rpb247XG59XG5cbi8qKlxuICogQG5hbWUgU3RyZWFtaW5nIE1lZGlhXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoaXMgcGx1Z2luIGFsbG93cyB5b3UgdG8gc3RyZWFtIGF1ZGlvIGFuZCB2aWRlbyBpbiBhIGZ1bGxzY3JlZW4sIG5hdGl2ZSBwbGF5ZXIgb24gaU9TIGFuZCBBbmRyb2lkLlxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBTdHJlYW1pbmdNZWRpYSwgU3RyZWFtaW5nVmlkZW9PcHRpb25zIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3N0cmVhbWluZy1tZWRpYS9uZ3gnO1xuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgc3RyZWFtaW5nTWVkaWE6IFN0cmVhbWluZ01lZGlhKSB7IH1cbiAqXG4gKiBsZXQgb3B0aW9uczogU3RyZWFtaW5nVmlkZW9PcHRpb25zID0ge1xuICogICBzdWNjZXNzQ2FsbGJhY2s6ICgpID0+IHsgY29uc29sZS5sb2coJ1ZpZGVvIHBsYXllZCcpIH0sXG4gKiAgIGVycm9yQ2FsbGJhY2s6IChlKSA9PiB7IGNvbnNvbGUubG9nKCdFcnJvciBzdHJlYW1pbmcnKSB9LFxuICogICBvcmllbnRhdGlvbjogJ2xhbmRzY2FwZScsXG4gKiAgIHNob3VsZEF1dG9DbG9zZTogdHJ1ZSxcbiAqICAgY29udHJvbHM6IGZhbHNlXG4gKiB9O1xuICpcbiAqIHRoaXMuc3RyZWFtaW5nTWVkaWEucGxheVZpZGVvKCdodHRwczovL3BhdGgvdG8vdmlkZW8vc3RyZWFtJywgb3B0aW9ucyk7XG4gKlxuICogYGBgXG4gKiBAaW50ZXJmYWNlc1xuICogU3RyZWFtaW5nVmlkZW9PcHRpb25zXG4gKiBTdHJlYW1pbmdBdWRpb09wdGlvbnNcbiAqL1xuQFBsdWdpbih7XG4gIHBsdWdpbk5hbWU6ICdTdHJlYW1pbmdNZWRpYScsXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLXN0cmVhbWluZy1tZWRpYScsXG4gIHBsdWdpblJlZjogJ3BsdWdpbnMuc3RyZWFtaW5nTWVkaWEnLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL25jaHV0Y2hpbmQvY29yZG92YS1wbHVnaW4tc3RyZWFtaW5nLW1lZGlhJyxcbiAgcGxhdGZvcm1zOiBbJ0FtYXpvbiBGaXJlIE9TJywgJ0FuZHJvaWQnLCAnaU9TJ10sXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFN0cmVhbWluZ01lZGlhIGV4dGVuZHMgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4ge1xuICAvKipcbiAgICogU3RyZWFtcyBhIHZpZGVvXG4gICAqXG4gICAqIEBwYXJhbSB2aWRlb1VybCB7c3RyaW5nfSBUaGUgVVJMIG9mIHRoZSB2aWRlb1xuICAgKiBAcGFyYW0gb3B0aW9ucyB7U3RyZWFtaW5nVmlkZW9PcHRpb25zfSBPcHRpb25zXG4gICAqL1xuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcbiAgcGxheVZpZGVvKHZpZGVvVXJsOiBzdHJpbmcsIG9wdGlvbnM/OiBTdHJlYW1pbmdWaWRlb09wdGlvbnMpOiB2b2lkIHt9XG5cbiAgLyoqXG4gICAqIFN0cmVhbXMgYW4gYXVkaW9cbiAgICpcbiAgICogQHBhcmFtIGF1ZGlvVXJsIHtzdHJpbmd9IFRoZSBVUkwgb2YgdGhlIGF1ZGlvIHN0cmVhbVxuICAgKiBAcGFyYW0gb3B0aW9ucyB7U3RyZWFtaW5nQXVkaW9PcHRpb25zfSBPcHRpb25zXG4gICAqL1xuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcbiAgcGxheUF1ZGlvKGF1ZGlvVXJsOiBzdHJpbmcsIG9wdGlvbnM/OiBTdHJlYW1pbmdBdWRpb09wdGlvbnMpOiB2b2lkIHt9XG5cbiAgLyoqXG4gICAqIFN0b3BzIHN0cmVhbWluZyBhdWRpb1xuICAgKi9cbiAgQENvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXG4gIHN0b3BBdWRpbygpOiB2b2lkIHt9XG5cbiAgLyoqXG4gICAqIFBhdXNlcyBzdHJlYW1pbmcgYXVkaW9cbiAgICovXG4gIEBDb3Jkb3ZhKHsgc3luYzogdHJ1ZSwgcGxhdGZvcm1zOiBbJ2lPUyddIH0pXG4gIHBhdXNlQXVkaW8oKTogdm9pZCB7fVxuXG4gIC8qKlxuICAgKiBSZXN1bWVzIHN0cmVhbWluZyBhdWRpb1xuICAgKi9cbiAgQENvcmRvdmEoeyBzeW5jOiB0cnVlLCBwbGF0Zm9ybXM6IFsnaU9TJ10gfSlcbiAgcmVzdW1lQXVkaW8oKTogdm9pZCB7fVxufVxuIl19