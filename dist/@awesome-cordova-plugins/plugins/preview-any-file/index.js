var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import { Observable } from 'rxjs';
var PreviewAnyFileOriginal = /** @class */ (function (_super) {
    __extends(PreviewAnyFileOriginal, _super);
    function PreviewAnyFileOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PreviewAnyFileOriginal.prototype.preview = function (url) { return cordova(this, "preview", {}, arguments); };
    PreviewAnyFileOriginal.prototype.previewPath = function (path, opt) {
        if (opt === void 0) { opt = {}; }
        return cordova(this, "previewPath", { "observable": true, "callbackOrder": "reverse" }, arguments);
    };
    PreviewAnyFileOriginal.prototype.previewBase64 = function (base64, opt) {
        if (opt === void 0) { opt = {}; }
        return cordova(this, "previewBase64", { "observable": true, "callbackOrder": "reverse" }, arguments);
    };
    PreviewAnyFileOriginal.prototype.previewAsset = function (path, opt) {
        if (opt === void 0) { opt = {}; }
        return cordova(this, "previewAsset", { "observable": true, "callbackOrder": "reverse" }, arguments);
    };
    PreviewAnyFileOriginal.pluginName = "Preview/Open Any File";
    PreviewAnyFileOriginal.plugin = "cordova-plugin-preview-any-file";
    PreviewAnyFileOriginal.pluginRef = "PreviewAnyFile";
    PreviewAnyFileOriginal.repo = "https://github.com/mostafa-mansour1/previewAnyFile";
    PreviewAnyFileOriginal.install = "";
    PreviewAnyFileOriginal.installVariables = [];
    PreviewAnyFileOriginal.platforms = ["Android", "iOS"];
    return PreviewAnyFileOriginal;
}(AwesomeCordovaNativePlugin));
var PreviewAnyFile = new PreviewAnyFileOriginal();
export { PreviewAnyFile };
//# sourceMappingURL=data:application/json;base64,