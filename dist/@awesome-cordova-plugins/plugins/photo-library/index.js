var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import { Observable } from 'rxjs';
/**
 * @param opts
 * @hidden
 *
 * Wraps method that returns an observable that can be completed. Provided opts.resultFinalPredicate dictates when the observable completes.
 */
export function CordovaFiniteObservable(opts) {
    if (opts === void 0) { opts = {}; }
    opts.observable = true;
    return function (target, methodName, descriptor) {
        return {
            value: function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                var wrappedObservable = wrap(this, methodName, opts).apply(this, args);
                return new Observable(function (observer) {
                    var wrappedSubscription = wrappedObservable.subscribe({
                        next: function (x) {
                            observer.next(opts.resultTransform ? x[opts.resultTransform] : x);
                            if (opts.resultFinalPredicate && x[opts.resultFinalPredicate]) {
                                observer.complete();
                            }
                        },
                        error: function (err) {
                            observer.error(err);
                        },
                        complete: function () {
                            observer.complete();
                        },
                    });
                    return function () {
                        wrappedSubscription.unsubscribe();
                    };
                });
            },
            enumerable: true,
        };
    };
}
var PhotoLibraryOriginal = /** @class */ (function (_super) {
    __extends(PhotoLibraryOriginal, _super);
    function PhotoLibraryOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PhotoLibraryOriginal.prototype.getLibrary = function (success, error, options) { return cordova(this, "getLibrary", { "observable": true }, arguments); };
    PhotoLibraryOriginal.prototype.requestAuthorization = function (options) { return cordova(this, "requestAuthorization", { "callbackOrder": "reverse" }, arguments); };
    PhotoLibraryOriginal.prototype.getAlbums = function () { return cordova(this, "getAlbums", { "callbackOrder": "reverse" }, arguments); };
    PhotoLibraryOriginal.prototype.getThumbnailURL = function (photo, options) { return cordova(this, "getThumbnailURL", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    PhotoLibraryOriginal.prototype.getPhotoURL = function (photo, options) { return cordova(this, "getPhotoURL", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    PhotoLibraryOriginal.prototype.getThumbnail = function (photo, options) { return cordova(this, "getThumbnail", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    PhotoLibraryOriginal.prototype.getPhoto = function (photo, options) { return cordova(this, "getPhoto", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    PhotoLibraryOriginal.prototype.saveImage = function (url, album, options) { return cordova(this, "saveImage", { "successIndex": 2, "errorIndex": 3 }, arguments); };
    PhotoLibraryOriginal.prototype.saveVideo = function (url, album) { return cordova(this, "saveVideo", { "successIndex": 2, "errorIndex": 3 }, arguments); };
    PhotoLibraryOriginal.pluginName = "PhotoLibrary";
    PhotoLibraryOriginal.plugin = "cordova-plugin-photo-library";
    PhotoLibraryOriginal.pluginRef = "cordova.plugins.photoLibrary";
    PhotoLibraryOriginal.repo = "https://github.com/terikon/cordova-plugin-photo-library";
    PhotoLibraryOriginal.install = "ionic cordova plugin add cordova-plugin-photo-library --variable PHOTO_LIBRARY_USAGE_DESCRIPTION=\"To choose photos\"";
    PhotoLibraryOriginal.installVariables = ["PHOTO_LIBRARY_USAGE_DESCRIPTION"];
    PhotoLibraryOriginal.platforms = ["Android", "Browser", "iOS"];
    return PhotoLibraryOriginal;
}(AwesomeCordovaNativePlugin));
var PhotoLibrary = new PhotoLibraryOriginal();
export { PhotoLibrary };
//# sourceMappingURL=data:application/json;base64,