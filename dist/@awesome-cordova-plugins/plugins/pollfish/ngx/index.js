import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova, cordovaPropertyGet, cordovaPropertySet } from '@awesome-cordova-plugins/core';
var Pollfish = /** @class */ (function (_super) {
    __extends(Pollfish, _super);
    function Pollfish() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Pollfish.prototype.init = function (releaseMode, rewardMode, apiKey, position, padding, requestUUID, offerwallMode) { return cordova(this, "init", {}, arguments); };
    Pollfish.prototype.initWithUserAttributes = function (releaseMode, rewardMode, apiKey, position, padding, requestUUID, offerwallMode, userAttributes) { return cordova(this, "initWithUserAttributes", {}, arguments); };
    Pollfish.prototype.showPollfish = function () { return cordova(this, "showPollfish", {}, arguments); };
    Pollfish.prototype.hidePollfish = function () { return cordova(this, "hidePollfish", {}, arguments); };
    Pollfish.prototype.setEventCallback = function (eventName, callback) { return cordova(this, "setEventCallback", { "sync": true }, arguments); };
    Object.defineProperty(Pollfish.prototype, "EventListener", {
        get: function () { return cordovaPropertyGet(this, "EventListener"); },
        set: function (value) { cordovaPropertySet(this, "EventListener", value); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Pollfish.prototype, "Position", {
        get: function () { return cordovaPropertyGet(this, "Position"); },
        set: function (value) { cordovaPropertySet(this, "Position", value); },
        enumerable: false,
        configurable: true
    });
    Pollfish.pluginName = "Pollfish";
    Pollfish.plugin = "com.pollfish.cordova_plugin";
    Pollfish.pluginRef = "pollfishplugin";
    Pollfish.repo = "https://github.com/pollfish/cordova-plugin-pollfish";
    Pollfish.platforms = ["Android", "iOS"];
    Pollfish.decorators = [
        { type: Injectable }
    ];
    return Pollfish;
}(AwesomeCordovaNativePlugin));
export { Pollfish };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvcG9sbGZpc2gvbmd4L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sK0VBQWdFLE1BQU0sK0JBQStCLENBQUM7O0lBa0UvRSw0QkFBMEI7Ozs7SUFrQ3RELHVCQUFJLGFBQ0YsV0FBb0IsRUFDcEIsVUFBbUIsRUFDbkIsTUFBYyxFQUNkLFFBQWdCLEVBQ2hCLE9BQWUsRUFDZixXQUFtQixFQUNuQixhQUFzQjtJQW1CeEIseUNBQXNCLGFBQ3BCLFdBQW9CLEVBQ3BCLFVBQW1CLEVBQ25CLE1BQWMsRUFDZCxRQUFnQixFQUNoQixPQUFlLEVBQ2YsV0FBbUIsRUFDbkIsYUFBc0IsRUFDdEIsY0FBa0I7SUFVcEIsK0JBQVk7SUFTWiwrQkFBWTtJQWNaLG1DQUFnQixhQUFDLFNBQWlCLEVBQUUsUUFBOEI7MEJBbkdsRSxtQ0FBYTs7Ozs7OzBCQVdiLDhCQUFROzs7Ozs7Ozs7Ozs7Z0JBZFQsVUFBVTs7bUJBbEVYO0VBbUU4QiwwQkFBMEI7U0FBM0MsUUFBUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFBsdWdpbiwgQ29yZG92YSwgQ29yZG92YVByb3BlcnR5LCBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiB9IGZyb20gJ0Bhd2Vzb21lLWNvcmRvdmEtcGx1Z2lucy9jb3JlJztcblxuLyoqXG4gKiBAbmFtZSBQb2xsZmlzaFxuICogQGRlc2NyaXB0aW9uXG4gKiBQb2xsZmlzaCBJb25pYyBOYXRpdmUgcGx1Z2luIHdyYXBwZXJcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgUG9sbGZpc2ggfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvcG9sbGZpc2gvbmd4JztcbiAqXG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSBwb2xsZmlzaDogUG9sbGZpc2gpIHsgfVxuICpcbiAqIC4uLlxuICpcbiAqIHRoaXMucG9sbGZpc2guaW5pdChmYWxzZSwgZmFsc2UsICdZT1VSX0FQSV9LRVknLCAxLCA4LCAnUkVRVUVTVF9VVUlEJywgZmFsc2UpO1xuICpcbiAqIHRoaXMucG9sbGZpc2guaW5pdFdpdGhVc2VyQXR0cmlidXRlcyhmYWxzZSwgZmFsc2UsICdZT1VSX0FQSV9LRVknLCAxLCA4LCAnUkVRVUVTVF9VVUlEJywgZmFsc2UsIHtcbiAqICAnZ2VuZGVyJzogJzEnLFxuICogIC4uLlxuICogfSk7XG4gKlxuICogdGhpcy5wb2xsZmlzaC5zaG93UG9sbGZpc2goKTtcbiAqXG4gKiB0aGlzLnBvbGxmaXNoLmhpZGVQb2xsZmlzaCgpO1xuICpcbiAqIC8vIEV2ZW50IExpc3RlbmVyc1xuICpcbiAqIHRoaXMucG9sbGZpc2guc2V0RXZlbnRDYWxsYmFjayhwb2xsZmlzaC5FdmVudExpc3RlbmVyLk9uUG9sbGZpc2hTdXJ2ZXlSZWNlaXZlZCwgKHN1cnZleUluZm8pID0+IHtcbiAqICBjb25zb2xlLmxvZyhcIlN1cnZleSBSZWNlaXZlZDogXCIgKyBKU09OLnN0cmluZ2lmeShzdXJ2ZXlJbmZvKSk7XG4gKiB9KTtcbiAqXG4gKiB0aGlzLnBvbGxmaXNoLnNldEV2ZW50Q2FsbGJhY2socG9sbGZpc2guRXZlbnRMaXN0ZW5lci5PblBvbGxmaXNoU3VydmV5Q29tcGxldGVkLCAocmVzdWx0KSA9PiB7XG4gKiAgY29uc29sZS5sb2coXCJTdXJ2ZXkgQ29tcGxldGVkOiBcIiArIEpTT04uc3RyaW5naWZ5KHN1cnZleUluZm8pKTtcbiAqIH0pO1xuICpcbiAqIHRoaXMucG9sbGZpc2guc2V0RXZlbnRDYWxsYmFjayhwb2xsZmlzaC5FdmVudExpc3RlbmVyLk9uUG9sbGZpc2hVc2VyTm90RWxpZ2libGUsIChfKSA9PiB7XG4gKiAgY29uc29sZS5sb2coXCJQb2xsZmlzaCBVc2VyIE5vdCBFbGlnaWJsZVwiKTtcbiAqIH0pO1xuICpcbiAqIHRoaXMucG9sbGZpc2guc2V0RXZlbnRDYWxsYmFjayhwb2xsZmlzaC5FdmVudExpc3RlbmVyLk9uUG9sbGZpc2hTdXJ2ZXlOb3RBdmFpbGFibGUsIChfKSA9PiB7XG4gKiAgY29uc29sZS5sb2coXCJQb2xsZmlzaCBTdXJ2ZXkgbm90IGF2YWlsYWJsZVwiKTtcbiAqIH0pO1xuICpcbiAqIHRoaXMucG9sbGZpc2guc2V0RXZlbnRDYWxsYmFjayhwb2xsZmlzaC5FdmVudExpc3RlbmVyLk9uUG9sbGZpc2hPcGVuZWQsIChfKSA9PiB7XG4gKiAgY29uc29sZS5sb2coXCJQb2xsZmlzaCBTdXJ2ZXkgcGFuZWwgaXMgb3BlblwiKTtcbiAqIH0pO1xuICpcbiAqIHRoaXMucG9sbGZpc2guc2V0RXZlbnRDYWxsYmFjayhwb2xsZmlzaC5FdmVudExpc3RlbmVyLk9uUG9sbGZpc2hDbG9zZWQsIChfKSA9PiB7XG4gKiAgY29uc29sZS5sb2coXCJQb2xsZmlzaCBTdXJ2ZXkgcGFuZWwgaXMgY2xvc2VkXCIpO1xuICogfSk7XG4gKlxuICogdGhpcy5wb2xsZmlzaC5zZXRFdmVudENhbGxiYWNrKHBvbGxmaXNoLkV2ZW50TGlzdGVuZXIuT25Qb2xsZmlzaFVzZXJSZWplY3RlZFN1cnZleSwgKF8pID0+IHtcbiAqICBjb25zb2xlLmxvZyhcIlBvbGxmaXNoIFVzZXIgUmVqZWN0ZWQgU3VydmV5XCIpO1xuICogfSk7XG4gKlxuICogYGBgXG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnUG9sbGZpc2gnLFxuICBwbHVnaW46ICdjb20ucG9sbGZpc2guY29yZG92YV9wbHVnaW4nLFxuICBwbHVnaW5SZWY6ICdwb2xsZmlzaHBsdWdpbicsXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vcG9sbGZpc2gvY29yZG92YS1wbHVnaW4tcG9sbGZpc2gnLFxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXSxcbn0pXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUG9sbGZpc2ggZXh0ZW5kcyBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiB7XG4gIEBDb3Jkb3ZhUHJvcGVydHkoKVxuICBFdmVudExpc3RlbmVyOiB7XG4gICAgT25Qb2xsZmlzaENsb3NlZDogc3RyaW5nO1xuICAgIE9uUG9sbGZpc2hPcGVuZWQ6IHN0cmluZztcbiAgICBPblBvbGxmaXNoU3VydmV5UmVjZWl2ZWQ6IHN0cmluZztcbiAgICBPblBvbGxmaXNoU3VydmV5Q29tcGxldGVkOiBzdHJpbmc7XG4gICAgT25Qb2xsZmlzaFVzZXJOb3RFbGlnaWJsZTogc3RyaW5nO1xuICAgIE9uUG9sbGZpc2hVc2VyUmVqZWN0ZWRTdXJ2ZXk6IHN0cmluZztcbiAgICBPblBvbGxmaXNoU3VydmV5Tm90QXZhaWxhYmxlOiBzdHJpbmc7XG4gIH07XG5cbiAgQENvcmRvdmFQcm9wZXJ0eSgpXG4gIFBvc2l0aW9uOiB7XG4gICAgVE9QX0xFRlQ6IG51bWJlcjtcbiAgICBUT1BfUklHSFQ6IG51bWJlcjtcbiAgICBNSURETEVfTEVGVDogbnVtYmVyO1xuICAgIE1JRERMRV9SSUdIVDogbnVtYmVyO1xuICAgIEJPVFRPTV9MRUZUOiBudW1iZXI7XG4gICAgQk9UVE9NX1JJR0hUOiBudW1iZXI7XG4gIH07XG5cbiAgLyoqXG4gICAqIEZ1bmN0aW9uIHRvIGluaXQgUG9sbGZpc2hcbiAgICpcbiAgICogQHBhcmFtIHJlbGVhc2VNb2RlIHtib29sZWFufVxuICAgKiBAcGFyYW0gcmV3YXJkTW9kZSB7Ym9vbGVhbn1cbiAgICogQHBhcmFtIGFwaUtleSB7c3RyaW5nfVxuICAgKiBAcGFyYW0gcG9zaXRpb24ge251bWJlcn1cbiAgICogQHBhcmFtIHBhZGRpbmcge251bWJlcn1cbiAgICogQHBhcmFtIHJlcXVlc3RVVUlEIHtzdHJpbmd9XG4gICAqIEBwYXJhbSBvZmZlcndhbGxNb2RlIHtib29sZWFufVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBpbml0KFxuICAgIHJlbGVhc2VNb2RlOiBib29sZWFuLFxuICAgIHJld2FyZE1vZGU6IGJvb2xlYW4sXG4gICAgYXBpS2V5OiBzdHJpbmcsXG4gICAgcG9zaXRpb246IG51bWJlcixcbiAgICBwYWRkaW5nOiBudW1iZXIsXG4gICAgcmVxdWVzdFVVSUQ6IHN0cmluZyxcbiAgICBvZmZlcndhbGxNb2RlOiBib29sZWFuXG4gICk6IGFueSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIEZ1bmN0aW9uIHRvIGluaXQgUG9sbGZpc2ggd2l0aCB1c2VyIGF0dHJpYnV0ZXNcbiAgICpcbiAgICogQHBhcmFtIHJlbGVhc2VNb2RlIHtib29sZWFufVxuICAgKiBAcGFyYW0gcmV3YXJkTW9kZSB7Ym9vbGVhbn1cbiAgICogQHBhcmFtIGFwaUtleSB7c3RyaW5nfVxuICAgKiBAcGFyYW0gcG9zaXRpb24ge251bWJlcn1cbiAgICogQHBhcmFtIHBhZGRpbmcge251bWJlcn1cbiAgICogQHBhcmFtIHJlcXVlc3RVVUlEIHtzdHJpbmd9XG4gICAqIEBwYXJhbSBvZmZlcndhbGxNb2RlIHtib29sZWFufVxuICAgKiBAcGFyYW0gdXNlckF0dHJpYnV0ZXMge0pzb259XG4gICAqL1xuXG4gIEBDb3Jkb3ZhKClcbiAgaW5pdFdpdGhVc2VyQXR0cmlidXRlcyhcbiAgICByZWxlYXNlTW9kZTogYm9vbGVhbixcbiAgICByZXdhcmRNb2RlOiBib29sZWFuLFxuICAgIGFwaUtleTogc3RyaW5nLFxuICAgIHBvc2l0aW9uOiBudW1iZXIsXG4gICAgcGFkZGluZzogbnVtYmVyLFxuICAgIHJlcXVlc3RVVUlEOiBzdHJpbmcsXG4gICAgb2ZmZXJ3YWxsTW9kZTogYm9vbGVhbixcbiAgICB1c2VyQXR0cmlidXRlczoge31cbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIEZ1bmN0aW9uIHRvIG1hbnVhbGx5IHNob3cgUG9sbGZpc2hcbiAgICovXG5cbiAgQENvcmRvdmEoKVxuICBzaG93UG9sbGZpc2goKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIEZ1bmN0aW9uIHRvIG1hbnVhbGx5IGhpZGUgUG9sbGZpc2hcbiAgICovXG5cbiAgQENvcmRvdmEoKVxuICBoaWRlUG9sbGZpc2goKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIEZ1bmN0aW9uIHRvIHNldCBldmVudCBjYWxsYmFja3NcbiAgICpcbiAgICogQHBhcmFtIGV2ZW50TmFtZVxuICAgKiBAcGFyYW0gY2FsbGJhY2tcbiAgICovXG5cbiAgQENvcmRvdmEoe1xuICAgIHN5bmM6IHRydWUsXG4gIH0pXG4gIHNldEV2ZW50Q2FsbGJhY2soZXZlbnROYW1lOiBzdHJpbmcsIGNhbGxiYWNrOiAoaW5mbz86IGFueSkgPT4gdm9pZCkge1xuICAgIHJldHVybjtcbiAgfVxufVxuIl19