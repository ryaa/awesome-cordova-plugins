import { __extends } from "tslib";
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import { Injectable } from '@angular/core';
var BackgroundFetch = /** @class */ (function (_super) {
    __extends(BackgroundFetch, _super);
    function BackgroundFetch() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BackgroundFetch.prototype.configure = function (config) { return cordova(this, "configure", { "callbackOrder": "reverse" }, arguments); };
    BackgroundFetch.prototype.start = function () { return cordova(this, "start", {}, arguments); };
    BackgroundFetch.prototype.stop = function () { return cordova(this, "stop", {}, arguments); };
    BackgroundFetch.prototype.finish = function (taskId) { return cordova(this, "finish", { "sync": true }, arguments); };
    BackgroundFetch.prototype.status = function () { return cordova(this, "status", {}, arguments); };
    BackgroundFetch.pluginName = "BackgroundFetch";
    BackgroundFetch.plugin = "cordova-plugin-background-fetch";
    BackgroundFetch.pluginRef = "BackgroundFetch";
    BackgroundFetch.repo = "https://github.com/transistorsoft/cordova-plugin-background-fetch";
    BackgroundFetch.platforms = ["iOS"];
    BackgroundFetch.decorators = [
        { type: Injectable }
    ];
    return BackgroundFetch;
}(AwesomeCordovaNativePlugin));
export { BackgroundFetch };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvYmFja2dyb3VuZC1mZXRjaC9uZ3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sdUNBQStDLE1BQU0sK0JBQStCLENBQUM7QUFDNUYsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7SUF5RE4sbUNBQTBCOzs7O0lBVTdELG1DQUFTLGFBQUMsTUFBNkI7SUFXdkMsK0JBQUs7SUFVTCw4QkFBSTtJQVlKLGdDQUFNLGFBQUMsTUFBYztJQVFyQixnQ0FBTTs7Ozs7OztnQkFwRFAsVUFBVTs7MEJBekRYO0VBMERxQywwQkFBMEI7U0FBbEQsZUFBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvcmRvdmEsIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvY29yZSc7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmFja2dyb3VuZEZldGNoQ29uZmlnIHtcbiAgLyoqXG4gICAqIFNldCB0cnVlIHRvIGNlYXNlIGJhY2tncm91bmQtZmV0Y2ggZnJvbSBvcGVyYXRpbmcgYWZ0ZXIgdXNlciBcImNsb3Nlc1wiIHRoZSBhcHAuIERlZmF1bHRzIHRvIHRydWUuXG4gICAqL1xuICBzdG9wT25UZXJtaW5hdGU/OiBib29sZWFuO1xufVxuXG4vKipcbiAqIEBuYW1lIEJhY2tncm91bmQgRmV0Y2hcbiAqIEBkZXNjcmlwdGlvblxuICogaU9TIEJhY2tncm91bmQgRmV0Y2ggSW1wbGVtZW50YXRpb24uIFNlZTogaHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL3JlZmVyZW5jZS91aWtpdC91aWFwcGxpY2F0aW9uIzE2NTczOTlcbiAqIGlPUyBCYWNrZ3JvdW5kIEZldGNoIGlzIGJhc2ljYWxseSBhbiBBUEkgd2hpY2ggd2FrZXMgdXAgeW91ciBhcHAgYWJvdXQgZXZlcnkgMTUgbWludXRlcyAoZHVyaW5nIHRoZSB1c2VyJ3MgcHJpbWUtdGltZSBob3VycykgYW5kIHByb3ZpZGVzIHlvdXIgYXBwIGV4YWN0bHkgMzBzIG9mIGJhY2tncm91bmQgcnVubmluZy10aW1lLiBUaGlzIHBsdWdpbiB3aWxsIGV4ZWN1dGUgeW91ciBwcm92aWRlZCBjYWxsYmFja0ZuIHdoZW5ldmVyIGEgYmFja2dyb3VuZC1mZXRjaCBldmVudCBvY2N1cnMuIFRoZXJlIGlzIG5vIHdheSB0byBpbmNyZWFzZSB0aGUgcmF0ZSB3aGljaCBhIGZldGNoLWV2ZW50IG9jY3VycyBhbmQgdGhpcyBwbHVnaW4gc2V0cyB0aGUgcmF0ZSB0byB0aGUgbW9zdCBmcmVxdWVudCBwb3NzaWJsZSB2YWx1ZSBvZiBVSUFwcGxpY2F0aW9uQmFja2dyb3VuZEZldGNoSW50ZXJ2YWxNaW5pbXVtIC0tIGlPUyBkZXRlcm1pbmVzIHRoZSByYXRlIGF1dG9tYXRpY2FsbHkgYmFzZWQgdXBvbiBkZXZpY2UgdXNhZ2UgYW5kIHRpbWUtb2YtZGF5IChpZTogZmV0Y2gtcmF0ZSBpcyBhYm91dCB+MTVtaW4gZHVyaW5nIHByaW1lLXRpbWUgaG91cnM7IGxlc3MgZnJlcXVlbnRseSB3aGVuIHRoZSB1c2VyIGlzIHByZXN1bWVkIHRvIGJlIHNsZWVwaW5nLCBhdCAzYW0gZm9yIGV4YW1wbGUpLlxuICogRm9yIG1vcmUgZGV0YWlsLCBwbGVhc2Ugc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS90cmFuc2lzdG9yc29mdC9jb3Jkb3ZhLXBsdWdpbi1iYWNrZ3JvdW5kLWZldGNoXG4gKiBAdXNhZ2VcbiAqXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBCYWNrZ3JvdW5kRmV0Y2gsIEJhY2tncm91bmRGZXRjaENvbmZpZyB9IGZyb20gJ0Bhd2Vzb21lLWNvcmRvdmEtcGx1Z2lucy9iYWNrZ3JvdW5kLWZldGNoL25neCc7XG4gKlxuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgYmFja2dyb3VuZEZldGNoOiBCYWNrZ3JvdW5kRmV0Y2gpIHtcbiAqXG4gKiAgIGNvbnN0IGNvbmZpZzogQmFja2dyb3VuZEZldGNoQ29uZmlnID0ge1xuICogICAgIHN0b3BPblRlcm1pbmF0ZTogZmFsc2UsIC8vIFNldCB0cnVlIHRvIGNlYXNlIGJhY2tncm91bmQtZmV0Y2ggZnJvbSBvcGVyYXRpbmcgYWZ0ZXIgdXNlciBcImNsb3Nlc1wiIHRoZSBhcHAuIERlZmF1bHRzIHRvIHRydWUuXG4gKiAgIH1cbiAqXG4gKiAgIGJhY2tncm91bmRGZXRjaC5jb25maWd1cmUoY29uZmlnKVxuICogICAgICAudGhlbigoKSA9PiB7XG4gKiAgICAgICAgICBjb25zb2xlLmxvZygnQmFja2dyb3VuZCBGZXRjaCBpbml0aWFsaXplZCcpO1xuICpcbiAqICAgICAgICAgIHRoaXMuYmFja2dyb3VuZEZldGNoLmZpbmlzaCgpO1xuICpcbiAqICAgICAgfSlcbiAqICAgICAgLmNhdGNoKGUgPT4gY29uc29sZS5sb2coJ0Vycm9yIGluaXRpYWxpemluZyBiYWNrZ3JvdW5kIGZldGNoJywgZSkpO1xuICpcbiAqICAgLy8gU3RhcnQgdGhlIGJhY2tncm91bmQtZmV0Y2ggQVBJLiBZb3VyIGNhbGxiYWNrRm4gcHJvdmlkZWQgdG8gI2NvbmZpZ3VyZSB3aWxsIGJlIGV4ZWN1dGVkIGVhY2ggdGltZSBhIGJhY2tncm91bmQtZmV0Y2ggZXZlbnQgb2NjdXJzLiBOT1RFIHRoZSAjY29uZmlndXJlIG1ldGhvZCBhdXRvbWF0aWNhbGx5IGNhbGxzICNzdGFydC4gWW91IGRvIG5vdCBoYXZlIHRvIGNhbGwgdGhpcyBtZXRob2QgYWZ0ZXIgeW91ICNjb25maWd1cmUgdGhlIHBsdWdpblxuICogICBiYWNrZ3JvdW5kRmV0Y2guc3RhcnQoKTtcbiAqXG4gKiAgIC8vIFN0b3AgdGhlIGJhY2tncm91bmQtZmV0Y2ggQVBJIGZyb20gZmlyaW5nIGZldGNoIGV2ZW50cy4gWW91ciBjYWxsYmFja0ZuIHByb3ZpZGVkIHRvICNjb25maWd1cmUgd2lsbCBubyBsb25nZXIgYmUgZXhlY3V0ZWQuXG4gKiAgIGJhY2tncm91bmRGZXRjaC5zdG9wKCk7XG4gKlxuICpcbiAqIH1cbiAqXG4gKiBgYGBcbiAqIEBpbnRlcmZhY2VzXG4gKiBCYWNrZ3JvdW5kRmV0Y2hDb25maWdcbiAqL1xuQFBsdWdpbih7XG4gIHBsdWdpbk5hbWU6ICdCYWNrZ3JvdW5kRmV0Y2gnLFxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1iYWNrZ3JvdW5kLWZldGNoJyxcbiAgcGx1Z2luUmVmOiAnQmFja2dyb3VuZEZldGNoJyxcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS90cmFuc2lzdG9yc29mdC9jb3Jkb3ZhLXBsdWdpbi1iYWNrZ3JvdW5kLWZldGNoJyxcbiAgcGxhdGZvcm1zOiBbJ2lPUyddLFxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBCYWNrZ3JvdW5kRmV0Y2ggZXh0ZW5kcyBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiB7XG4gIC8qKlxuICAgKiBDb25maWd1cmVzIHRoZSBwbHVnaW4ncyBmZXRjaCBjYWxsYmFja0ZuXG4gICAqXG4gICAqIEBwYXJhbSB7QmFja2dyb3VuZEZldGNoQ29uZmlnfSBjb25maWcgQ29uZmlndXJhdGlvbiBmb3IgcGx1Z2luXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgY2FsbGJhY2tPcmRlcjogJ3JldmVyc2UnLFxuICB9KVxuICBjb25maWd1cmUoY29uZmlnOiBCYWNrZ3JvdW5kRmV0Y2hDb25maWcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdGFydCB0aGUgYmFja2dyb3VuZC1mZXRjaCBBUEkuXG4gICAqIFlvdXIgY2FsbGJhY2tGbiBwcm92aWRlZCB0byAjY29uZmlndXJlIHdpbGwgYmUgZXhlY3V0ZWQgZWFjaCB0aW1lIGEgYmFja2dyb3VuZC1mZXRjaCBldmVudCBvY2N1cnMuIE5PVEUgdGhlICNjb25maWd1cmUgbWV0aG9kIGF1dG9tYXRpY2FsbHkgY2FsbHMgI3N0YXJ0LiBZb3UgZG8gbm90IGhhdmUgdG8gY2FsbCB0aGlzIG1ldGhvZCBhZnRlciB5b3UgI2NvbmZpZ3VyZSB0aGUgcGx1Z2luXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHN0YXJ0KCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0b3AgdGhlIGJhY2tncm91bmQtZmV0Y2ggQVBJIGZyb20gZmlyaW5nIGZldGNoIGV2ZW50cy4gWW91ciBjYWxsYmFja0ZuIHByb3ZpZGVkIHRvICNjb25maWd1cmUgd2lsbCBubyBsb25nZXIgYmUgZXhlY3V0ZWQuXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHN0b3AoKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogWW91IE1VU1QgY2FsbCB0aGlzIG1ldGhvZCBpbiB5b3VyIGZldGNoIGNhbGxiYWNrRm4gcHJvdmlkZWQgdG8gI2NvbmZpZ3VyZSBpbiBvcmRlciB0byBzaWduYWwgdG8gaU9TIHRoYXQgeW91ciBmZXRjaCBhY3Rpb24gaXMgY29tcGxldGUuIGlPUyBwcm92aWRlcyBvbmx5IDMwcyBvZiBiYWNrZ3JvdW5kLXRpbWUgZm9yIGEgZmV0Y2gtZXZlbnQgLS0gaWYgeW91IGV4Y2VlZCB0aGlzIDMwcywgaU9TIHdpbGwga2lsbCB5b3VyIGFwcC5cbiAgICpcbiAgICogQHBhcmFtIHRhc2tJZFxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIHN5bmM6IHRydWUsXG4gIH0pXG4gIGZpbmlzaCh0YXNrSWQ6IHN0cmluZyk6IHZvaWQge31cblxuICAvKipcbiAgICogUmV0dXJuIHRoZSBzdGF0dXMgb2YgdGhlIGJhY2tncm91bmQtZmV0Y2hcbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgc3RhdHVzKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG59XG4iXX0=