var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var StripeOriginal = /** @class */ (function (_super) {
    __extends(StripeOriginal, _super);
    function StripeOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    StripeOriginal.prototype.setPublishableKey = function (publishableKey) { return cordova(this, "setPublishableKey", {}, arguments); };
    StripeOriginal.prototype.createCardToken = function (params) { return cordova(this, "createCardToken", {}, arguments); };
    StripeOriginal.prototype.createBankAccountToken = function (params) { return cordova(this, "createBankAccountToken", {}, arguments); };
    StripeOriginal.prototype.validateCardNumber = function (cardNumber) { return cordova(this, "validateCardNumber", {}, arguments); };
    StripeOriginal.prototype.validateCVC = function (cvc) { return cordova(this, "validateCVC", {}, arguments); };
    StripeOriginal.prototype.validateExpiryDate = function (expMonth, expYear) { return cordova(this, "validateExpiryDate", {}, arguments); };
    StripeOriginal.prototype.getCardType = function (cardNumber) { return cordova(this, "getCardType", {}, arguments); };
    StripeOriginal.pluginName = "Stripe";
    StripeOriginal.plugin = "cordova-plugin-stripe";
    StripeOriginal.pluginRef = "cordova.plugins.stripe";
    StripeOriginal.repo = "https://github.com/zyramedia/cordova-plugin-stripe";
    StripeOriginal.platforms = ["Android", "Browser", "iOS"];
    return StripeOriginal;
}(AwesomeCordovaNativePlugin));
var Stripe = new StripeOriginal();
export { Stripe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvc3RyaXBlL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFDQSxPQUFPLHVDQUErQyxNQUFNLCtCQUErQixDQUFDOztJQThJaEUsMEJBQTBCOzs7O0lBUXBELGtDQUFpQixhQUFDLGNBQXNCO0lBV3hDLGdDQUFlLGFBQUMsTUFBNkI7SUFXN0MsdUNBQXNCLGFBQUMsTUFBK0I7SUFXdEQsbUNBQWtCLGFBQUMsVUFBa0I7SUFXckMsNEJBQVcsYUFBQyxHQUFXO0lBWXZCLG1DQUFrQixhQUFDLFFBQWdCLEVBQUUsT0FBZTtJQVdwRCw0QkFBVyxhQUFDLFVBQWtCOzs7Ozs7aUJBMU5oQztFQStJNEIsMEJBQTBCO1NBQXpDLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb3Jkb3ZhLCBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL2NvcmUnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFN0cmlwZUNhcmRUb2tlblBhcmFtcyB7XG4gIC8qKlxuICAgKiBDYXJkIG51bWJlclxuICAgKi9cbiAgbnVtYmVyOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBFeHBpcnkgbW9udGhcbiAgICovXG4gIGV4cE1vbnRoOiBudW1iZXI7XG4gIC8qKlxuICAgKiBFeHBpcnkgeWVhclxuICAgKi9cbiAgZXhwWWVhcjogbnVtYmVyO1xuICAvKipcbiAgICogQ1ZDIC8gQ1ZWXG4gICAqL1xuICBjdmM/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBDYXJkaG9sZGVyIG5hbWVcbiAgICovXG4gIG5hbWU/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBBZGRyZXNzIGxpbmUgMVxuICAgKi9cbiAgYWRkcmVzc19saW5lMT86IHN0cmluZztcbiAgLyoqXG4gICAqIEFkZHJlc3MgbGluZSAyXG4gICAqL1xuICBhZGRyZXNzX2xpbmUyPzogc3RyaW5nO1xuICAvKipcbiAgICogQ2l0eVxuICAgKi9cbiAgYWRkcmVzc19jaXR5Pzogc3RyaW5nO1xuICAvKipcbiAgICogU3RhdGUgLyBQcm92aW5jZVxuICAgKi9cbiAgYWRkcmVzc19zdGF0ZT86IHN0cmluZztcbiAgLyoqXG4gICAqIENvdW50cnlcbiAgICovXG4gIGFkZHJlc3NfY291bnRyeT86IHN0cmluZztcbiAgLyoqXG4gICAqIFBvc3RhbCBjb2RlIC8gWklQIENvZGVcbiAgICovXG4gIHBvc3RhbENvZGU/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiAzLWxldHRlciBJU08gY29kZSBmb3IgY3VycmVuY3lcbiAgICovXG4gIGN1cnJlbmN5Pzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFN0cmlwZUJhbmtBY2NvdW50UGFyYW1zIHtcbiAgLyoqXG4gICAqIFJvdXRpbmcgbnVtYmVyLlxuICAgKi9cbiAgcm91dGluZ19udW1iZXI6IHN0cmluZztcbiAgLyoqXG4gICAqIEFjY291bnQgbnVtYmVyLlxuICAgKi9cbiAgYWNjb3VudF9udW1iZXI6IHN0cmluZztcbiAgLyoqXG4gICAqIEN1cnJlbmN5IGNvZGUuIEV4YW1wbGU6IGBVU0RgLlxuICAgKi9cbiAgY3VycmVuY3k6IHN0cmluZztcbiAgLyoqXG4gICAqIENvdW50cnkgY29kZS4gRXhhbXBsZTogYFVTYC5cbiAgICovXG4gIGNvdW50cnk6IHN0cmluZztcbiAgLyoqXG4gICAqIEFjY291bnQgaG9sZGVyIG5hbWUuXG4gICAqL1xuICBhY2NvdW50X2hvbGRlcl9uYW1lPzogc3RyaW5nO1xuICAvKipcbiAgICogQWNjb3VudCBob2xkZXIgdHlwZS4gVGhpcyBjYW4gYmUgYGluZGl2aWR1YWxgIG9yIGBjb21wYW55YC5cbiAgICovXG4gIGFjY291bnRfaG9sZGVyX3R5cGU/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3RyaXBlQ2FyZFRva2VuUmVzIHtcbiAgLyoqXG4gICAqIENhcmQgT2JqZWN0LlxuICAgKi9cbiAgY2FyZDoge1xuICAgIGJyYW5kOiBzdHJpbmc7XG4gICAgZXhwX21vbnRoOiBudW1iZXI7XG4gICAgZXhwX3llYXI6IG51bWJlcjtcbiAgICBmdW5kaW5nOiBzdHJpbmc7XG4gICAgbGFzdDQ6IHN0cmluZztcbiAgfTtcbiAgLyoqXG4gICAqIFRva2VuIFJlcXVlc3QgRGF0ZSBUaW1lLlxuICAgKi9cbiAgY3JlYXRlZDogc3RyaW5nO1xuICAvKipcbiAgICogQ2FyZCBUb2tlbi5cbiAgICovXG4gIGlkOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBTb3VyY2UgVHlwZSAoY2FyZCBvciBhY2NvdW50KS5cbiAgICovXG4gIHR5cGU6IHN0cmluZztcbn1cblxuLyoqXG4gKiBAbmFtZSBTdHJpcGVcbiAqIEBkZXNjcmlwdGlvblxuICogQSBwbHVnaW4gdGhhdCBhbGxvd3MgeW91IHRvIHVzZSBTdHJpcGUncyBOYXRpdmUgU0RLcyBmb3IgQW5kcm9pZCBhbmQgaU9TLlxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBTdHJpcGUgfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvc3RyaXBlL25neCc7XG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSBzdHJpcGU6IFN0cmlwZSkgeyB9XG4gKlxuICogLi4uXG4gKlxuICogdGhpcy5zdHJpcGUuc2V0UHVibGlzaGFibGVLZXkoJ215X3B1Ymxpc2hhYmxlX2tleScpO1xuICpcbiAqIGxldCBjYXJkID0ge1xuICogIG51bWJlcjogJzQyNDI0MjQyNDI0MjQyNDInLFxuICogIGV4cE1vbnRoOiAxMixcbiAqICBleHBZZWFyOiAyMDIwLFxuICogIGN2YzogJzIyMCdcbiAqIH1cbiAqXG4gKiB0aGlzLnN0cmlwZS5jcmVhdGVDYXJkVG9rZW4oY2FyZClcbiAqICAgIC50aGVuKHRva2VuID0+IGNvbnNvbGUubG9nKHRva2VuLmlkKSlcbiAqICAgIC5jYXRjaChlcnJvciA9PiBjb25zb2xlLmVycm9yKGVycm9yKSk7XG4gKlxuICogYGBgXG4gKiBAaW50ZXJmYWNlc1xuICogU3RyaXBlQ2FyZFRva2VuUGFyYW1zXG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnU3RyaXBlJyxcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tc3RyaXBlJyxcbiAgcGx1Z2luUmVmOiAnY29yZG92YS5wbHVnaW5zLnN0cmlwZScsXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20venlyYW1lZGlhL2NvcmRvdmEtcGx1Z2luLXN0cmlwZScsXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ0Jyb3dzZXInLCAnaU9TJ10sXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFN0cmlwZSBleHRlbmRzIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luIHtcbiAgLyoqXG4gICAqIFNldCBwdWJsaXNoYWJsZSBrZXlcbiAgICpcbiAgICogQHBhcmFtIHB1Ymxpc2hhYmxlS2V5IHtzdHJpbmd9IFB1Ymxpc2hhYmxlIGtleVxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgc2V0UHVibGlzaGFibGVLZXkocHVibGlzaGFibGVLZXk6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgQ3JlZGl0IENhcmQgVG9rZW5cbiAgICpcbiAgICogQHBhcmFtIHBhcmFtcyB7U3RyaXBlQ2FyZFRva2VuUGFyYW1zfSBDcmVkaXQgY2FyZCBpbmZvcm1hdGlvblxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxTdHJpcGVDYXJkVG9rZW5SZXM+fSByZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdGhlIHRva2VuIG9iamVjdCwgb3IgcmVqZWN0cyB3aXRoIGFuIGVycm9yXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGNyZWF0ZUNhcmRUb2tlbihwYXJhbXM6IFN0cmlwZUNhcmRUb2tlblBhcmFtcyk6IFByb21pc2U8U3RyaXBlQ2FyZFRva2VuUmVzPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIGJhbmsgYWNjb3VudCB0b2tlblxuICAgKlxuICAgKiBAcGFyYW0gcGFyYW1zIHtTdHJpcGVCYW5rQWNjb3VudFBhcmFtc30gQmFuayBhY2NvdW50IGluZm9ybWF0aW9uXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHN0cmluZz59IHJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgdG9rZW4sIG9yIHJlamVjdHMgd2l0aCBhbiBlcnJvclxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBjcmVhdGVCYW5rQWNjb3VudFRva2VuKHBhcmFtczogU3RyaXBlQmFua0FjY291bnRQYXJhbXMpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBWYWxpZGF0ZXMgYSBjcmVkaXQgY2FyZCBudW1iZXJcbiAgICpcbiAgICogQHBhcmFtIGNhcmROdW1iZXIge3N0cmluZ30gQ3JlZGl0IGNhcmQgbnVtYmVyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IHJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgaWYgdGhlIG51bWJlciBpcyB2YWxpZCwgYW5kIHJlamVjdHMgaWYgaXQncyBpbnZhbGlkXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHZhbGlkYXRlQ2FyZE51bWJlcihjYXJkTnVtYmVyOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBWYWxpZGF0ZXMgYSBDVkMgbnVtYmVyXG4gICAqXG4gICAqIEBwYXJhbSBjdmMge3N0cmluZ30gQ1ZDIG51bWJlclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSByZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIGlmIHRoZSBudW1iZXIgaXMgdmFsaWQsIGFuZCByZWplY3RzIGlmIGl0J3MgaW52YWxpZFxuICAgKi9cbiAgQENvcmRvdmEoKVxuICB2YWxpZGF0ZUNWQyhjdmM6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFZhbGlkYXRlcyBhbiBleHBpcnkgZGF0ZVxuICAgKlxuICAgKiBAcGFyYW0gZXhwTW9udGgge3N0cmluZ30gZXhwaXJ5IG1vbnRoICgwIC0gMTEpXG4gICAqIEBwYXJhbSBleHBZZWFyIHtzdHJpbmd9IGV4cGlyeSB5ZWFyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IHJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgaWYgdGhlIGRhdGUgaXMgdmFsaWQsIGFuZCByZWplY3RzIGlmIGl0J3MgaW52YWxpZFxuICAgKi9cbiAgQENvcmRvdmEoKVxuICB2YWxpZGF0ZUV4cGlyeURhdGUoZXhwTW9udGg6IHN0cmluZywgZXhwWWVhcjogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogR2V0IGEgY2FyZCB0eXBlIGZyb20gY2FyZCBudW1iZXJcbiAgICpcbiAgICogQHBhcmFtIGNhcmROdW1iZXIge3N0cmluZ30gQ2FyZCBudW1iZXJcbiAgICogQHJldHVybnMge1Byb21pc2U8c3RyaW5nPn0gcmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSBjcmVkaXQgY2FyZCB0eXBlXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGdldENhcmRUeXBlKGNhcmROdW1iZXI6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgcmV0dXJuO1xuICB9XG59XG4iXX0=