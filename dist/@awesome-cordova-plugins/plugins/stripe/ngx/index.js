import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var Stripe = /** @class */ (function (_super) {
    __extends(Stripe, _super);
    function Stripe() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Stripe.prototype.setPublishableKey = function (publishableKey) { return cordova(this, "setPublishableKey", {}, arguments); };
    Stripe.prototype.createCardToken = function (params) { return cordova(this, "createCardToken", {}, arguments); };
    Stripe.prototype.createBankAccountToken = function (params) { return cordova(this, "createBankAccountToken", {}, arguments); };
    Stripe.prototype.validateCardNumber = function (cardNumber) { return cordova(this, "validateCardNumber", {}, arguments); };
    Stripe.prototype.validateCVC = function (cvc) { return cordova(this, "validateCVC", {}, arguments); };
    Stripe.prototype.validateExpiryDate = function (expMonth, expYear) { return cordova(this, "validateExpiryDate", {}, arguments); };
    Stripe.prototype.getCardType = function (cardNumber) { return cordova(this, "getCardType", {}, arguments); };
    Stripe.pluginName = "Stripe";
    Stripe.plugin = "cordova-plugin-stripe";
    Stripe.pluginRef = "cordova.plugins.stripe";
    Stripe.repo = "https://github.com/zyramedia/cordova-plugin-stripe";
    Stripe.platforms = ["Android", "Browser", "iOS"];
    Stripe.decorators = [
        { type: Injectable }
    ];
    return Stripe;
}(AwesomeCordovaNativePlugin));
export { Stripe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvc3RyaXBlL25neC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLHVDQUErQyxNQUFNLCtCQUErQixDQUFDOztJQThJaEUsMEJBQTBCOzs7O0lBUXBELGtDQUFpQixhQUFDLGNBQXNCO0lBV3hDLGdDQUFlLGFBQUMsTUFBNkI7SUFXN0MsdUNBQXNCLGFBQUMsTUFBK0I7SUFXdEQsbUNBQWtCLGFBQUMsVUFBa0I7SUFXckMsNEJBQVcsYUFBQyxHQUFXO0lBWXZCLG1DQUFrQixhQUFDLFFBQWdCLEVBQUUsT0FBZTtJQVdwRCw0QkFBVyxhQUFDLFVBQWtCOzs7Ozs7O2dCQTVFL0IsVUFBVTs7aUJBOUlYO0VBK0k0QiwwQkFBMEI7U0FBekMsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvcmRvdmEsIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvY29yZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3RyaXBlQ2FyZFRva2VuUGFyYW1zIHtcbiAgLyoqXG4gICAqIENhcmQgbnVtYmVyXG4gICAqL1xuICBudW1iZXI6IHN0cmluZztcbiAgLyoqXG4gICAqIEV4cGlyeSBtb250aFxuICAgKi9cbiAgZXhwTW9udGg6IG51bWJlcjtcbiAgLyoqXG4gICAqIEV4cGlyeSB5ZWFyXG4gICAqL1xuICBleHBZZWFyOiBudW1iZXI7XG4gIC8qKlxuICAgKiBDVkMgLyBDVlZcbiAgICovXG4gIGN2Yz86IHN0cmluZztcbiAgLyoqXG4gICAqIENhcmRob2xkZXIgbmFtZVxuICAgKi9cbiAgbmFtZT86IHN0cmluZztcbiAgLyoqXG4gICAqIEFkZHJlc3MgbGluZSAxXG4gICAqL1xuICBhZGRyZXNzX2xpbmUxPzogc3RyaW5nO1xuICAvKipcbiAgICogQWRkcmVzcyBsaW5lIDJcbiAgICovXG4gIGFkZHJlc3NfbGluZTI/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBDaXR5XG4gICAqL1xuICBhZGRyZXNzX2NpdHk/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBTdGF0ZSAvIFByb3ZpbmNlXG4gICAqL1xuICBhZGRyZXNzX3N0YXRlPzogc3RyaW5nO1xuICAvKipcbiAgICogQ291bnRyeVxuICAgKi9cbiAgYWRkcmVzc19jb3VudHJ5Pzogc3RyaW5nO1xuICAvKipcbiAgICogUG9zdGFsIGNvZGUgLyBaSVAgQ29kZVxuICAgKi9cbiAgcG9zdGFsQ29kZT86IHN0cmluZztcbiAgLyoqXG4gICAqIDMtbGV0dGVyIElTTyBjb2RlIGZvciBjdXJyZW5jeVxuICAgKi9cbiAgY3VycmVuY3k/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3RyaXBlQmFua0FjY291bnRQYXJhbXMge1xuICAvKipcbiAgICogUm91dGluZyBudW1iZXIuXG4gICAqL1xuICByb3V0aW5nX251bWJlcjogc3RyaW5nO1xuICAvKipcbiAgICogQWNjb3VudCBudW1iZXIuXG4gICAqL1xuICBhY2NvdW50X251bWJlcjogc3RyaW5nO1xuICAvKipcbiAgICogQ3VycmVuY3kgY29kZS4gRXhhbXBsZTogYFVTRGAuXG4gICAqL1xuICBjdXJyZW5jeTogc3RyaW5nO1xuICAvKipcbiAgICogQ291bnRyeSBjb2RlLiBFeGFtcGxlOiBgVVNgLlxuICAgKi9cbiAgY291bnRyeTogc3RyaW5nO1xuICAvKipcbiAgICogQWNjb3VudCBob2xkZXIgbmFtZS5cbiAgICovXG4gIGFjY291bnRfaG9sZGVyX25hbWU/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBBY2NvdW50IGhvbGRlciB0eXBlLiBUaGlzIGNhbiBiZSBgaW5kaXZpZHVhbGAgb3IgYGNvbXBhbnlgLlxuICAgKi9cbiAgYWNjb3VudF9ob2xkZXJfdHlwZT86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTdHJpcGVDYXJkVG9rZW5SZXMge1xuICAvKipcbiAgICogQ2FyZCBPYmplY3QuXG4gICAqL1xuICBjYXJkOiB7XG4gICAgYnJhbmQ6IHN0cmluZztcbiAgICBleHBfbW9udGg6IG51bWJlcjtcbiAgICBleHBfeWVhcjogbnVtYmVyO1xuICAgIGZ1bmRpbmc6IHN0cmluZztcbiAgICBsYXN0NDogc3RyaW5nO1xuICB9O1xuICAvKipcbiAgICogVG9rZW4gUmVxdWVzdCBEYXRlIFRpbWUuXG4gICAqL1xuICBjcmVhdGVkOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBDYXJkIFRva2VuLlxuICAgKi9cbiAgaWQ6IHN0cmluZztcbiAgLyoqXG4gICAqIFNvdXJjZSBUeXBlIChjYXJkIG9yIGFjY291bnQpLlxuICAgKi9cbiAgdHlwZTogc3RyaW5nO1xufVxuXG4vKipcbiAqIEBuYW1lIFN0cmlwZVxuICogQGRlc2NyaXB0aW9uXG4gKiBBIHBsdWdpbiB0aGF0IGFsbG93cyB5b3UgdG8gdXNlIFN0cmlwZSdzIE5hdGl2ZSBTREtzIGZvciBBbmRyb2lkIGFuZCBpT1MuXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IFN0cmlwZSB9IGZyb20gJ0Bhd2Vzb21lLWNvcmRvdmEtcGx1Z2lucy9zdHJpcGUvbmd4JztcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIHN0cmlwZTogU3RyaXBlKSB7IH1cbiAqXG4gKiAuLi5cbiAqXG4gKiB0aGlzLnN0cmlwZS5zZXRQdWJsaXNoYWJsZUtleSgnbXlfcHVibGlzaGFibGVfa2V5Jyk7XG4gKlxuICogbGV0IGNhcmQgPSB7XG4gKiAgbnVtYmVyOiAnNDI0MjQyNDI0MjQyNDI0MicsXG4gKiAgZXhwTW9udGg6IDEyLFxuICogIGV4cFllYXI6IDIwMjAsXG4gKiAgY3ZjOiAnMjIwJ1xuICogfVxuICpcbiAqIHRoaXMuc3RyaXBlLmNyZWF0ZUNhcmRUb2tlbihjYXJkKVxuICogICAgLnRoZW4odG9rZW4gPT4gY29uc29sZS5sb2codG9rZW4uaWQpKVxuICogICAgLmNhdGNoKGVycm9yID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcbiAqXG4gKiBgYGBcbiAqIEBpbnRlcmZhY2VzXG4gKiBTdHJpcGVDYXJkVG9rZW5QYXJhbXNcbiAqL1xuQFBsdWdpbih7XG4gIHBsdWdpbk5hbWU6ICdTdHJpcGUnLFxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1zdHJpcGUnLFxuICBwbHVnaW5SZWY6ICdjb3Jkb3ZhLnBsdWdpbnMuc3RyaXBlJyxcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS96eXJhbWVkaWEvY29yZG92YS1wbHVnaW4tc3RyaXBlJyxcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnQnJvd3NlcicsICdpT1MnXSxcbn0pXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgU3RyaXBlIGV4dGVuZHMgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4ge1xuICAvKipcbiAgICogU2V0IHB1Ymxpc2hhYmxlIGtleVxuICAgKlxuICAgKiBAcGFyYW0gcHVibGlzaGFibGVLZXkge3N0cmluZ30gUHVibGlzaGFibGUga2V5XG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBzZXRQdWJsaXNoYWJsZUtleShwdWJsaXNoYWJsZUtleTogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBDcmVkaXQgQ2FyZCBUb2tlblxuICAgKlxuICAgKiBAcGFyYW0gcGFyYW1zIHtTdHJpcGVDYXJkVG9rZW5QYXJhbXN9IENyZWRpdCBjYXJkIGluZm9ybWF0aW9uXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPFN0cmlwZUNhcmRUb2tlblJlcz59IHJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgdG9rZW4gb2JqZWN0LCBvciByZWplY3RzIHdpdGggYW4gZXJyb3JcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgY3JlYXRlQ2FyZFRva2VuKHBhcmFtczogU3RyaXBlQ2FyZFRva2VuUGFyYW1zKTogUHJvbWlzZTxTdHJpcGVDYXJkVG9rZW5SZXM+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgYmFuayBhY2NvdW50IHRva2VuXG4gICAqXG4gICAqIEBwYXJhbSBwYXJhbXMge1N0cmlwZUJhbmtBY2NvdW50UGFyYW1zfSBCYW5rIGFjY291bnQgaW5mb3JtYXRpb25cbiAgICogQHJldHVybnMge1Byb21pc2U8c3RyaW5nPn0gcmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSB0b2tlbiwgb3IgcmVqZWN0cyB3aXRoIGFuIGVycm9yXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGNyZWF0ZUJhbmtBY2NvdW50VG9rZW4ocGFyYW1zOiBTdHJpcGVCYW5rQWNjb3VudFBhcmFtcyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFZhbGlkYXRlcyBhIGNyZWRpdCBjYXJkIG51bWJlclxuICAgKlxuICAgKiBAcGFyYW0gY2FyZE51bWJlciB7c3RyaW5nfSBDcmVkaXQgY2FyZCBudW1iZXJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gcmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyBpZiB0aGUgbnVtYmVyIGlzIHZhbGlkLCBhbmQgcmVqZWN0cyBpZiBpdCdzIGludmFsaWRcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgdmFsaWRhdGVDYXJkTnVtYmVyKGNhcmROdW1iZXI6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFZhbGlkYXRlcyBhIENWQyBudW1iZXJcbiAgICpcbiAgICogQHBhcmFtIGN2YyB7c3RyaW5nfSBDVkMgbnVtYmVyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IHJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgaWYgdGhlIG51bWJlciBpcyB2YWxpZCwgYW5kIHJlamVjdHMgaWYgaXQncyBpbnZhbGlkXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHZhbGlkYXRlQ1ZDKGN2Yzogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogVmFsaWRhdGVzIGFuIGV4cGlyeSBkYXRlXG4gICAqXG4gICAqIEBwYXJhbSBleHBNb250aCB7c3RyaW5nfSBleHBpcnkgbW9udGggKDAgLSAxMSlcbiAgICogQHBhcmFtIGV4cFllYXIge3N0cmluZ30gZXhwaXJ5IHllYXJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gcmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyBpZiB0aGUgZGF0ZSBpcyB2YWxpZCwgYW5kIHJlamVjdHMgaWYgaXQncyBpbnZhbGlkXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHZhbGlkYXRlRXhwaXJ5RGF0ZShleHBNb250aDogc3RyaW5nLCBleHBZZWFyOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgYSBjYXJkIHR5cGUgZnJvbSBjYXJkIG51bWJlclxuICAgKlxuICAgKiBAcGFyYW0gY2FyZE51bWJlciB7c3RyaW5nfSBDYXJkIG51bWJlclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxzdHJpbmc+fSByZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdGhlIGNyZWRpdCBjYXJkIHR5cGVcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgZ2V0Q2FyZFR5cGUoY2FyZE51bWJlcjogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICByZXR1cm47XG4gIH1cbn1cbiJdfQ==