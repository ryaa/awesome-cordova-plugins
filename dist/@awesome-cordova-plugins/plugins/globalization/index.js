var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var GlobalizationOriginal = /** @class */ (function (_super) {
    __extends(GlobalizationOriginal, _super);
    function GlobalizationOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GlobalizationOriginal.prototype.getPreferredLanguage = function () { return cordova(this, "getPreferredLanguage", {}, arguments); };
    GlobalizationOriginal.prototype.getLocaleName = function () { return cordova(this, "getLocaleName", {}, arguments); };
    GlobalizationOriginal.prototype.dateToString = function (date, options) { return cordova(this, "dateToString", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    GlobalizationOriginal.prototype.stringToDate = function (dateString, options) { return cordova(this, "stringToDate", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    GlobalizationOriginal.prototype.getDatePattern = function (options) { return cordova(this, "getDatePattern", { "callbackOrder": "reverse" }, arguments); };
    GlobalizationOriginal.prototype.getDateNames = function (options) { return cordova(this, "getDateNames", { "callbackOrder": "reverse" }, arguments); };
    GlobalizationOriginal.prototype.isDayLightSavingsTime = function (date) { return cordova(this, "isDayLightSavingsTime", {}, arguments); };
    GlobalizationOriginal.prototype.getFirstDayOfWeek = function () { return cordova(this, "getFirstDayOfWeek", {}, arguments); };
    GlobalizationOriginal.prototype.numberToString = function (numberToConvert, options) { return cordova(this, "numberToString", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    GlobalizationOriginal.prototype.stringToNumber = function (stringToConvert, options) { return cordova(this, "stringToNumber", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    GlobalizationOriginal.prototype.getNumberPattern = function (options) { return cordova(this, "getNumberPattern", { "callbackOrder": "reverse" }, arguments); };
    GlobalizationOriginal.prototype.getCurrencyPattern = function (currencyCode) { return cordova(this, "getCurrencyPattern", {}, arguments); };
    GlobalizationOriginal.pluginName = "Globalization";
    GlobalizationOriginal.plugin = "cordova-plugin-globalization";
    GlobalizationOriginal.pluginRef = "navigator.globalization";
    GlobalizationOriginal.repo = "https://github.com/apache/cordova-plugin-globalization";
    GlobalizationOriginal.platforms = ["Amazon Fire OS", "Android", "Browser", "iOS", "Windows"];
    return GlobalizationOriginal;
}(AwesomeCordovaNativePlugin));
var Globalization = new GlobalizationOriginal();
export { Globalization };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvZ2xvYmFsaXphdGlvbi9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFDQSxPQUFPLHVDQUErQyxNQUFNLCtCQUErQixDQUFDOztJQTBDekQsaUNBQTBCOzs7O0lBTzNELDRDQUFvQjtJQVVwQixxQ0FBYTtJQWViLG9DQUFZLGFBQUMsSUFBVSxFQUFFLE9BQTZCO0lBZXRELG9DQUFZLGFBQ1YsVUFBa0IsRUFDbEIsT0FBNkI7SUFzQi9CLHNDQUFjLGFBQUMsT0FBNkI7SUFxQjVDLG9DQUFZLGFBQUMsT0FBdUM7SUFXcEQsNkNBQXFCLGFBQUMsSUFBVTtJQVVoQyx5Q0FBaUI7SUFlakIsc0NBQWMsYUFBQyxlQUF1QixFQUFFLE9BQXlCO0lBZWpFLHNDQUFjLGFBQUMsZUFBdUIsRUFBRSxPQUF5QjtJQWNqRSx3Q0FBZ0IsYUFBQyxPQUF5QjtJQW9CMUMsMENBQWtCLGFBQUMsWUFBb0I7Ozs7Ozt3QkE1TnpDO0VBMkNtQywwQkFBMEI7U0FBaEQsYUFBYSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvcmRvdmEsIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvY29yZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgR2xvYmFsaXphdGlvbk9wdGlvbnMge1xuICBmb3JtYXRMZW5ndGg6IHN0cmluZztcbiAgc2VsZWN0b3I6IHN0cmluZztcbn1cblxuLyoqXG4gKiBAbmFtZSBHbG9iYWxpemF0aW9uXG4gKiBAcHJlbWllciBnbG9iYWxpemF0aW9uXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoaXMgcGx1Z2luIG9idGFpbnMgaW5mb3JtYXRpb24gYW5kIHBlcmZvcm1zIG9wZXJhdGlvbnMgc3BlY2lmaWMgdG8gdGhlIHVzZXIncyBsb2NhbGUsIGxhbmd1YWdlLCBhbmQgdGltZXpvbmUuXG4gKiBAZGVwcmVjYXRlZFxuICogV2l0aCB0aGUgW0VDTUEgSW50ZXJuYXRpb25hbGl6YXRpb24gQVBJXShodHRwczovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtNDAyLzEuMC8pIG5vdyBzdXBwb3J0ZWQgb24gaU9TLCBBbmRyb2lkIGFuZCBXaW5kb3dzIGRldmljZXMsIHRoaXMgcGx1Z2luIGlzIG5vdCByZXF1aXJlZCBhbnkgbW9yZS5cbiAqIE1pZ3JhdGluZyBmcm9tIHRoaXMgcGx1Z2luIHRvIHRoZSBbRUNNQSBJbnRlcm5hdGlvbmFsaXphdGlvbiBBUEldKGh0dHBzOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS00MDIvMS4wLykgaXMgZXhwbGFpbmVkIGluIHRoaXMgW0NvcmRvdmEgYmxvZyBwb3N0XShodHRwczovL2NvcmRvdmEuYXBhY2hlLm9yZy9uZXdzLzIwMTcvMTEvMjAvbWlncmF0ZS1mcm9tLWNvcmRvdmEtZ2xvYmFsaXphdGlvbi1wbHVnaW4uaHRtbCkuXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IEdsb2JhbGl6YXRpb24gfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvZ2xvYmFsaXphdGlvbi9uZ3gnO1xuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgZ2xvYmFsaXphdGlvbjogR2xvYmFsaXphdGlvbikgeyB9XG4gKlxuICpcbiAqIC4uLlxuICpcbiAqXG4gKiB0aGlzLmdsb2JhbGl6YXRpb24uZ2V0UHJlZmVycmVkTGFuZ3VhZ2UoKVxuICogICAudGhlbihyZXMgPT4gY29uc29sZS5sb2cocmVzKSlcbiAqICAgLmNhdGNoKGUgPT4gY29uc29sZS5sb2coZSkpO1xuICpcbiAqXG4gKiBgYGBcbiAqIEBpbnRlcmZhY2VzXG4gKiBHbG9iYWxpemF0aW9uT3B0aW9uc1xuICovXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ0dsb2JhbGl6YXRpb24nLFxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1nbG9iYWxpemF0aW9uJyxcbiAgcGx1Z2luUmVmOiAnbmF2aWdhdG9yLmdsb2JhbGl6YXRpb24nLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9jb3Jkb3ZhLXBsdWdpbi1nbG9iYWxpemF0aW9uJyxcbiAgcGxhdGZvcm1zOiBbJ0FtYXpvbiBGaXJlIE9TJywgJ0FuZHJvaWQnLCAnQnJvd3NlcicsICdpT1MnLCAnV2luZG93cyddLFxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBHbG9iYWxpemF0aW9uIGV4dGVuZHMgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4ge1xuICAvKipcbiAgICogUmV0dXJucyB0aGUgQkNQLTQ3IGNvbXBsaWFudCBsYW5ndWFnZSBpZGVudGlmaWVyIHRhZyB0byB0aGUgc3VjY2Vzc0NhbGxiYWNrIHdpdGggYSBwcm9wZXJ0aWVzIG9iamVjdCBhcyBhIHBhcmFtZXRlci4gVGhhdCBvYmplY3Qgc2hvdWxkIGhhdmUgYSB2YWx1ZSBwcm9wZXJ0eSB3aXRoIGEgU3RyaW5nIHZhbHVlLlxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTx7dmFsdWU6IHN0cmluZ30+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBnZXRQcmVmZXJyZWRMYW5ndWFnZSgpOiBQcm9taXNlPHsgdmFsdWU6IHN0cmluZyB9PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIEJDUCA0NyBjb21wbGlhbnQgbG9jYWxlIGlkZW50aWZpZXIgc3RyaW5nIHRvIHRoZSBzdWNjZXNzQ2FsbGJhY2sgd2l0aCBhIHByb3BlcnRpZXMgb2JqZWN0IGFzIGEgcGFyYW1ldGVyLlxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTx7dmFsdWU6IHN0cmluZ30+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBnZXRMb2NhbGVOYW1lKCk6IFByb21pc2U8eyB2YWx1ZTogc3RyaW5nIH0+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgZGF0ZSB0byBzdHJpbmdcbiAgICpcbiAgICogQHBhcmFtIHtEYXRlfSBkYXRlIERhdGUgeW91IHdpc2ggdG8gY29udmVydFxuICAgKiBAcGFyYW0gb3B0aW9ucyBPcHRpb25zIGZvciB0aGUgY29udmVydGVkIGRhdGUuIExlbmd0aCwgc2VsZWN0b3IuXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHt2YWx1ZTogc3RyaW5nfT59IFJldHVybnMgYSBwcm9taXNlIHdoZW4gdGhlIGRhdGUgaGFzIGJlZW4gY29udmVydGVkLlxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIHN1Y2Nlc3NJbmRleDogMSxcbiAgICBlcnJvckluZGV4OiAyLFxuICB9KVxuICBkYXRlVG9TdHJpbmcoZGF0ZTogRGF0ZSwgb3B0aW9uczogR2xvYmFsaXphdGlvbk9wdGlvbnMpOiBQcm9taXNlPHsgdmFsdWU6IHN0cmluZyB9PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFBhcnNlcyBhIGRhdGUgZm9ybWF0dGVkIGFzIGEgc3RyaW5nLCBhY2NvcmRpbmcgdG8gdGhlIGNsaWVudCdzIHVzZXIgcHJlZmVyZW5jZXMgYW5kIGNhbGVuZGFyIHVzaW5nIHRoZSB0aW1lIHpvbmUgb2YgdGhlIGNsaWVudCwgYW5kIHJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmcgZGF0ZSBvYmplY3QuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBkYXRlU3RyaW5nIERhdGUgYXMgYSBzdHJpbmcgdG8gYmUgY29udmVydGVkXG4gICAqIEBwYXJhbSBvcHRpb25zIE9wdGlvbnMgZm9yIHRoZSBjb252ZXJ0ZWQgZGF0ZS4gTGVuZ3RoLCBzZWxlY3Rvci5cbiAgICogQHJldHVybnMge1Byb21pc2U8eyB5ZWFyOiBudW1iZXIsIG1vbnRoOiBudW1iZXIsIGRheTogbnVtYmVyLCBob3VyOiBudW1iZXIsIG1pbnV0ZTogbnVtYmVyLCBzZWNvbmQ6IG51bWJlciwgbWlsbGlzZWNvbmQ6IG51bWJlciB9Pn0gUmV0dXJucyBhIHByb21pc2Ugd2hlbiB0aGUgZGF0ZSBoYXMgYmVlbiBjb252ZXJ0ZWQuXG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgc3VjY2Vzc0luZGV4OiAxLFxuICAgIGVycm9ySW5kZXg6IDIsXG4gIH0pXG4gIHN0cmluZ1RvRGF0ZShcbiAgICBkYXRlU3RyaW5nOiBzdHJpbmcsXG4gICAgb3B0aW9uczogR2xvYmFsaXphdGlvbk9wdGlvbnNcbiAgKTogUHJvbWlzZTx7XG4gICAgeWVhcjogbnVtYmVyO1xuICAgIG1vbnRoOiBudW1iZXI7XG4gICAgZGF5OiBudW1iZXI7XG4gICAgaG91cjogbnVtYmVyO1xuICAgIG1pbnV0ZTogbnVtYmVyO1xuICAgIHNlY29uZDogbnVtYmVyO1xuICAgIG1pbGxpc2Vjb25kOiBudW1iZXI7XG4gIH0+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIHBhdHRlcm4gc3RyaW5nIHRvIGZvcm1hdCBhbmQgcGFyc2UgZGF0ZXMgYWNjb3JkaW5nIHRvIHRoZSBjbGllbnQncyB1c2VyIHByZWZlcmVuY2VzLlxuICAgKlxuICAgKiBAcGFyYW0gb3B0aW9ucyBPYmplY3Qgd2l0aCB0aGUgZm9ybWF0IGxlbmd0aCBhbmQgc2VsZWN0b3JcbiAgICogQHJldHVybnMge1Byb21pc2U8eyBwYXR0ZXJuOiBzdHJpbmcsIHRpbWV6b25lOiBzdHJpbmcsIHV0Y19vZmZzZXQ6IG51bWJlciwgZHN0X29mZnNldDogbnVtYmVyIH0+fSBSZXR1cm5zIGEgcHJvbWlzZS5cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBjYWxsYmFja09yZGVyOiAncmV2ZXJzZScsXG4gIH0pXG4gIGdldERhdGVQYXR0ZXJuKG9wdGlvbnM6IEdsb2JhbGl6YXRpb25PcHRpb25zKTogUHJvbWlzZTx7XG4gICAgcGF0dGVybjogc3RyaW5nO1xuICAgIHRpbWV6b25lOiBzdHJpbmc7XG4gICAgaWFuYV90aW1lem9uZTogc3RyaW5nO1xuICAgIHV0Y19vZmZzZXQ6IG51bWJlcjtcbiAgICBkc3Rfb2Zmc2V0OiBudW1iZXI7XG4gIH0+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbiBhcnJheSBvZiB0aGUgbmFtZXMgb2YgdGhlIG1vbnRocyBvciBkYXlzIG9mIHRoZSB3ZWVrLCBkZXBlbmRpbmcgb24gdGhlIGNsaWVudCdzIHVzZXIgcHJlZmVyZW5jZXMgYW5kIGNhbGVuZGFyLlxuICAgKlxuICAgKiBAcGFyYW0gb3B0aW9ucyBPYmplY3Qgd2l0aCB0eXBlIChuYXJyb3cgb3Igd2lkZSkgYW5kIGl0ZW0gKG1vbnRoIG9yIGRheXMpLlxuICAgKiBAcGFyYW0gb3B0aW9ucy50eXBlXG4gICAqIEBwYXJhbSBvcHRpb25zLml0ZW1cbiAgICogQHJldHVybnMge1Byb21pc2U8e3ZhbHVlOiBzdHJpbmdbXX0+fSBSZXR1cm5zIGEgcHJvbWlzZS5cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBjYWxsYmFja09yZGVyOiAncmV2ZXJzZScsXG4gIH0pXG4gIGdldERhdGVOYW1lcyhvcHRpb25zOiB7IHR5cGU6IHN0cmluZzsgaXRlbTogc3RyaW5nIH0pOiBQcm9taXNlPHsgdmFsdWU6IHN0cmluZ1tdIH0+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogSW5kaWNhdGVzIHdoZXRoZXIgZGF5bGlnaHQgc2F2aW5ncyB0aW1lIGlzIGluIGVmZmVjdCBmb3IgYSBnaXZlbiBkYXRlIHVzaW5nIHRoZSBjbGllbnQncyB0aW1lIHpvbmUgYW5kIGNhbGVuZGFyLlxuICAgKlxuICAgKiBAcGFyYW0ge2RhdGF9IGRhdGUgRGF0ZSB0byBwcm9jZXNzXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHtkc3Q6IHN0cmluZ30+fSByZXV0cm5zIGEgcHJvbWlzZSB3aXRoIHRoZSB2YWx1ZVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBpc0RheUxpZ2h0U2F2aW5nc1RpbWUoZGF0ZTogRGF0ZSk6IFByb21pc2U8eyBkc3Q6IHN0cmluZyB9PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2VlayBhY2NvcmRpbmcgdG8gdGhlIGNsaWVudCdzIHVzZXIgcHJlZmVyZW5jZXMgYW5kIGNhbGVuZGFyLlxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTx7dmFsdWU6IHN0cmluZ30+fSByZXR1cm5zIGEgcHJvbWlzZSB3aXRoIHRoZSB2YWx1ZVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBnZXRGaXJzdERheU9mV2VlaygpOiBQcm9taXNlPHsgdmFsdWU6IHN0cmluZyB9PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBudW1iZXIgZm9ybWF0dGVkIGFzIGEgc3RyaW5nIGFjY29yZGluZyB0byB0aGUgY2xpZW50J3MgdXNlciBwcmVmZXJlbmNlcy5cbiAgICpcbiAgICogQHBhcmFtIG51bWJlclRvQ29udmVydCB7TnVtYmVyfSBUaGUgbnVtYmVyIHRvIGNvbnZlcnRcbiAgICogQHBhcmFtIG9wdGlvbnMge09iamVjdH0gT2JqZWN0IHdpdGggcHJvcGVydHkgYHR5cGVgIHRoYXQgY2FuIGJlIHNldCB0bzogZGVjaW1hbCwgcGVyY2VudCwgb3IgY3VycmVuY3kuXG4gICAqIEBwYXJhbSBvcHRpb25zLnR5cGVcbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBzdWNjZXNzSW5kZXg6IDEsXG4gICAgZXJyb3JJbmRleDogMixcbiAgfSlcbiAgbnVtYmVyVG9TdHJpbmcobnVtYmVyVG9Db252ZXJ0OiBudW1iZXIsIG9wdGlvbnM6IHsgdHlwZTogc3RyaW5nIH0pOiBQcm9taXNlPHsgdmFsdWU6IHN0cmluZyB9PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmdUb0NvbnZlcnQgU3RyaW5nIHlvdSB3YW50IHRvIGNvbnZlciB0byBhIG51bWJlclxuICAgKiBAcGFyYW0gb3B0aW9ucyAgVGhlIHR5cGUgb2YgbnVtYmVyIHlvdSB3YW50IHRvIHJldHVybi4gQ2FuIGJlIGRlY2ltYWwsIHBlcmNlbnQsIG9yIGN1cnJlbmN5LlxuICAgKiBAcGFyYW0gb3B0aW9ucy50eXBlXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHsgdmFsdWU6IG51bWJlciB8IHN0cmluZyB9Pn0gUmV0dXJucyBhIHByb21pc2Ugd2l0aCB0aGUgdmFsdWUuXG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgc3VjY2Vzc0luZGV4OiAxLFxuICAgIGVycm9ySW5kZXg6IDIsXG4gIH0pXG4gIHN0cmluZ1RvTnVtYmVyKHN0cmluZ1RvQ29udmVydDogc3RyaW5nLCBvcHRpb25zOiB7IHR5cGU6IHN0cmluZyB9KTogUHJvbWlzZTx7IHZhbHVlOiBudW1iZXIgfCBzdHJpbmcgfT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgcGF0dGVybiBzdHJpbmcgdG8gZm9ybWF0IGFuZCBwYXJzZSBudW1iZXJzIGFjY29yZGluZyB0byB0aGUgY2xpZW50J3MgdXNlciBwcmVmZXJlbmNlcy5cbiAgICpcbiAgICogQHBhcmFtIG9wdGlvbnMgQ2FuIGJlIGRlY2ltYWwsIHBlcmNlbnQsIG9yIGN1cnJlbmN5LlxuICAgKiBAcGFyYW0gb3B0aW9ucy50eXBlXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHsgcGF0dGVybjogc3RyaW5nLCBzeW1ib2w6IHN0cmluZywgZnJhY3Rpb246IG51bWJlciwgcm91bmRpbmc6IG51bWJlciwgcG9zaXRpdmU6IHN0cmluZywgbmVnYXRpdmU6IHN0cmluZywgZGVjaW1hbDogc3RyaW5nLCBncm91cGluZzogc3RyaW5nIH0+fVxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIGNhbGxiYWNrT3JkZXI6ICdyZXZlcnNlJyxcbiAgfSlcbiAgZ2V0TnVtYmVyUGF0dGVybihvcHRpb25zOiB7IHR5cGU6IHN0cmluZyB9KTogUHJvbWlzZTx7XG4gICAgcGF0dGVybjogc3RyaW5nO1xuICAgIHN5bWJvbDogc3RyaW5nO1xuICAgIGZyYWN0aW9uOiBudW1iZXI7XG4gICAgcm91bmRpbmc6IG51bWJlcjtcbiAgICBwb3NpdGl2ZTogc3RyaW5nO1xuICAgIG5lZ2F0aXZlOiBzdHJpbmc7XG4gICAgZGVjaW1hbDogc3RyaW5nO1xuICAgIGdyb3VwaW5nOiBzdHJpbmc7XG4gIH0+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIHBhdHRlcm4gc3RyaW5nIHRvIGZvcm1hdCBhbmQgcGFyc2UgY3VycmVuY3kgdmFsdWVzIGFjY29yZGluZyB0byB0aGUgY2xpZW50J3MgdXNlciBwcmVmZXJlbmNlcyBhbmQgSVNPIDQyMTcgY3VycmVuY3kgY29kZS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGN1cnJlbmN5Q29kZSBDdXJyZW5jeSBDb2RlLkFcbiAgICogQHJldHVybnMge1Byb21pc2U8eyBwYXR0ZXJuOiBzdHJpbmcsIGNvZGU6IHN0cmluZywgZnJhY3Rpb246IG51bWJlciwgcm91bmRpbmc6IG51bWJlciwgZGVjaW1hbDogbnVtYmVyLCBncm91cGluZzogc3RyaW5nIH0+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBnZXRDdXJyZW5jeVBhdHRlcm4oY3VycmVuY3lDb2RlOiBzdHJpbmcpOiBQcm9taXNlPHtcbiAgICBwYXR0ZXJuOiBzdHJpbmc7XG4gICAgY29kZTogc3RyaW5nO1xuICAgIGZyYWN0aW9uOiBudW1iZXI7XG4gICAgcm91bmRpbmc6IG51bWJlcjtcbiAgICBkZWNpbWFsOiBudW1iZXI7XG4gICAgZ3JvdXBpbmc6IHN0cmluZztcbiAgfT4ge1xuICAgIHJldHVybjtcbiAgfVxufVxuIl19