var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var AppsflyerOriginal = /** @class */ (function (_super) {
    __extends(AppsflyerOriginal, _super);
    function AppsflyerOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AppsflyerOriginal.prototype.initSdk = function (options) { return cordova(this, "initSdk", {}, arguments); };
    AppsflyerOriginal.prototype.logEvent = function (eventName, eventValues) { return cordova(this, "logEvent", {}, arguments); };
    AppsflyerOriginal.prototype.setAppUserId = function (customerUserId) { return cordova(this, "setAppUserId", { "sync": true }, arguments); };
    AppsflyerOriginal.prototype.Stop = function (isStopTracking) { return cordova(this, "Stop", { "sync": true }, arguments); };
    AppsflyerOriginal.prototype.registerOnAppOpenAttribution = function () { return cordova(this, "registerOnAppOpenAttribution", {}, arguments); };
    AppsflyerOriginal.prototype.enableUninstallTracking = function (token) { return cordova(this, "enableUninstallTracking", {}, arguments); };
    AppsflyerOriginal.prototype.updateServerUninstallToken = function (token) { return cordova(this, "updateServerUninstallToken", { "sync": true }, arguments); };
    AppsflyerOriginal.prototype.registerUninstall = function (token) { return cordova(this, "registerUninstall", { "sync": true }, arguments); };
    AppsflyerOriginal.prototype.getAppsFlyerUID = function () { return cordova(this, "getAppsFlyerUID", {}, arguments); };
    AppsflyerOriginal.prototype.anonymizeUser = function (disable) { return cordova(this, "anonymizeUser", { "sync": true }, arguments); };
    AppsflyerOriginal.prototype.setAppInviteOneLinkID = function (oneLinkId) { return cordova(this, "setAppInviteOneLinkID", { "sync": true }, arguments); };
    AppsflyerOriginal.prototype.generateInviteLink = function (options) { return cordova(this, "generateInviteLink", {}, arguments); };
    AppsflyerOriginal.prototype.logCrossPromotionImpression = function (appId, campaign) { return cordova(this, "logCrossPromotionImpression", { "sync": true }, arguments); };
    AppsflyerOriginal.prototype.logCrossPromotionAndOpenStore = function (appId, campaign, options) { return cordova(this, "logCrossPromotionAndOpenStore", { "sync": true }, arguments); };
    AppsflyerOriginal.pluginName = "Appsflyer";
    AppsflyerOriginal.plugin = "cordova-plugin-appsflyer-sdk";
    AppsflyerOriginal.pluginRef = "window.plugins.appsFlyer";
    AppsflyerOriginal.repo = "https://github.com/AppsFlyerSDK/cordova-plugin-appsflyer-sdk";
    AppsflyerOriginal.platforms = ["iOS", "Android"];
    AppsflyerOriginal.install = "Add to config.xml like stated on github and then start";
    return AppsflyerOriginal;
}(AwesomeCordovaNativePlugin));
var Appsflyer = new AppsflyerOriginal();
export { Appsflyer };
//# sourceMappingURL=data:application/json;base64,