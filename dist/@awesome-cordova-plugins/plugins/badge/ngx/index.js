import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import * as i0 from "@angular/core";
var Badge = /** @class */ (function (_super) {
    __extends(Badge, _super);
    function Badge() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Badge.prototype.clear = function () { return cordova(this, "clear", {}, arguments); };
    Badge.prototype.set = function (badgeNumber) { return cordova(this, "set", {}, arguments); };
    Badge.prototype.get = function () { return cordova(this, "get", {}, arguments); };
    Badge.prototype.increase = function (increaseBy) { return cordova(this, "increase", {}, arguments); };
    Badge.prototype.decrease = function (decreaseBy) { return cordova(this, "decrease", {}, arguments); };
    Badge.prototype.isSupported = function () { return cordova(this, "isSupported", {}, arguments); };
    Badge.prototype.hasPermission = function () { return cordova(this, "hasPermission", {}, arguments); };
    Badge.prototype.requestPermission = function () { return cordova(this, "requestPermission", {}, arguments); };
    Badge.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: Badge, deps: null, target: i0.ɵɵFactoryTarget.Injectable });
    Badge.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: Badge });
    Badge.pluginName = "Badge";
    Badge.plugin = "cordova-plugin-badge";
    Badge.pluginRef = "cordova.plugins.notification.badge";
    Badge.repo = "https://github.com/katzer/cordova-plugin-badge";
    Badge.platforms = ["Android", "Browser", "iOS", "Windows"];
    Badge = __decorate([], Badge);
    return Badge;
}(AwesomeCordovaNativePlugin));
export { Badge };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: Badge, decorators: [{
            type: Injectable
        }], propDecorators: { clear: [], set: [], get: [], increase: [], decrease: [], isSupported: [], hasPermission: [], requestPermission: [] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvYmFkZ2Uvbmd4L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sdUNBQStDLE1BQU0sK0JBQStCLENBQUM7OztJQWdDakUseUJBQTBCOzs7O0lBT25ELHFCQUFLO0lBV0wsbUJBQUcsYUFBQyxXQUFtQjtJQVV2QixtQkFBRztJQVdILHdCQUFRLGFBQUMsVUFBa0I7SUFXM0Isd0JBQVEsYUFBQyxVQUFrQjtJQVUzQiwyQkFBVztJQVVYLDZCQUFhO0lBVWIsaUNBQWlCO3VHQWhGTixLQUFLOzJHQUFMLEtBQUs7Ozs7OztJQUFMLEtBQUssa0JBQUwsS0FBSztnQkFqQ2xCO0VBaUMyQiwwQkFBMEI7U0FBeEMsS0FBSzs0RkFBTCxLQUFLO2tCQURqQixVQUFVOzhCQVFULEtBQUssTUFXTCxHQUFHLE1BVUgsR0FBRyxNQVdILFFBQVEsTUFXUixRQUFRLE1BVVIsV0FBVyxNQVVYLGFBQWEsTUFVYixpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb3Jkb3ZhLCBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL2NvcmUnO1xuXG4vKipcbiAqIEBuYW1lIEJhZGdlXG4gKiBAcHJlbWllciBiYWRnZVxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgZXNzZW50aWFsIHB1cnBvc2Ugb2YgYmFkZ2UgbnVtYmVycyBpcyB0byBlbmFibGUgYW4gYXBwbGljYXRpb24gdG8gaW5mb3JtIGl0cyB1c2VycyB0aGF0IGl0IGhhcyBzb21ldGhpbmcgZm9yIHRoZW0g4oCUIGZvciBleGFtcGxlLCB1bnJlYWQgbWVzc2FnZXMg4oCUIHdoZW4gdGhlIGFwcGxpY2F0aW9uIGlzbuKAmXQgcnVubmluZyBpbiB0aGUgZm9yZWdyb3VuZC5cbiAqXG4gKiBSZXF1aXJlcyBDb3Jkb3ZhIHBsdWdpbjogY29yZG92YS1wbHVnaW4tYmFkZ2UuIEZvciBtb3JlIGluZm8sIHBsZWFzZSBzZWUgdGhlIFtCYWRnZSBwbHVnaW4gZG9jc10oaHR0cHM6Ly9naXRodWIuY29tL2thdHplci9jb3Jkb3ZhLXBsdWdpbi1iYWRnZSkuXG4gKlxuICogQW5kcm9pZCBOb3RlOiBCYWRnZXMgaGF2ZSBoaXN0b3JpY2FsbHkgb25seSBiZWVuIGEgZmVhdHVyZSBpbXBsZW1lbnRlZCBieSB0aGlyZCBwYXJ0eSBsYXVuY2hlcnMgYW5kIG5vdCB2aXNpYmxlIHVubGVzcyBvbmUgb2YgdGhvc2UgbGF1bmNoZXJzIHdhcyBiZWluZyB1c2VkIChFLkcuIFNhbXN1bmcgb3IgTm92YSBMYXVuY2hlcikgYW5kIGlmIGVuYWJsZWQgYnkgdGhlIHVzZXIuIEFzIG9mIEFuZHJvaWQgOCAoT3JlbyksIFtub3RpZmljYXRpb24gYmFkZ2VzXShodHRwczovL2RldmVsb3Blci5hbmRyb2lkLmNvbS90cmFpbmluZy9ub3RpZnktdXNlci9iYWRnZXMpIHdlcmUgaW50cm9kdWNlZCBvZmZpY2lhbGx5IHRvIHJlZmxlY3QgdW5yZWFkIG5vdGlmaWNhdGlvbnMuIFRoaXMgcGx1Z2luIGlzIHVubGlrZWx5IHRvIHdvcmsgYXMgZXhwZWN0ZWQgb24gZGV2aWNlcyBydW5uaW5nIEFuZHJvaWQgOCBvciBuZXdlci4gUGxlYXNlIHNlZSB0aGUgW2xvY2FsIG5vdGlmaWNhdGlvbnMgcGx1Z2luIGRvY3NdKGh0dHBzOi8vZ2l0aHViLmNvbS9rYXR6ZXIvY29yZG92YS1wbHVnaW4tbG9jYWwtbm90aWZpY2F0aW9ucykgZm9yIG1vcmUgaW5mb3JtYXRpb24gb24gYmFkZ2UgdXNlIHdpdGggbm90aWZpY2F0aW9ucy5cbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgQmFkZ2UgfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvYmFkZ2Uvbmd4JztcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGJhZGdlOiBCYWRnZSkgeyB9XG4gKlxuICogLi4uXG4gKlxuICogdGhpcy5iYWRnZS5zZXQoMTApO1xuICogdGhpcy5iYWRnZS5pbmNyZWFzZSgxKTtcbiAqIHRoaXMuYmFkZ2UuY2xlYXIoKTtcbiAqIGBgYFxuICovXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ0JhZGdlJyxcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tYmFkZ2UnLFxuICBwbHVnaW5SZWY6ICdjb3Jkb3ZhLnBsdWdpbnMubm90aWZpY2F0aW9uLmJhZGdlJyxcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9rYXR6ZXIvY29yZG92YS1wbHVnaW4tYmFkZ2UnLFxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdCcm93c2VyJywgJ2lPUycsICdXaW5kb3dzJ10sXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEJhZGdlIGV4dGVuZHMgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4ge1xuICAvKipcbiAgICogQ2xlYXIgdGhlIGJhZGdlIG9mIHRoZSBhcHAgaWNvbi5cbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2U8Ym9vbGVhbj59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGNsZWFyKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdGhlIGJhZGdlIG9mIHRoZSBhcHAgaWNvbi5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IGJhZGdlTnVtYmVyICBUaGUgbmV3IGJhZGdlIG51bWJlci5cbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgc2V0KGJhZGdlTnVtYmVyOiBudW1iZXIpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGJhZGdlIG9mIHRoZSBhcHAgaWNvbi5cbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgZ2V0KCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIEluY3JlYXNlIHRoZSBiYWRnZSBudW1iZXIuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpbmNyZWFzZUJ5ICBDb3VudCB0byBhZGQgdG8gdGhlIGN1cnJlbnQgYmFkZ2UgbnVtYmVyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGluY3JlYXNlKGluY3JlYXNlQnk6IG51bWJlcik6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIERlY3JlYXNlIHRoZSBiYWRnZSBudW1iZXIuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBkZWNyZWFzZUJ5ICBDb3VudCB0byBzdWJ0cmFjdCBmcm9tIHRoZSBjdXJyZW50IGJhZGdlIG51bWJlclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBkZWNyZWFzZShkZWNyZWFzZUJ5OiBudW1iZXIpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayBzdXBwb3J0IHRvIHNob3cgYmFkZ2VzLlxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBpc1N1cHBvcnRlZCgpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmUgaWYgdGhlIGFwcCBoYXMgcGVybWlzc2lvbiB0byBzaG93IGJhZGdlcy5cbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgaGFzUGVybWlzc2lvbigpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWdpc3RlciBwZXJtaXNzaW9uIHRvIHNldCBiYWRnZSBub3RpZmljYXRpb25zXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHJlcXVlc3RQZXJtaXNzaW9uKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG59XG4iXX0=