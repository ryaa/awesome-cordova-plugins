var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
export var ConnectionType;
(function (ConnectionType) {
    /**
     * Clear-text connection for the protocol.
     */
    ConnectionType["Clear"] = "Clear";
    /**
     * Starts with clear-text connection at the beginning, then switch to encrypted connection using TLS/SSL.
     */
    ConnectionType["StartTLS"] = "StartTLS";
    /**
     * Encrypted connection using TLS/SSL.
     */
    ConnectionType["TLSSSL"] = "TLS/SSL";
})(ConnectionType || (ConnectionType = {}));
export var Comparison;
(function (Comparison) {
    /**
     * Android ONLY
     * The less than or equal to operator.
     */
    Comparison["LE"] = "LE";
    /**
     * The less than operator.
     */
    Comparison["LT"] = "LT";
    /**
     * The equality operator.
     */
    Comparison["EQ"] = "EQ";
    /**
     * The not equal to operator.
     */
    Comparison["NE"] = "NE";
    /**
     * Android ONLY
     * The greater than operator.
     */
    Comparison["GT"] = "GT";
    /**
     * The greater than or equal to operator.
     */
    Comparison["GE"] = "GE";
})(Comparison || (Comparison = {}));
/**
 * All available message flags. Set or remove flag using "setFlag()".
 */
export var FlagEnum;
(function (FlagEnum) {
    /**
     * "ANSWERED" message flag
     */
    FlagEnum["ANSWERED"] = "ANSWERED";
    /**
     * "DRAFT" message flag
     */
    FlagEnum["DRAFT"] = "DRAFT";
    /**
     * "FLAGGED" message flag
     */
    FlagEnum["FLAGGED"] = "FLAGGED";
    /**
     * Android ONLY
     * "RECENT" message flag
     */
    FlagEnum["RECENT"] = "RECENT";
    /**
     * "SEEN" message flag
     */
    FlagEnum["SEEN"] = "SEEN";
    /**
     * Android ONLY
     * "USER" message flag
     */
    FlagEnum["USER"] = "USER";
    /**
     * "DELETED" message flag. Note: Add this flag to delete the message from the mailbox
     */
    FlagEnum["DELETED"] = "DELETED";
    /**
     * iOS ONLY
     * "SENT" message flag.
     */
    FlagEnum["SENT"] = "Sent";
    /**
     * iOS ONLY
     * "FORWARDED" message flag.
     */
    FlagEnum["FORWARDED"] = "Forwarded";
    /**
     * iOS ONLY
     * "SubmitPending" message flag.
     */
    FlagEnum["SubmitPending"] = "SubmitPending";
    /**
     * iOS ONLY
     * "SUBMITTED" message flag.
     */
    FlagEnum["SUBMITTED"] = "Submitted";
})(FlagEnum || (FlagEnum = {}));
var ImapOriginal = /** @class */ (function (_super) {
    __extends(ImapOriginal, _super);
    function ImapOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ImapOriginal.prototype.connect = function (clientData) { return cordova(this, "connect", {}, arguments); };
    ImapOriginal.prototype.disconnect = function () { return cordova(this, "disconnect", {}, arguments); };
    ImapOriginal.prototype.isConnected = function () { return cordova(this, "isConnected", {}, arguments); };
    ImapOriginal.prototype.listMailFolders = function (pattern) { return cordova(this, "listMailFolders", {}, arguments); };
    ImapOriginal.prototype.getMessageCountByFolderName = function (folderName) { return cordova(this, "getMessageCountByFolderName", {}, arguments); };
    ImapOriginal.prototype.searchMessagesByDatePeriod = function (folderName, dateInMilliseconds, comparison) { return cordova(this, "searchMessagesByDatePeriod", {}, arguments); };
    ImapOriginal.prototype.listMessagesHeadersByConsecutiveNumber = function (folderName, start, end) { return cordova(this, "listMessagesHeadersByConsecutiveNumber", {}, arguments); };
    ImapOriginal.prototype.listMessagesHeadersByDate = function (folderName, dateInMilliseconds, comparison) { return cordova(this, "listMessagesHeadersByDate", {}, arguments); };
    ImapOriginal.prototype.getFullMessageData = function (folderName, messageNumber) { return cordova(this, "getFullMessageData", {}, arguments); };
    ImapOriginal.prototype.getFullMessageDataOnNewSession = function (clientData, folderName, messageNumber) { return cordova(this, "getFullMessageDataOnNewSession", {}, arguments); };
    ImapOriginal.prototype.copyToFolder = function (sourceFolder, destinationFolder, messageNums) { return cordova(this, "copyToFolder", {}, arguments); };
    ImapOriginal.prototype.setFlag = function (folderName, messageNums, flag, status) { return cordova(this, "setFlag", {}, arguments); };
    ImapOriginal.pluginName = "Imap";
    ImapOriginal.plugin = "cordova-plugin-imap";
    ImapOriginal.pluginRef = "imap";
    ImapOriginal.repo = "https://github.com/aleksandar888/cordova-plugin-imap.git";
    ImapOriginal.platforms = ["Android", "iOS"];
    return ImapOriginal;
}(AwesomeCordovaNativePlugin));
var Imap = new ImapOriginal();
export { Imap };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvaW1hcC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQ0EsT0FBTyx1Q0FBK0MsTUFBTSwrQkFBK0IsQ0FBQztBQW9ONUYsTUFBTSxDQUFOLElBQVksY0FhWDtBQWJELFdBQVksY0FBYztJQUN4Qjs7T0FFRztJQUNILGlDQUFlLENBQUE7SUFDZjs7T0FFRztJQUNILHVDQUFxQixDQUFBO0lBQ3JCOztPQUVHO0lBQ0gsb0NBQWtCLENBQUE7QUFDcEIsQ0FBQyxFQWJXLGNBQWMsS0FBZCxjQUFjLFFBYXpCO0FBRUQsTUFBTSxDQUFOLElBQVksVUEyQlg7QUEzQkQsV0FBWSxVQUFVO0lBQ3BCOzs7T0FHRztJQUNILHVCQUFTLENBQUE7SUFDVDs7T0FFRztJQUNILHVCQUFTLENBQUE7SUFDVDs7T0FFRztJQUNILHVCQUFTLENBQUE7SUFDVDs7T0FFRztJQUNILHVCQUFTLENBQUE7SUFDVDs7O09BR0c7SUFDSCx1QkFBUyxDQUFBO0lBQ1Q7O09BRUc7SUFDSCx1QkFBUyxDQUFBO0FBQ1gsQ0FBQyxFQTNCVyxVQUFVLEtBQVYsVUFBVSxRQTJCckI7QUFFRDs7R0FFRztBQUNILE1BQU0sQ0FBTixJQUFZLFFBbURYO0FBbkRELFdBQVksUUFBUTtJQUNsQjs7T0FFRztJQUNILGlDQUFxQixDQUFBO0lBQ3JCOztPQUVHO0lBQ0gsMkJBQWUsQ0FBQTtJQUNmOztPQUVHO0lBQ0gsK0JBQW1CLENBQUE7SUFDbkI7OztPQUdHO0lBQ0gsNkJBQWlCLENBQUE7SUFDakI7O09BRUc7SUFDSCx5QkFBYSxDQUFBO0lBQ2I7OztPQUdHO0lBQ0gseUJBQWEsQ0FBQTtJQUNiOztPQUVHO0lBQ0gsK0JBQW1CLENBQUE7SUFDbkI7OztPQUdHO0lBQ0gseUJBQWEsQ0FBQTtJQUNiOzs7T0FHRztJQUNILG1DQUF1QixDQUFBO0lBQ3ZCOzs7T0FHRztJQUNILDJDQUErQixDQUFBO0lBQy9COzs7T0FHRztJQUNILG1DQUF1QixDQUFBO0FBQ3pCLENBQUMsRUFuRFcsUUFBUSxLQUFSLFFBQVEsUUFtRG5COztJQTJKeUIsd0JBQTBCOzs7O0lBT2xELHNCQUFPLGFBQUMsVUFBa0I7SUFTMUIseUJBQVU7SUFTViwwQkFBVztJQW9CWCw4QkFBZSxhQUFDLE9BQWU7SUFVL0IsMENBQTJCLGFBQUMsVUFBa0I7SUFZOUMseUNBQTBCLGFBQ3hCLFVBQWtCLEVBQ2xCLGtCQUEwQixFQUMxQixVQUFzQjtJQWF4QixxREFBc0MsYUFBQyxVQUFrQixFQUFFLEtBQWEsRUFBRSxHQUFXO0lBWXJGLHdDQUF5QixhQUN2QixVQUFrQixFQUNsQixrQkFBMEIsRUFDMUIsVUFBc0I7SUFZeEIsaUNBQWtCLGFBQUMsVUFBa0IsRUFBRSxhQUFxQjtJQWU1RCw2Q0FBOEIsYUFBQyxVQUFrQixFQUFFLFVBQWtCLEVBQUUsYUFBcUI7SUFZNUYsMkJBQVksYUFBQyxZQUFvQixFQUFFLGlCQUF5QixFQUFFLFdBQXFCO0lBYW5GLHNCQUFPLGFBQUMsVUFBa0IsRUFBRSxXQUFxQixFQUFFLElBQWMsRUFBRSxNQUFlOzs7Ozs7ZUF4bUJwRjtFQWtkMEIsMEJBQTBCO1NBQXZDLElBQUkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQbHVnaW4sIENvcmRvdmEsIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL2NvcmUnO1xuXG5leHBvcnQgaW50ZXJmYWNlIENvbmZpZyB7XG4gIC8qKlxuICAgKiBIb3N0bmFtZSBvciBJUCBhZGRyZXNzIG9mIHRoZSBJTUFQIHNlcnZpY2UsIGZvciBleGFtcGxlOiBpbWFwLmdtYWlsLmNvbSwgaW1hcC1tYWlsLm91dGxvb2suY29tLi4uLlxuICAgKi9cbiAgaG9zdDogc3RyaW5nO1xuICAvKipcbiAgICogT3B0aW9uYWwgcGFyYW1ldGVyLiBQb3J0IG9mIHRoZSBJTUFQIHNlcnZlciB0byBjb25uZWN0LlxuICAgKiBEZWZhdWx0IHNldCB0bzogOTkzXG4gICAqL1xuICBwb3J0PzogbnVtYmVyO1xuICAvKipcbiAgICogaU9TIE9OTFlcbiAgICogT3B0aW9uYWwgcGFyYW1ldGVyLiBFbmNyeXB0aW9uIHR5cGUgdG8gdXNlLlxuICAgKiBEZWZhdWx0IHNldCB0bzogVExTL1NTTFxuICAgKi9cbiAgY29ubmVjdGlvblR5cGU/OiBDb25uZWN0aW9uVHlwZTtcbiAgLyoqXG4gICAqIFVzZXJuYW1lIG9yIGVtYWlsIGFkZHJlc3MgZm9yIGF1dGhlbnRpY2F0aW9uLlxuICAgKi9cbiAgdXNlcjogc3RyaW5nO1xuICAvKipcbiAgICogUGFzc3dvcmQgZm9yIGF1dGhlbnRpY2F0aW9uLlxuICAgKi9cbiAgcGFzc3dvcmQ6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDb25uZWN0aW9uIHtcbiAgLyoqXG4gICAqIENvbm5lY3Rpb24gU3RhdHVzOiB0cnVlIG9yIGZhbHNlLCBcInRydWVcIiBtZWFucyBjb25uZWN0ZWQgc3VjY2Vzc2Z1bGx5OyBcImZhbHNlXCIgbWVhbnMgZmFpbGVkIHRvIGNvbm5lY3QuXG4gICAqL1xuICBzdGF0dXM6IGJvb2xlYW47XG4gIC8qKlxuICAgKiBPcHRpb25hbCBwYXJhbWV0ZXIuIEEgY29ubmVjdGlvbiBzdHJpbmcsIHJldHVybmVkIGFzIGEgY29uZmlybWF0aW9uIGZvciBzdWNjZXNzZnVsIGNvbm5lY3Rpb24uXG4gICAqL1xuICBjb25uZWN0aW9uPzogc3RyaW5nO1xuICAvKipcbiAgICogT3B0aW9uYWwgcGFyYW1ldGVyLiBFcnJvciwgcmV0dXJuZWQgaWYgdGhlIGNvbm5lY3RpbmcgcHJvY2VzcyBoYXMgZmFpbGVkLlxuICAgKi9cbiAgZXhjZXB0aW9uPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE1lc3NhZ2VIZWFkZXJzIHtcbiAgLyoqXG4gICAqIE1lc3NhZ2UgY29uc2VjdXRpdmUgbnVtYmVyLlxuICAgKi9cbiAgbWVzc2FnZU51bWJlcjogbnVtYmVyO1xuICAvKipcbiAgICogVGhlIG5hbWUgb2YgdGhlIGZvbGRlciB3aGVyZSB0aGUgbWVzc2FnZSBpcyBjb250YWluZWQuXG4gICAqL1xuICBmb2xkZXI6IHN0cmluZztcbiAgLyoqXG4gICAqIFNlbmRlcidzIGRhdGEuXG4gICAqL1xuICBmcm9tOiBBZGRyZXNzW107XG4gIC8qKlxuICAgKiBUTyByZWNpcGllbnRzIGRhdGEuXG4gICAqL1xuICB0b1JlY2lwaWVudHM6IEFkZHJlc3NbXTtcbiAgLyoqXG4gICAqIENDIHJlY2lwaWVudHMgZGF0YS5cbiAgICovXG4gIGNjUmVjaXBpZW50czogQWRkcmVzc1tdO1xuICAvKipcbiAgICogQkNDIHJlY2lwaWVudHMgZGF0YS5cbiAgICovXG4gIGJjY1JlY2lwaWVudHM6IEFkZHJlc3NbXTtcbiAgLyoqXG4gICAqIFRoZSBkYXRlIHdoZW4gdGhlIG1lc3NhZ2Ugd2FzIHJlY2VpdmVkLlxuICAgKi9cbiAgcmVjZWl2ZWREYXRlOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBNZXNzYWdlJ3Mgc3ViamVjdCBoZWFkZXIuXG4gICAqL1xuICBzdWJqZWN0OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBNZXNzYWdlJ3MgYWN0aXZlIGZsYWdzLlxuICAgKi9cbiAgZmxhZ3M6IHN0cmluZ1tdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE1lc3NhZ2Uge1xuICAvKipcbiAgICogTWVzc2FnZSBjb25zZWN1dGl2ZSBudW1iZXIuXG4gICAqL1xuICBtZXNzYWdlTnVtYmVyOiBudW1iZXI7XG4gIC8qKlxuICAgKiBUaGUgbmFtZSBvZiB0aGUgZm9sZGVyIHdoZXJlIHRoZSBtZXNzYWdlIGlzIGNvbnRhaW5lZC5cbiAgICovXG4gIGZvbGRlcjogc3RyaW5nO1xuICAvKipcbiAgICogU2VuZGVyJ3MgZGF0YS5cbiAgICovXG4gIGZyb206IEFkZHJlc3NbXTtcbiAgLyoqXG4gICAqIEFsbCByZWNpcGllbnRzIGRhdGEuXG4gICAqL1xuICBhbGxSZWNpcGllbnRzOiBBZGRyZXNzW107XG4gIC8qKlxuICAgKiBUTyByZWNpcGllbnRzIGRhdGEuXG4gICAqL1xuICB0b1JlY2lwaWVudHM6IEFkZHJlc3NbXTtcbiAgLyoqXG4gICAqIENDIHJlY2lwaWVudHMgZGF0YS5cbiAgICovXG4gIGNjUmVjaXBpZW50czogQWRkcmVzc1tdO1xuICAvKipcbiAgICogQkNDIHJlY2lwaWVudHMgZGF0YS5cbiAgICovXG4gIGJjY1JlY2lwaWVudHM6IEFkZHJlc3NbXTtcbiAgLyoqXG4gICAqIFJlcGx5IGRhdGEuXG4gICAqL1xuICByZXBseVRvOiBBZGRyZXNzW107XG4gIC8qKlxuICAgKiBEYXRlIHdoZW4gdGhlIG1lc3NhZ2Ugd2FzIHNlbnQuXG4gICAqL1xuICBzZW50RGF0ZTogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIGRhdGUgd2hlbiB0aGUgbWVzc2FnZSB3YXMgcmVjZWl2ZWQuXG4gICAqL1xuICByZWNlaXZlZERhdGU6IHN0cmluZztcbiAgLyoqXG4gICAqIE1lc3NhZ2UncyBzdWJqZWN0IGhlYWRlci5cbiAgICovXG4gIHN1YmplY3Q6IHN0cmluZztcbiAgLyoqXG4gICAqIEFuZHJvaWQgT05MWVxuICAgKiBPcHRpb25hbC4gU2hvcnQgZGVzY3JpcHRpb24gZm9yIHRoZSBtZXNzYWdlLlxuICAgKi9cbiAgZGVzY3JpcHRpb24/OiBzdHJpbmc7XG4gIC8qKlxuICAgKlxuICAgKi9cbiAgZmlsZU5hbWU6IHN0cmluZztcbiAgLyoqXG4gICAqIEFuZHJvaWQgT05MWVxuICAgKiBPcHRpb25hbC5cbiAgICovXG4gIGRpc3Bvc2l0aW9uPzogc3RyaW5nO1xuICAvKipcbiAgICogTWVzc2FnZSdzIGFjdGl2ZSBmbGFncy5cbiAgICovXG4gIGZsYWdzOiBzdHJpbmdbXTtcbiAgLyoqXG4gICAqIEFuZHJvaWQgT05MWVxuICAgKiBPcHRpb25hbC5cbiAgICovXG4gIGxpbmVDb3VudD86IG51bWJlcjtcbiAgLyoqXG4gICAqIEFuZHJvaWQgT05MWVxuICAgKiBPcHRpb25hbC4gQWxsIEhlYWRlcnMgYXZhaWxhYmxlIG9uIGEgbWVzc2FnZS5cbiAgICovXG4gIGFsbE1lc3NhZ2VIZWFkZXJzPzogb2JqZWN0O1xuICAvKipcbiAgICogQW5kcm9pZCBPTkxZXG4gICAqIE9wdGlvbmFsLiBUeXBlIG9mIG1lc3NhZ2UncyBjb250ZW50LlxuICAgKi9cbiAgY29udGVudFR5cGU/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBNZXNzYWdlJ3MgYm9keSB3aXRoIGl0cyBjb250ZW50IGFuZCBhdHRhY2htZW50cy5cbiAgICovXG4gIGJvZHlDb250ZW50OiBDb250ZW50W107XG4gIC8qKlxuICAgKiBNZXNzYWdlJ3MgbWVtb3J5IHNpemUuXG4gICAqL1xuICBzaXplOiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQWRkcmVzcyB7XG4gIC8qKlxuICAgKiBFbWFpbCBhZGRyZXNzLlxuICAgKi9cbiAgYWRkcmVzczogc3RyaW5nO1xuICAvKipcbiAgICogT3B0aW9uYWwuIE5hbWUgb2YgdGhlIGVtYWlsIGFkZHJlc3MncyBvd25lci5cbiAgICovXG4gIHBlcnNvbmFsPzogc3RyaW5nO1xuICAvKipcbiAgICogQW5kcm9pZCBPTkxZXG4gICAqIE9wdGlvbmFsLiBEYXRhIHR5cGUuXG4gICAqL1xuICB0eXBlPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENvbnRlbnQge1xuICAvKipcbiAgICogQ29udGVudCBkYXRhIHR5cGUuXG4gICAqL1xuICB0eXBlOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBPcHRpb25hbC4gVGhlIG5hbWUgb2YgdGhlIGZpbGUuXG4gICAqL1xuICBmaWxlTmFtZT86IHN0cmluZztcbiAgLyoqXG4gICAqIE1lc3NhZ2UncyBjb250ZW50LlxuICAgKi9cbiAgY29udGVudDogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE1vZGlmaWNhdGlvblJlc3VsdCB7XG4gIC8qKlxuICAgKiBTdGF0dXMgb2YgdGhlIGFwcGxpZWQgY2hhbmdlcy4gXCJUcnVlXCIgc3VjY2VzczsgXCJGYWxzZVwiIGZhaWx1cmVcbiAgICovXG4gIHN0YXR1czogYm9vbGVhbjtcbiAgLyoqXG4gICAqIEFycmF5IHdpdGggY29uc2VjdXRpdmUgbnVtYmVycyBvZiBtb2RpZmllZCBtZXNzYWdlcy5cbiAgICovXG4gIG1vZGlmaWVkTWVzc2FnZXM6IG51bWJlcltdO1xufVxuXG5leHBvcnQgZW51bSBDb25uZWN0aW9uVHlwZSB7XG4gIC8qKlxuICAgKiBDbGVhci10ZXh0IGNvbm5lY3Rpb24gZm9yIHRoZSBwcm90b2NvbC5cbiAgICovXG4gIENsZWFyID0gJ0NsZWFyJyxcbiAgLyoqXG4gICAqIFN0YXJ0cyB3aXRoIGNsZWFyLXRleHQgY29ubmVjdGlvbiBhdCB0aGUgYmVnaW5uaW5nLCB0aGVuIHN3aXRjaCB0byBlbmNyeXB0ZWQgY29ubmVjdGlvbiB1c2luZyBUTFMvU1NMLlxuICAgKi9cbiAgU3RhcnRUTFMgPSAnU3RhcnRUTFMnLFxuICAvKipcbiAgICogRW5jcnlwdGVkIGNvbm5lY3Rpb24gdXNpbmcgVExTL1NTTC5cbiAgICovXG4gIFRMU1NTTCA9ICdUTFMvU1NMJyxcbn1cblxuZXhwb3J0IGVudW0gQ29tcGFyaXNvbiB7XG4gIC8qKlxuICAgKiBBbmRyb2lkIE9OTFlcbiAgICogVGhlIGxlc3MgdGhhbiBvciBlcXVhbCB0byBvcGVyYXRvci5cbiAgICovXG4gIExFID0gJ0xFJyxcbiAgLyoqXG4gICAqIFRoZSBsZXNzIHRoYW4gb3BlcmF0b3IuXG4gICAqL1xuICBMVCA9ICdMVCcsXG4gIC8qKlxuICAgKiBUaGUgZXF1YWxpdHkgb3BlcmF0b3IuXG4gICAqL1xuICBFUSA9ICdFUScsXG4gIC8qKlxuICAgKiBUaGUgbm90IGVxdWFsIHRvIG9wZXJhdG9yLlxuICAgKi9cbiAgTkUgPSAnTkUnLFxuICAvKipcbiAgICogQW5kcm9pZCBPTkxZXG4gICAqIFRoZSBncmVhdGVyIHRoYW4gb3BlcmF0b3IuXG4gICAqL1xuICBHVCA9ICdHVCcsXG4gIC8qKlxuICAgKiBUaGUgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIG9wZXJhdG9yLlxuICAgKi9cbiAgR0UgPSAnR0UnLFxufVxuXG4vKipcbiAqIEFsbCBhdmFpbGFibGUgbWVzc2FnZSBmbGFncy4gU2V0IG9yIHJlbW92ZSBmbGFnIHVzaW5nIFwic2V0RmxhZygpXCIuXG4gKi9cbmV4cG9ydCBlbnVtIEZsYWdFbnVtIHtcbiAgLyoqXG4gICAqIFwiQU5TV0VSRURcIiBtZXNzYWdlIGZsYWdcbiAgICovXG4gIEFOU1dFUkVEID0gJ0FOU1dFUkVEJyxcbiAgLyoqXG4gICAqIFwiRFJBRlRcIiBtZXNzYWdlIGZsYWdcbiAgICovXG4gIERSQUZUID0gJ0RSQUZUJyxcbiAgLyoqXG4gICAqIFwiRkxBR0dFRFwiIG1lc3NhZ2UgZmxhZ1xuICAgKi9cbiAgRkxBR0dFRCA9ICdGTEFHR0VEJyxcbiAgLyoqXG4gICAqIEFuZHJvaWQgT05MWVxuICAgKiBcIlJFQ0VOVFwiIG1lc3NhZ2UgZmxhZ1xuICAgKi9cbiAgUkVDRU5UID0gJ1JFQ0VOVCcsXG4gIC8qKlxuICAgKiBcIlNFRU5cIiBtZXNzYWdlIGZsYWdcbiAgICovXG4gIFNFRU4gPSAnU0VFTicsXG4gIC8qKlxuICAgKiBBbmRyb2lkIE9OTFlcbiAgICogXCJVU0VSXCIgbWVzc2FnZSBmbGFnXG4gICAqL1xuICBVU0VSID0gJ1VTRVInLFxuICAvKipcbiAgICogXCJERUxFVEVEXCIgbWVzc2FnZSBmbGFnLiBOb3RlOiBBZGQgdGhpcyBmbGFnIHRvIGRlbGV0ZSB0aGUgbWVzc2FnZSBmcm9tIHRoZSBtYWlsYm94XG4gICAqL1xuICBERUxFVEVEID0gJ0RFTEVURUQnLFxuICAvKipcbiAgICogaU9TIE9OTFlcbiAgICogXCJTRU5UXCIgbWVzc2FnZSBmbGFnLlxuICAgKi9cbiAgU0VOVCA9ICdTZW50JyxcbiAgLyoqXG4gICAqIGlPUyBPTkxZXG4gICAqIFwiRk9SV0FSREVEXCIgbWVzc2FnZSBmbGFnLlxuICAgKi9cbiAgRk9SV0FSREVEID0gJ0ZvcndhcmRlZCcsXG4gIC8qKlxuICAgKiBpT1MgT05MWVxuICAgKiBcIlN1Ym1pdFBlbmRpbmdcIiBtZXNzYWdlIGZsYWcuXG4gICAqL1xuICBTdWJtaXRQZW5kaW5nID0gJ1N1Ym1pdFBlbmRpbmcnLFxuICAvKipcbiAgICogaU9TIE9OTFlcbiAgICogXCJTVUJNSVRURURcIiBtZXNzYWdlIGZsYWcuXG4gICAqL1xuICBTVUJNSVRURUQgPSAnU3VibWl0dGVkJyxcbn1cblxuLyoqXG4gKiBAbmFtZSBJbWFwXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoaXMgcGx1Z2luIHdpbGwgZW5hYmxlIGEgQ29yZG92YSBhcHBsaWNhdGlvbiB0byB1c2UgdGhlIElNQVAgKEludGVybmV0IE1lc3NhZ2UgQWNjZXNzIFByb3RvY29sKSBmZWF0dXJlc1xuICogVGhlIHBsdWdpbiBvZmZlcnMgc3VwcG9ydCBmb3IgQW5kcm9pZCBhbmQgaU9TLlxuICogVG8gZW5hYmxlIHRoZSBJTUFQIGZlYXR1cmVzIG9uIEFuZHJvaWQsIHRoaXMgcGx1Z2luIHVzZXMgdGhlIGZyYW1ld29yayBbSmF2YSBNYWlsIEFQSV0oaHR0cHM6Ly9qYXZhZWUuZ2l0aHViLmlvL2phdmFtYWlsLykgYW5kIGZvciBpT1MsIGl0IHVzZXMgdGhlIFtNYWlsQ29yZSAyXShodHRwOi8vbGlibWFpbGNvcmUuY29tLykgbGlicmFyeS5cbiAqXG4gKlxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBJbWFwIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL2ltYXAvbmd4JztcbiAqXG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSBpbWFwOiBJbWFwKSB7IH1cbiAqXG4gKiAuLi5cbiAqXG4gKlxuICogdGhpcy5pbWFwLmNvbm5lY3Qoe1xuICogIGhvc3Q6ICdpbWFwLmdtYWlsLmNvbScsXG4gKiAgcG9ydDogOTkzLFxuICogIGNvbm5lY3Rpb25UeXBlOiBDb25uZWN0aW9uVHlwZS5UTFNTU0wgIC8vIChpT1MgT05MWSkgRW5jcnlwdGlvbiB0eXBlIHRvIHVzZS4gRGVmYXVsdCBzZXQgdG86IFRMUy9TU0xcbiAqICB1c2VyOiAnbXlfZW1haWxAZ21haWwuY29tJyxcbiAqICBwYXNzd29yZDogJ215LXBhc3MnXG4gKiB9KVxuICogICAudGhlbigocmVzOiBDb25uZWN0aW9uKSA9PiBjb25zb2xlLmxvZyhyZXMpKVxuICogICAuY2F0Y2goKGVycm9yKSA9PiBjb25zb2xlLmVycm9yKGVycm9yKSk7XG4gKlxuICpcbiAqXG4gKiAgdGhpcy5pbWFwLmRpc2Nvbm5lY3QoKVxuICogICAudGhlbigocmVzOiBib29sZWFuKSA9PiBjb25zb2xlLmxvZyhyZXMpKVxuICogICAuY2F0Y2goKGVycm9yOiBhbnkpID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcbiAqXG4gKlxuICpcbiAqIHRoaXMuaW1hcC5pc0Nvbm5lY3RlZCgpXG4gKiAgIC50aGVuKChyZXM6IGJvb2xlYW4pID0+IGNvbnNvbGUubG9nKHJlcykpXG4gKiAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xuICpcbiAqIC8vIE5vdGU6IENvbm5lY3RlZCB0byBhbiBJTUFQIHNlcnZpY2UgaXMgUkVRVUlSRUQgdG8gYmUgYWJsZSB0byBnZXQgZGF0YSBmcm9tIHRoZSBiZWxvdyBmdW5jdGlvbnMuXG4gKlxuICpcbiAqIC8vIGxpc3RNYWlsRm9sZGVycygnKicpIHVzaW5nIGEgJyonIHBhdHRlcm4gd2lsbCByZXR1cm4gYWxsIGZvbGRlciBuYW1lc1xuICogLy8gbGlzdE1haWxGb2xkZXJzKCdJTkJPWConKSB1c2luZyBhIHBhdHRlcm4gd2l0aCBhIGZvbGRlciBuYW1lIHdpbGwgbGlzdCBhbGwgdGhlIHN1YmZvbGRlciBuYW1lcyBvZiB0aGF0IGZvbGRlciB0aGF0IG1hdGNoIHRoZSBwYXR0ZXJuXG4gKlxuICogICB0aGlzLmltYXAubGlzdE1haWxGb2xkZXJzKCcqJylcbiAqICAgLnRoZW4oKHJlczogYm9vbGVhbikgPT4gY29uc29sZS5sb2cocmVzKSlcbiAqICAgLmNhdGNoKChlcnJvcjogYW55KSA9PiBjb25zb2xlLmVycm9yKGVycm9yKSk7XG4gKlxuICpcbiAqICAgdGhpcy5pbWFwLmdldE1lc3NhZ2VDb3VudEJ5Rm9sZGVyTmFtZSgnSU5CT1gnKVxuICogICAudGhlbigocmVzOiBudW1iZXIpID0+IHtcbiAqICAgLy8gUmV0dXJucyB0aGUgY291bnQgb2YgdGhlIG1lc3NhZ2VzIGluIHRoZSBmb2xkZXIgYXMgYSByZXN1bHRcbiAqICAgIGNvbnNvbGUubG9nKHJlcylcbiAqICAgfSlcbiAqICAgLmNhdGNoKChlcnJvcjogYW55KSA9PiB7XG4gKiAgICAgY29uc29sZS5lcnJvcihlcnJvcilcbiAqICAgfSk7XG4gKlxuICpcbiAqXG4gKiAgIHRoaXMuaW1hcC5zZWFyY2hNZXNzYWdlc0J5RGF0ZVBlcmlvZCgnSU5CT1gnLCAxNjAxNTAzMjAwMDAwLCBDb21wYXJpc29uLkdFKVxuICogICAudGhlbigocmVzOiBudW1iZXJbXSkgPT4ge1xuICogICAvLyBSZXR1cm5zIGFycmF5IHdpdGggbWVzc2FnZXMnIGNvbnNlY3V0aXZlIG51bWJlcnNcbiAqICAgLy8gZXguIFsxMjA3LCAxMjA4LCAxMjA5XVxuICogICAgY29uc29sZS5sb2cocmVzKVxuICogICB9KVxuICogICAuY2F0Y2goKGVycm9yOiBhbnkpID0+IHtcbiAqICAgICBjb25zb2xlLmVycm9yKGVycm9yKVxuICogICB9KTtcbiAqXG4gKlxuICogICB0aGlzLmltYXAubGlzdE1lc3NhZ2VzSGVhZGVyc0J5Q29uc2VjdXRpdmVOdW1iZXIoJ0lOQk9YJywgMTIwMCwgMTI4MClcbiAqICAgLnRoZW4oKHJlczogTWVzc2FnZUhlYWRlcnNbXSkgPT4ge1xuICogICAvLyAgUmV0dXJucyBhcnJheSB3aXRoIG1lc3NhZ2VzJyBoZWFkZXJzIGRhdGFcbiAqICAgIGNvbnNvbGUubG9nKHJlcylcbiAqICAgfSlcbiAqICAgLmNhdGNoKChlcnJvcjogYW55KSA9PiB7XG4gKiAgICAgY29uc29sZS5lcnJvcihlcnJvcilcbiAqICAgfSk7XG4gKlxuICpcbiAqICAgdGhpcy5pbWFwLmxpc3RNZXNzYWdlc0hlYWRlcnNCeURhdGUoJ0lOQk9YJywgMTYwMTUwMzIwMDAwMCwgQ29tcGFyaXNvbi5HRSlcbiAqICAgLnRoZW4oKHJlczogTWVzc2FnZUhlYWRlcnNbXSkgPT4ge1xuICogICAvLyBSZXR1cm5zIGFycmF5IHdpdGggbWVzc2FnZXMnIGhlYWRlcnMgZGF0YVxuICogICAgY29uc29sZS5sb2cocmVzKVxuICogICB9KVxuICogICAuY2F0Y2goKGVycm9yOiBhbnkpID0+IHtcbiAqICAgICBjb25zb2xlLmVycm9yKGVycm9yKVxuICogICB9KTtcbiAqXG4gKlxuICogICB0aGlzLmltYXAuZ2V0RnVsbE1lc3NhZ2VEYXRhKCdJTkJPWCcsIDEyMDUpXG4gKiAgIC50aGVuKChyZXM6IE1lc3NhZ2UpID0+IHtcbiAqICAgLy8gUmV0dXJucyBcIk1lc3NhZ2VcIiBvYmplY3Qgd2l0aCB0aGUgZnVsbCBtZXNzYWdlIGRhdGEgaW5jbHVkaW5nIGF0dGFjaG1lbnRzLlxuICogICAgY29uc29sZS5sb2cocmVzKVxuICogICB9KVxuICogICAuY2F0Y2goKGVycm9yOiBhbnkpID0+IHtcbiAqICAgICBjb25zb2xlLmVycm9yKGVycm9yKVxuICogICB9KTtcbiAqXG4gKlxuICogIHRoaXMuaW1hcC5nZXRGdWxsTWVzc2FnZURhdGFPbk5ld1Nlc3Npb24oe1xuICogICAgICBob3N0OiAnaW1hcC5nbWFpbC5jb20nLFxuICogICAgICBwb3J0OiA5OTMsXG4gKiAgICAgIGNvbm5lY3Rpb25UeXBlOiBDb25uZWN0aW9uVHlwZS5UTFNTU0wgIC8vIChpT1MgT05MWSkgRW5jcnlwdGlvbiB0eXBlIHRvIHVzZS4gRGVmYXVsdCBzZXQgdG86IFRMUy9TU0xcbiAqICAgICAgdXNlcjogJ215X2VtYWlsQGdtYWlsLmNvbScsXG4gKiAgICAgIHBhc3N3b3JkOiAnbXktcGFzcydcbiAqICAgIH0sICdJTkJPWCcsIDEyMDUpXG4gKiAgIC50aGVuKChyZXM6IE1lc3NhZ2UpID0+IHtcbiAqICAgLy8gUmV0dXJucyBcIk1lc3NhZ2VcIiBvYmplY3Qgd2l0aCB0aGUgZnVsbCBtZXNzYWdlIGRhdGEgaW5jbHVkaW5nIGF0dGFjaG1lbnRzLlxuICogICAgY29uc29sZS5sb2cocmVzKVxuICogICB9KVxuICogICAuY2F0Y2goKGVycm9yOiBhbnkpID0+IHtcbiAqICAgICBjb25zb2xlLmVycm9yKGVycm9yKVxuICogICB9KTtcbiAqXG4gKlxuICogICB0aGlzLmltYXAuY29weVRvRm9sZGVyKCdJTkJPWCcsICdTcGFtJywgWzEyMDQsIDEyMDUsIDEyMDYsIDEyMDddKVxuICogICAudGhlbigocmVzOiBib29sZWFuKSA9PiB7XG4gKiAgIC8vIFJldHVybnMgXCJ0cnVlXCIgaWYgdGhlIHByb2Nlc3MgaXMgc3VjY2Vzc2Z1bCwgZWxzZSByZXR1cm5zIFwiZmFsc2VcIi5cbiAqICAgIGNvbnNvbGUubG9nKHJlcylcbiAqICAgfSlcbiAqICAgLmNhdGNoKChlcnJvcjogYW55KSA9PiB7XG4gKiAgICAgY29uc29sZS5lcnJvcihlcnJvcilcbiAqICAgfSk7XG4gKlxuICpcbiAqICAgKiBTZXRzIGEgZmxhZyBvbiBhIG1lc3NhZ2VcbiAqICAgKiBcInNldEZsYWcoKVwiIGNhbiBiZSB1c2VkIGZvciBkZWxldGluZyBtZXNzYWdlcyBzZXR0aW5nIHRoZSBEZWxldGUgZmxhZyB0byBcIkZsYWdFbnVtLkRFTEVURURcIlxuICogICB0aGlzLmltYXAuc2V0RmxhZygnSU5CT1gnLCBbMTIwNiwgMTIwNSwgMTIwNF0sIEZsYWdFbnVtLlNFRU4sIHRydWUpXG4gKiAgIC50aGVuKChyZXM6IE1vZGlmaWNhdGlvblJlc3VsdCkgPT4ge1xuICpcbiAqICAgIC8vIHJlcy5zdGF0dXMgLSByZXR1cm4gdHJ1ZSBvciBmYWxzZSBiYXNlZCBvbiB0aGUgZGVsZXRpb24gc3VjY2Vzc1xuICpcbiAqICAgLy9yZXMubW9kaWZpZWRNZXNzYWdlcyAtIGZvciBleC5bMTIwNiwgMTIwNSwgMTIwNF07XG4gKlxuICogICB9KVxuICogICAuY2F0Y2goKGVycm9yOiBhbnkpID0+IHtcbiAqICAgICBjb25zb2xlLmVycm9yKGVycm9yKVxuICogICB9KTtcbiAqXG4gKiBgYGBcbiAqL1xuQFBsdWdpbih7XG4gIHBsdWdpbk5hbWU6ICdJbWFwJyxcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4taW1hcCcsXG4gIHBsdWdpblJlZjogJ2ltYXAnLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL2FsZWtzYW5kYXI4ODgvY29yZG92YS1wbHVnaW4taW1hcC5naXQnLFxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXSxcbn0pXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgSW1hcCBleHRlbmRzIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luIHtcbiAgLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gXCJjb25uZWN0KGNsaWVudERhdGE6IENvbmZpZylcIiB0cmllcyB0byBjb25uZWN0IGFuZCBhdXRoZW50aWNhdGUgd2l0aCB0aGUgSU1BUCBzZXJ2ZXIuXG4gICAqIEBwYXJhbSBjbGllbnREYXRhIHtDb25maWd9IENvbm5lY3Rpb24gY29uZmlndXJhdGlvblxuICAgKiBAcmV0dXJuIHtQcm9taXNlPENvbm5lY3Rpb24+fSBSZXR1cm5zIGEgcHJvbWlzZSB3aXRoIHRoZSBjb25uZWN0aW9uIGRhdGFcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgY29ubmVjdChjbGllbnREYXRhOiBDb25maWcpOiBQcm9taXNlPENvbm5lY3Rpb24+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogXCJkaXNjb25uZWN0KClcIiBDbG9zZXMgdGhlIGNvbm5lY3Rpb24gd2l0aCB0aGUgc2VydmVyLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGJvb2xlYW4+fSBSZXR1cm5zIGEgcHJvbWlzZSBzdGF0dXMuXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGRpc2Nvbm5lY3QoKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFwiaXNDb25uZWN0ZWQoKVwiIENoZWNrcyB0aGUgY3VycmVudCBzdGF0ZSBvZiB0aGUgY29ubmVjdGlvbi5cbiAgICogQHJldHVybiB7UHJvbWlzZTxib29sZWFuPn0gUmV0dXJucyBhIHByb21pc2Ugd2l0aCBjb25uZWN0aW9uIHN0YXR1c1xuICAgKi9cbiAgQENvcmRvdmEoKVxuICBpc0Nvbm5lY3RlZCgpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKiogIE5vdGU6IENvbm5lY3RlZCB0byBhbiBJTUFQIHNlcnZpY2UgaXMgUkVRVUlSRUQgdG8gYmUgYWJsZSB0byBnZXQgZGF0YSBmcm9tIHRoZSBiZWxvdyBmdW5jdGlvbnMuICAqL1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIGFycmF5IG9mIEZvbGRlciBuYW1lcyBiYXNlZCBvbiBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBwYXR0ZXJuLlxuICAgKlxuICAgKiBFeGFtcGxlOlxuICAgKlxuICAgKiBsaXN0TWFpbEZvbGRlcnMoJyonKSB1c2luZyBhICcqJyBwYXR0ZXJuIHdpbGwgcmV0dXJuIGFsbCBmb2xkZXIgbmFtZXNcbiAgICogbGlzdE1haWxGb2xkZXJzKCdJTkJPWConKSB1c2luZyBhIHBhdHRlcm4gd2l0aCBhIGZvbGRlciBuYW1lIHdpbGwgbGlzdCBhbGwgdGhlIHN1YmZvbGRlciBuYW1lcyB0aGF0IG1hdGNoIHRoZSBwYXR0ZXJuXG4gICAqXG4gICAqXG4gICAqIFwibGlzdE1haWxGb2xkZXJzKHBhdHRlcm46IHN0cmluZylcIiBMaXN0cyB0aGUgbmFtZSBvZiBtYWlsIGZvbGRlcnMgaW4gdGhlIG1haWxib3guXG4gICAqIEBwYXJhbSBwYXR0ZXJuIHtzdHJpbmd9IFJlZ3VsYXIgZXhwcmVzc2lvbiBwYXR0ZXJuLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPHN0cmluZ1tdPn0gUmV0dXJucyBhcnJheSBvZiBmb2xkZXIgbmFtZXMgbWF0Y2hpbmcgdGhlIHBhdHRlcm4uXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGxpc3RNYWlsRm9sZGVycyhwYXR0ZXJuOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZ1tdPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFwiZ2V0TWVzc2FnZUNvdW50QnlGb2xkZXJOYW1lKGZvbGRlck5hbWU6IHN0cmluZylcIiBHZXRzIHRoZSBjb3VudCBvZiB0aGUgbWVzc2FnZXMgaW4gdGhlIGZvbGRlci5cbiAgICogQHBhcmFtIGZvbGRlck5hbWUge3N0cmluZ30gVGhlIG5hbWUgb2YgdGhlIGRlc2lyZWQgZm9sZGVyLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPG51bWJlcj59IFJldHVybnMgdGhlIGNvbnNlY3V0aXZlIG51bWJlciBvZiB0aGUgbGFzdCBtZXNzYWdlLlxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBnZXRNZXNzYWdlQ291bnRCeUZvbGRlck5hbWUoZm9sZGVyTmFtZTogc3RyaW5nKTogUHJvbWlzZTxudW1iZXI+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogXCJzZWFyY2hNZXNzYWdlc0J5RGF0ZVBlcmlvZChmb2xkZXJOYW1lOiBzdHJpbmcsIGRhdGVJbk1pbGxpc2Vjb25kczogbnVtYmVyLCBjb21wYXJpc29uOiBDb21wYXJpc29uKVwiIFJldHVybnMgdGhlIG1lc3NhZ2VzJyBjb25zZWN1dGl2ZSBudW1iZXIuXG4gICAqIEBwYXJhbSBmb2xkZXJOYW1lIHtzdHJpbmd9IFRoZSBuYW1lIG9mIHRoZSBkZXNpcmVkIGZvbGRlclxuICAgKiBAcGFyYW0gZGF0ZUluTWlsbGlzZWNvbmRzIHtudW1iZXJ9IERhdGUgaW4gbWlsbGlzZWNvbmRzXG4gICAqIEBwYXJhbSBjb21wYXJpc29uIHtDb21wYXJpc29ufSBBIGNvbXBhcmlzb24gb3BlcmF0b3JcbiAgICogQHJldHVybiB7UHJvbWlzZTxudW1iZXJbXT59IFJldHVybnMgYXJyYXkgd2l0aCB0aGUgbWVzc2FnZXMnIGNvbnNlY3V0aXZlIG51bWJlcnMuXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHNlYXJjaE1lc3NhZ2VzQnlEYXRlUGVyaW9kKFxuICAgIGZvbGRlck5hbWU6IHN0cmluZyxcbiAgICBkYXRlSW5NaWxsaXNlY29uZHM6IG51bWJlcixcbiAgICBjb21wYXJpc29uOiBDb21wYXJpc29uXG4gICk6IFByb21pc2U8bnVtYmVyW10+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogXCJsaXN0TWVzc2FnZXNIZWFkZXJzQnlDb25zZWN1dGl2ZU51bWJlcihmb2xkZXJOYW1lOiBzdHJpbmcsIHN0YXJ0OiBudW1iZXIsIGVuZDogbnVtYmVyKVwiIFJldHVybnMgbWVzc2FnZXMnIGhlYWRlcnMgZGF0YSBiYXNlZCBvbiBhIFwic3RhcnRcIiBhbmQgXCJlbmRcIiBtZXNzYWdlIGNvbnNlY3V0aXZlIG51bWJlci5cbiAgICogQHBhcmFtIGZvbGRlck5hbWUge3N0cmluZ30gVGhlIG5hbWUgb2YgdGhlIGRlc2lyZWQgZm9sZGVyXG4gICAqIEBwYXJhbSBzdGFydCB7bnVtYmVyfSBDb25zZWN1dGl2ZSBudW1iZXIgb2YgdGhlIGZpcnN0IG1lc3NhZ2UuXG4gICAqIEBwYXJhbSBlbmQge251bWJlcn0gQ29uc2VjdXRpdmUgbnVtYmVyIG9mIHRoZSBsYXN0IG1lc3NhZ2VcbiAgICogQHJldHVybiB7UHJvbWlzZTxNZXNzYWdlSGVhZGVyc1tdPn0gUmV0dXJucyBhcnJheSB3aXRoIHRoZSBtZXNzYWdlcycgaGVhZGVycyBkYXRhLlxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBsaXN0TWVzc2FnZXNIZWFkZXJzQnlDb25zZWN1dGl2ZU51bWJlcihmb2xkZXJOYW1lOiBzdHJpbmcsIHN0YXJ0OiBudW1iZXIsIGVuZDogbnVtYmVyKTogUHJvbWlzZTxNZXNzYWdlSGVhZGVyc1tdPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFwibGlzdE1lc3NhZ2VzSGVhZGVyc0J5RGF0ZShmb2xkZXJOYW1lOiBzdHJpbmcsIGRhdGVJbk1pbGxpc2Vjb25kczogbnVtYmVyLCBjb21wYXJpc29uOiBDb21wYXJpc29uKVwiIFJldHVybnMgbWVzc2FnZXMnIGhlYWRlcnMgZGF0YSBiYXNlZCBvbiBhIGRhdGUuXG4gICAqIEBwYXJhbSBmb2xkZXJOYW1lIHtzdHJpbmd9IFRoZSBuYW1lIG9mIHRoZSBkZXNpcmVkIGZvbGRlclxuICAgKiBAcGFyYW0gZGF0ZUluTWlsbGlzZWNvbmRzIHtudW1iZXJ9IERhdGUgaW4gbWlsbGlzZWNvbmRzLlxuICAgKiBAcGFyYW0gY29tcGFyaXNvbiB7Q29tcGFyaXNvbn0gQSBjb21wYXJpc29uIG9wZXJhdG9yXG4gICAqIEByZXR1cm4ge1Byb21pc2U8TWVzc2FnZUhlYWRlcnNbXT59IFJldHVybnMgYXJyYXkgbWVzc2FnZXMnIGhlYWRlcnMgZGF0YS5cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgbGlzdE1lc3NhZ2VzSGVhZGVyc0J5RGF0ZShcbiAgICBmb2xkZXJOYW1lOiBzdHJpbmcsXG4gICAgZGF0ZUluTWlsbGlzZWNvbmRzOiBudW1iZXIsXG4gICAgY29tcGFyaXNvbjogQ29tcGFyaXNvblxuICApOiBQcm9taXNlPE1lc3NhZ2VIZWFkZXJzW10+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogXCJnZXRGdWxsTWVzc2FnZURhdGEoZm9sZGVyTmFtZTogc3RyaW5nLCBtZXNzYWdlTnVtYmVyOiBudW1iZXIpXCIgUmV0dXJucyB0aGUgZnVsbCBtZXNzYWdlIGRhdGEgaW5jbHVkaW5nIGl0cyBhdHRhY2htZW50cy5cbiAgICogQHBhcmFtIGZvbGRlck5hbWUge3N0cmluZ30gVGhlIG5hbWUgdGhlIG1lc3NhZ2UncyBmb2xkZXIuXG4gICAqIEBwYXJhbSBtZXNzYWdlTnVtYmVyIHtudW1iZXJ9IE1lc3NhZ2UncyBjb25zZWN1dGl2ZSBudW1iZXIuXG4gICAqIEByZXR1cm4ge1Byb21pc2U8TWVzc2FnZT59IFJldHVybnMgXCJNZXNzYWdlXCIgb2JqZWN0IHdpdGggZnVsbCBtZXNzYWdlIGRhdGEuXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGdldEZ1bGxNZXNzYWdlRGF0YShmb2xkZXJOYW1lOiBzdHJpbmcsIG1lc3NhZ2VOdW1iZXI6IG51bWJlcik6IFByb21pc2U8TWVzc2FnZT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBUaGlzIGZ1bmN0aW9uIFwiZ2V0RnVsbE1lc3NhZ2VEYXRhT25OZXdTZXNzaW9uKGNsaWVudERhdGE6IENvbmZpZywgZm9sZGVyTmFtZTogc3RyaW5nLCBtZXNzYWdlTnVtYmVyOiBudW1iZXIpXCIgZG93bmxvYWRzIHRoZSBmdWxsIG1lc3NhZ2UgZGF0YSB1c2luZyBhXG4gICAqIHNlcGFyYXRlIHNlc3Npb24gd2l0aCB0aGUgc2VydmVyLiBJdCBpcyBzdWl0YWJsZSBmb3IgZG93bmxvYWRpbmcgbWVzc2FnZSBkYXRhIHdoaWxlIHRoZSBhcHAgaXMgYWxyZWFkeSBjb25uZWN0ZWQgdG8gYSB0aGlyZCBzZXJ2ZXIuXG4gICAqIFwiZ2V0RnVsbE1lc3NhZ2VEYXRhT25OZXdTZXNzaW9uKGNsaWVudERhdGE6IENvbmZpZywgZm9sZGVyTmFtZTogc3RyaW5nLCBtZXNzYWdlTnVtYmVyOiBudW1iZXIpXCIgUmV0dXJucyB0aGUgZnVsbCBtZXNzYWdlIGRhdGEgaW5jbHVkaW5nIGl0cyBhdHRhY2htZW50cy5cbiAgICogQHBhcmFtIGNsaWVudERhdGEge0NvbmZpZ30gQ29ubmVjdGlvbiBjb25maWd1cmF0aW9uLlxuICAgKiBAcGFyYW0gZm9sZGVyTmFtZSB7c3RyaW5nfSBUaGUgbmFtZSB0aGUgbWVzc2FnZSdzIGZvbGRlci5cbiAgICogQHBhcmFtIG1lc3NhZ2VOdW1iZXIge251bWJlcn0gTWVzc2FnZSdzIGNvbnNlY3V0aXZlIG51bWJlci5cbiAgICogQHJldHVybiB7UHJvbWlzZTxNZXNzYWdlPn0gUmV0dXJucyBcIk1lc3NhZ2VcIiBvYmplY3Qgd2l0aCBmdWxsIG1lc3NhZ2UgZGF0YS5cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgZ2V0RnVsbE1lc3NhZ2VEYXRhT25OZXdTZXNzaW9uKGNsaWVudERhdGE6IENvbmZpZywgZm9sZGVyTmFtZTogc3RyaW5nLCBtZXNzYWdlTnVtYmVyOiBudW1iZXIpOiBQcm9taXNlPE1lc3NhZ2U+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogXCJjb3B5VG9Gb2xkZXIoc291cmNlRm9sZGVyOiBzdHJpbmcsIGRlc3RpbmF0aW9uRm9sZGVyOiBzdHJpbmcsIG1lc3NhZ2VOdW1zOiBudW1iZXJbXSlcIiBDb3B5IG1lc3NhZ2VzIHRvIGEgZGVzaXJlZCBmb2xkZXIuXG4gICAqIEBwYXJhbSBzb3VyY2VGb2xkZXIge3N0cmluZ30gVGhlIG5hbWUgb2YgdGhlIHNvdXJjZSBmb2xkZXIuXG4gICAqIEBwYXJhbSBkZXN0aW5hdGlvbkZvbGRlciB7c3RyaW5nfSBUaGUgbmFtZSBvZiB0aGUgZGVzdGluYXRpb24gZm9sZGVyLlxuICAgKiBAcGFyYW0gbWVzc2FnZU51bXMge251bWJlcltdfSBBcnJheSB3aXRoIG1lc3NhZ2VzJyBjb25zZWN1dGl2ZSBudW1iZXJzIG9yIGFycmF5IHdpdGggc2luZ2xlIG1lc3NhZ2UgY29uc2VjdXRpdmUgbnVtYmVyLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPE1lc3NhZ2U+fSBSZXR1cm5zIGJvb2xlYW4gc3RhdHVzIG9mIHRoZSBwcm9jZXNzLlxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBjb3B5VG9Gb2xkZXIoc291cmNlRm9sZGVyOiBzdHJpbmcsIGRlc3RpbmF0aW9uRm9sZGVyOiBzdHJpbmcsIG1lc3NhZ2VOdW1zOiBudW1iZXJbXSk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBcInNldEZsYWcoZm9sZGVyTmFtZTogc3RyaW5nLCBtZXNzYWdlTnVtczogbnVtYmVyW10sIGZsYWc6IEZsYWdFbnVtLCBzdGF0dXM6IGJvb2xlYW4pXCIgU2V0IG9yIHJlbW92ZSBmbGFnIGZyb20gYSBtZXNzYWdlXG4gICAqIEBwYXJhbSBmb2xkZXJOYW1lIHtzdHJpbmd9IFRoZSBuYW1lIG9mIHRoZSBzb3VyY2UgZm9sZGVyIHdoZXJlIHRoZSBtZXNzYWdlcyBhcmUgY29udGFpbmVkLlxuICAgKiBAcGFyYW0gbWVzc2FnZU51bXMge251bWJlcltdfSBBcnJheSB3aXRoIG1lc3NhZ2VzJyBjb25zZWN1dGl2ZSBudW1iZXJzIG9yIGFycmF5IHdpdGggc2luZ2xlIG1lc3NhZ2UgY29uc2VjdXRpdmUgbnVtYmVyXG4gICAqIEBwYXJhbSBmbGFnIHtGbGFnRW51bX0gRGVzaXJlZCBtZXNzYWdlIGZsYWcuXG4gICAqIEBwYXJhbSBzdGF0dXMge2Jvb2xlYW59IFNldCBzdGF0dXMgdG8gXCJ0cnVlXCIgdG8gc2V0IHRoZSBmbGFnIG9uIGEgbWVzc2FnZTsgb3IgdG8gXCJmYWxzZVwiIHRvIHJlbW92ZSB0aGUgZmxhZyBmcm9tIHRoZSBtZXNzYWdlXG4gICAqIEByZXR1cm4ge1Byb21pc2U8TW9kaWZpY2F0aW9uUmVzdWx0Pn0gUmV0dXJucyBvYmplY3Qgd2l0aCBzdGF0dXMgYW5kIGFycmF5IHdpdGggbWVzc2FnZXMnIGNvbnNlY3V0aXZlIG51bWJlcnMgb2YgdGhlIG1vZGlmaWVkIG1lc3NhZ2VzXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHNldEZsYWcoZm9sZGVyTmFtZTogc3RyaW5nLCBtZXNzYWdlTnVtczogbnVtYmVyW10sIGZsYWc6IEZsYWdFbnVtLCBzdGF0dXM6IGJvb2xlYW4pOiBQcm9taXNlPE1vZGlmaWNhdGlvblJlc3VsdD4ge1xuICAgIHJldHVybjtcbiAgfVxufVxuIl19