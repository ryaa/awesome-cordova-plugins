var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
export var ConnectionType;
(function (ConnectionType) {
    /**
     * Clear-text connection for the protocol.
     */
    ConnectionType["Clear"] = "Clear";
    /**
     * Starts with clear-text connection at the beginning, then switch to encrypted connection using TLS/SSL.
     */
    ConnectionType["StartTLS"] = "StartTLS";
    /**
     * Encrypted connection using TLS/SSL.
     */
    ConnectionType["TLSSSL"] = "TLS/SSL";
})(ConnectionType || (ConnectionType = {}));
export var Comparison;
(function (Comparison) {
    /**
     * Android ONLY
     * The less than or equal to operator.
     */
    Comparison["LE"] = "LE";
    /**
     * The less than operator.
     */
    Comparison["LT"] = "LT";
    /**
     * The equality operator.
     */
    Comparison["EQ"] = "EQ";
    /**
     * The not equal to operator.
     */
    Comparison["NE"] = "NE";
    /**
     * Android ONLY
     * The greater than operator.
     */
    Comparison["GT"] = "GT";
    /**
     * The greater than or equal to operator.
     */
    Comparison["GE"] = "GE";
})(Comparison || (Comparison = {}));
/**
 * All available message flags. Set or remove flag using "setFlag()".
 */
export var FlagEnum;
(function (FlagEnum) {
    /**
     * "ANSWERED" message flag
     */
    FlagEnum["ANSWERED"] = "ANSWERED";
    /**
     * "DRAFT" message flag
     */
    FlagEnum["DRAFT"] = "DRAFT";
    /**
     * "FLAGGED" message flag
     */
    FlagEnum["FLAGGED"] = "FLAGGED";
    /**
     * Android ONLY
     * "RECENT" message flag
     */
    FlagEnum["RECENT"] = "RECENT";
    /**
     * "SEEN" message flag
     */
    FlagEnum["SEEN"] = "SEEN";
    /**
     * Android ONLY
     * "USER" message flag
     */
    FlagEnum["USER"] = "USER";
    /**
     * "DELETED" message flag. Note: Add this flag to delete the message from the mailbox
     */
    FlagEnum["DELETED"] = "DELETED";
    /**
     * iOS ONLY
     * "SENT" message flag.
     */
    FlagEnum["SENT"] = "Sent";
    /**
     * iOS ONLY
     * "FORWARDED" message flag.
     */
    FlagEnum["FORWARDED"] = "Forwarded";
    /**
     * iOS ONLY
     * "SubmitPending" message flag.
     */
    FlagEnum["SubmitPending"] = "SubmitPending";
    /**
     * iOS ONLY
     * "SUBMITTED" message flag.
     */
    FlagEnum["SUBMITTED"] = "Submitted";
})(FlagEnum || (FlagEnum = {}));
var ImapOriginal = /** @class */ (function (_super) {
    __extends(ImapOriginal, _super);
    function ImapOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ImapOriginal.prototype.connect = function (clientData) { return cordova(this, "connect", {}, arguments); };
    ImapOriginal.prototype.disconnect = function () { return cordova(this, "disconnect", {}, arguments); };
    ImapOriginal.prototype.isConnected = function () { return cordova(this, "isConnected", {}, arguments); };
    ImapOriginal.prototype.listMailFolders = function (pattern) { return cordova(this, "listMailFolders", {}, arguments); };
    ImapOriginal.prototype.getMessageCountByFolderName = function (folderName) { return cordova(this, "getMessageCountByFolderName", {}, arguments); };
    ImapOriginal.prototype.searchMessagesByDatePeriod = function (folderName, dateInMilliseconds, comparison) { return cordova(this, "searchMessagesByDatePeriod", {}, arguments); };
    ImapOriginal.prototype.listMessagesHeadersByConsecutiveNumber = function (folderName, start, end) { return cordova(this, "listMessagesHeadersByConsecutiveNumber", {}, arguments); };
    ImapOriginal.prototype.listMessagesHeadersByDate = function (folderName, dateInMilliseconds, comparison) { return cordova(this, "listMessagesHeadersByDate", {}, arguments); };
    ImapOriginal.prototype.getFullMessageData = function (folderName, messageNumber) { return cordova(this, "getFullMessageData", {}, arguments); };
    ImapOriginal.prototype.getFullMessageDataOnNewSession = function (clientData, folderName, messageNumber) { return cordova(this, "getFullMessageDataOnNewSession", {}, arguments); };
    ImapOriginal.prototype.copyToFolder = function (sourceFolder, destinationFolder, messageNums) { return cordova(this, "copyToFolder", {}, arguments); };
    ImapOriginal.prototype.setFlag = function (folderName, messageNums, flag, status) { return cordova(this, "setFlag", {}, arguments); };
    ImapOriginal.pluginName = "Imap";
    ImapOriginal.plugin = "cordova-plugin-imap";
    ImapOriginal.pluginRef = "imap";
    ImapOriginal.repo = "https://github.com/aleksandar888/cordova-plugin-imap.git";
    ImapOriginal.platforms = ["Android", "iOS"];
    return ImapOriginal;
}(AwesomeCordovaNativePlugin));
var Imap = new ImapOriginal();
export { Imap };
//# sourceMappingURL=data:application/json;base64,