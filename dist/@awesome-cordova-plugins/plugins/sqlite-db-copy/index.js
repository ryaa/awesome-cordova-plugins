var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var SqliteDbCopyOriginal = /** @class */ (function (_super) {
    __extends(SqliteDbCopyOriginal, _super);
    function SqliteDbCopyOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SqliteDbCopyOriginal.prototype.copy = function (dbname, location) { return cordova(this, "copy", { "successIndex": 2, "errorIndex": 3 }, arguments); };
    SqliteDbCopyOriginal.prototype.checkDbOnStorage = function (dbname, source) { return cordova(this, "checkDbOnStorage", { "successIndex": 2, "errorIndex": 3 }, arguments); };
    SqliteDbCopyOriginal.prototype.copyDbFromStorage = function (dbname, location, source, deleteolddb) { return cordova(this, "copyDbFromStorage", { "successIndex": 4, "errorIndex": 5 }, arguments); };
    SqliteDbCopyOriginal.prototype.copyDbToStorage = function (dbname, location, destination, overwrite) { return cordova(this, "copyDbToStorage", { "successIndex": 4, "errorIndex": 5 }, arguments); };
    SqliteDbCopyOriginal.prototype.remove = function (dbname, location) { return cordova(this, "remove", { "successIndex": 2, "errorIndex": 3 }, arguments); };
    SqliteDbCopyOriginal.pluginName = "cordova-plugin-dbcopy";
    SqliteDbCopyOriginal.plugin = "cordova-plugin-dbcopy";
    SqliteDbCopyOriginal.pluginRef = "window.plugins.sqlDB";
    SqliteDbCopyOriginal.repo = "https://github.com/an-rahulpandey/cordova-plugin-dbcopy";
    SqliteDbCopyOriginal.platforms = ["Android", "iOS"];
    return SqliteDbCopyOriginal;
}(AwesomeCordovaNativePlugin));
var SqliteDbCopy = new SqliteDbCopyOriginal();
export { SqliteDbCopy };
//# sourceMappingURL=data:application/json;base64,