var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import { Observable } from 'rxjs';
export var ELocalNotificationTriggerUnit;
(function (ELocalNotificationTriggerUnit) {
    ELocalNotificationTriggerUnit["SECOND"] = "second";
    ELocalNotificationTriggerUnit["MINUTE"] = "minute";
    ELocalNotificationTriggerUnit["HOUR"] = "hour";
    ELocalNotificationTriggerUnit["DAY"] = "day";
    ELocalNotificationTriggerUnit["WEEK"] = "week";
    ELocalNotificationTriggerUnit["MONTH"] = "month";
    ELocalNotificationTriggerUnit["QUARTER"] = "quarter";
    ELocalNotificationTriggerUnit["YEAR"] = "year";
    ELocalNotificationTriggerUnit["WEEKDAY"] = "weekday";
    ELocalNotificationTriggerUnit["WEEKDAY_ORDINAL"] = "weekdayOrdinal";
    ELocalNotificationTriggerUnit["WEEK_OF_MONTH"] = "weekOfMonth";
})(ELocalNotificationTriggerUnit || (ELocalNotificationTriggerUnit = {}));
export var ILocalNotificationActionType;
(function (ILocalNotificationActionType) {
    ILocalNotificationActionType["INPUT"] = "input";
    ILocalNotificationActionType["BUTTON"] = "button";
})(ILocalNotificationActionType || (ILocalNotificationActionType = {}));
var LocalNotificationsOriginal = /** @class */ (function (_super) {
    __extends(LocalNotificationsOriginal, _super);
    function LocalNotificationsOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LocalNotificationsOriginal.prototype.hasPermission = function () { return cordova(this, "hasPermission", {}, arguments); };
    LocalNotificationsOriginal.prototype.requestPermission = function () { return cordova(this, "requestPermission", {}, arguments); };
    LocalNotificationsOriginal.prototype.schedule = function (options) { return cordova(this, "schedule", { "sync": true }, arguments); };
    LocalNotificationsOriginal.prototype.update = function (options) { return cordova(this, "update", { "sync": true }, arguments); };
    LocalNotificationsOriginal.prototype.clear = function (notificationId) { return cordova(this, "clear", {}, arguments); };
    LocalNotificationsOriginal.prototype.clearAll = function () { return cordova(this, "clearAll", {}, arguments); };
    LocalNotificationsOriginal.prototype.cancel = function (notificationId) { return cordova(this, "cancel", {}, arguments); };
    LocalNotificationsOriginal.prototype.cancelAll = function () { return cordova(this, "cancelAll", {}, arguments); };
    LocalNotificationsOriginal.prototype.isPresent = function (notificationId) { return cordova(this, "isPresent", {}, arguments); };
    LocalNotificationsOriginal.prototype.isScheduled = function (notificationId) { return cordova(this, "isScheduled", {}, arguments); };
    LocalNotificationsOriginal.prototype.isTriggered = function (notificationId) { return cordova(this, "isTriggered", {}, arguments); };
    LocalNotificationsOriginal.prototype.hasType = function (id, type) { return cordova(this, "hasType", {}, arguments); };
    LocalNotificationsOriginal.prototype.getType = function (id) { return cordova(this, "getType", {}, arguments); };
    LocalNotificationsOriginal.prototype.getIds = function () { return cordova(this, "getIds", {}, arguments); };
    LocalNotificationsOriginal.prototype.getScheduledIds = function () { return cordova(this, "getScheduledIds", {}, arguments); };
    LocalNotificationsOriginal.prototype.getTriggeredIds = function () { return cordova(this, "getTriggeredIds", {}, arguments); };
    LocalNotificationsOriginal.prototype.get = function (notificationId) { return cordova(this, "get", {}, arguments); };
    LocalNotificationsOriginal.prototype.getAll = function () { return cordova(this, "getAll", {}, arguments); };
    LocalNotificationsOriginal.prototype.getScheduled = function (notificationId) { return cordova(this, "getScheduled", {}, arguments); };
    LocalNotificationsOriginal.prototype.getTriggered = function (notificationId) { return cordova(this, "getTriggered", {}, arguments); };
    LocalNotificationsOriginal.prototype.addActions = function (groupId, actions) { return cordova(this, "addActions", {}, arguments); };
    LocalNotificationsOriginal.prototype.removeActions = function (groupId) { return cordova(this, "removeActions", {}, arguments); };
    LocalNotificationsOriginal.prototype.hasActions = function (groupId) { return cordova(this, "hasActions", {}, arguments); };
    LocalNotificationsOriginal.prototype.getDefaults = function () { return cordova(this, "getDefaults", { "sync": true }, arguments); };
    LocalNotificationsOriginal.prototype.setDefaults = function (defaults) { return cordova(this, "setDefaults", { "sync": true }, arguments); };
    LocalNotificationsOriginal.prototype.getAllScheduled = function () { return cordova(this, "getAllScheduled", {}, arguments); };
    LocalNotificationsOriginal.prototype.getAllTriggered = function () { return cordova(this, "getAllTriggered", {}, arguments); };
    LocalNotificationsOriginal.prototype.on = function (eventName) { return cordova(this, "on", { "observable": true, "clearFunction": "un", "clearWithArgs": true }, arguments); };
    LocalNotificationsOriginal.prototype.fireEvent = function (eventName, args) { return cordova(this, "fireEvent", { "sync": true }, arguments); };
    LocalNotificationsOriginal.prototype.fireQueuedEvents = function () { return cordova(this, "fireQueuedEvents", {}, arguments); };
    LocalNotificationsOriginal.pluginName = "LocalNotifications";
    LocalNotificationsOriginal.plugin = "cordova-plugin-local-notification";
    LocalNotificationsOriginal.pluginRef = "cordova.plugins.notification.local";
    LocalNotificationsOriginal.repo = "https://github.com/katzer/cordova-plugin-local-notifications";
    LocalNotificationsOriginal.platforms = ["Android", "iOS", "Windows"];
    return LocalNotificationsOriginal;
}(AwesomeCordovaNativePlugin));
var LocalNotifications = new LocalNotificationsOriginal();
export { LocalNotifications };
//# sourceMappingURL=data:application/json;base64,