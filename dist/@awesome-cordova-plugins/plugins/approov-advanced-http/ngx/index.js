import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova, cordovaPropertyGet, cordovaPropertySet } from '@awesome-cordova-plugins/core';
var ApproovHttp = /** @class */ (function (_super) {
    __extends(ApproovHttp, _super);
    function ApproovHttp() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ApproovHttp.prototype.getBasicAuthHeader = function (username, password) { return cordova(this, "getBasicAuthHeader", { "sync": true }, arguments); };
    ApproovHttp.prototype.useBasicAuth = function (username, password) { return cordova(this, "useBasicAuth", { "sync": true }, arguments); };
    ApproovHttp.prototype.getHeaders = function (host) { return cordova(this, "getHeaders", { "sync": true }, arguments); };
    ApproovHttp.prototype.setHeader = function (host, header, value) { return cordova(this, "setHeader", { "sync": true }, arguments); };
    ApproovHttp.prototype.getDataSerializer = function () { return cordova(this, "getDataSerializer", { "sync": true }, arguments); };
    ApproovHttp.prototype.setDataSerializer = function (serializer) { return cordova(this, "setDataSerializer", { "sync": true }, arguments); };
    ApproovHttp.prototype.setCookie = function (url, cookie) { return cordova(this, "setCookie", { "sync": true }, arguments); };
    ApproovHttp.prototype.clearCookies = function () { return cordova(this, "clearCookies", { "sync": true }, arguments); };
    ApproovHttp.prototype.removeCookies = function (url, cb) { return cordova(this, "removeCookies", { "sync": true }, arguments); };
    ApproovHttp.prototype.getCookieString = function (url) { return cordova(this, "getCookieString", { "sync": true }, arguments); };
    ApproovHttp.prototype.getRequestTimeout = function () { return cordova(this, "getRequestTimeout", { "sync": true }, arguments); };
    ApproovHttp.prototype.setRequestTimeout = function (timeout) { return cordova(this, "setRequestTimeout", { "sync": true }, arguments); };
    ApproovHttp.prototype.getFollowRedirect = function () { return cordova(this, "getFollowRedirect", { "sync": true }, arguments); };
    ApproovHttp.prototype.setFollowRedirect = function (follow) { return cordova(this, "setFollowRedirect", { "sync": true }, arguments); };
    ApproovHttp.prototype.setServerTrustMode = function (mode) { return cordova(this, "setServerTrustMode", {}, arguments); };
    ApproovHttp.prototype.post = function (url, body, headers) { return cordova(this, "post", {}, arguments); };
    ApproovHttp.prototype.postSync = function (url, body, headers, success, failure) { return cordova(this, "post", { "methodName": "post", "sync": true }, arguments); };
    ApproovHttp.prototype.get = function (url, parameters, headers) { return cordova(this, "get", {}, arguments); };
    ApproovHttp.prototype.getSync = function (url, parameters, headers, success, failure) { return cordova(this, "get", { "methodName": "get", "sync": true }, arguments); };
    ApproovHttp.prototype.put = function (url, body, headers) { return cordova(this, "put", {}, arguments); };
    ApproovHttp.prototype.putSync = function (url, body, headers, success, failure) { return cordova(this, "put", { "methodName": "put", "sync": true }, arguments); };
    ApproovHttp.prototype.patch = function (url, body, headers) { return cordova(this, "patch", {}, arguments); };
    ApproovHttp.prototype.patchSync = function (url, body, headers, success, failure) { return cordova(this, "patch", { "methodName": "patch", "sync": true }, arguments); };
    ApproovHttp.prototype.delete = function (url, parameters, headers) { return cordova(this, "delete", {}, arguments); };
    ApproovHttp.prototype.deleteSync = function (url, parameters, headers, success, failure) { return cordova(this, "delete", { "methodName": "delete", "sync": true }, arguments); };
    ApproovHttp.prototype.head = function (url, parameters, headers) { return cordova(this, "head", {}, arguments); };
    ApproovHttp.prototype.headSync = function (url, parameters, headers, success, failure) { return cordova(this, "head", { "methodName": "head", "sync": true }, arguments); };
    ApproovHttp.prototype.options = function (url, parameters, headers) { return cordova(this, "options", {}, arguments); };
    ApproovHttp.prototype.optionsSync = function (url, parameters, headers, success, failure) { return cordova(this, "options", { "methodName": "options", "sync": true }, arguments); };
    ApproovHttp.prototype.uploadFile = function (url, body, headers, filePath, name) { return cordova(this, "uploadFile", {}, arguments); };
    ApproovHttp.prototype.uploadFileSync = function (url, body, headers, filePath, name, success, failure) { return cordova(this, "uploadFile", { "methodName": "uploadFile", "sync": true }, arguments); };
    ApproovHttp.prototype.downloadFile = function (url, body, headers, filePath) { return cordova(this, "downloadFile", {}, arguments); };
    ApproovHttp.prototype.downloadFileSync = function (url, body, headers, filePath, success, failure) { return cordova(this, "downloadFile", { "methodName": "downloadFile", "sync": true }, arguments); };
    ApproovHttp.prototype.sendRequest = function (url, options) { return cordova(this, "sendRequest", {}, arguments); };
    ApproovHttp.prototype.sendRequestSync = function (url, options, success, failure) { return cordova(this, "sendRequest", { "methodName": "sendRequest", "sync": true }, arguments); };
    ApproovHttp.prototype.abort = function (requestId) { return cordova(this, "abort", {}, arguments); };
    ApproovHttp.prototype.initializeApproov = function () { return cordova(this, "initializeApproov", { "sync": true }, arguments); };
    ApproovHttp.prototype.approovSetDataHashInToken = function (dataHash) { return cordova(this, "approovSetDataHashInToken", { "sync": true }, arguments); };
    ApproovHttp.prototype.approovSetBindingHeader = function (header) { return cordova(this, "approovSetBindingHeader", { "sync": true }, arguments); };
    ApproovHttp.prototype.getApproovLoggableToken = function (host) { return cordova(this, "getApproovLoggableToken", {}, arguments); };
    Object.defineProperty(ApproovHttp.prototype, "ErrorCode", {
        get: function () { return cordovaPropertyGet(this, "ErrorCode"); },
        set: function (value) { cordovaPropertySet(this, "ErrorCode", value); },
        enumerable: false,
        configurable: true
    });
    ApproovHttp.pluginName = "ApproovHttp";
    ApproovHttp.plugin = "cordova-approov-advanced-http";
    ApproovHttp.pluginRef = "cordova.plugin.ApproovHttp";
    ApproovHttp.repo = "https://github.com/approov/quickstart-ionic-advancedhttp";
    ApproovHttp.platforms = ["Android", "iOS"];
    ApproovHttp.decorators = [
        { type: Injectable }
    ];
    return ApproovHttp;
}(AwesomeCordovaNativePlugin));
export { ApproovHttp };
//# sourceMappingURL=data:application/json;base64,