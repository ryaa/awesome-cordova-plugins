import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import * as i0 from "@angular/core";
var CloudSettings = /** @class */ (function (_super) {
    __extends(CloudSettings, _super);
    function CloudSettings() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CloudSettings.prototype.exists = function () { return cordova(this, "exists", {}, arguments); };
    CloudSettings.prototype.save = function (settings, overwrite) { return cordova(this, "save", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    CloudSettings.prototype.load = function () { return cordova(this, "load", {}, arguments); };
    CloudSettings.prototype.onRestore = function (handler) { return cordova(this, "onRestore", { "sync": true }, arguments); };
    CloudSettings.prototype.enableDebug = function () { return cordova(this, "enableDebug", {}, arguments); };
    CloudSettings.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CloudSettings, deps: null, target: i0.ɵɵFactoryTarget.Injectable });
    CloudSettings.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CloudSettings });
    CloudSettings.pluginName = "CloudSettings";
    CloudSettings.plugin = "cordova-plugin-cloud-settings";
    CloudSettings.pluginRef = "cordova.plugin.cloudsettings";
    CloudSettings.repo = "https://github.com/dpa99c/cordova-plugin-cloud-settings";
    CloudSettings.install = "ionic cordova plugin add cordova-plugin-cloud-settings --variable ANDROID_BACKUP_SERVICE_KEY=myapikey";
    CloudSettings.installVariables = ["ANDROID_BACKUP_SERVICE_KEY"];
    CloudSettings.platforms = ["Android", "iOS"];
    CloudSettings = __decorate([], CloudSettings);
    return CloudSettings;
}(AwesomeCordovaNativePlugin));
export { CloudSettings };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CloudSettings, decorators: [{
            type: Injectable
        }], propDecorators: { exists: [], save: [], load: [], onRestore: [], enableDebug: [] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvY2xvdWQtc2V0dGluZ3Mvbmd4L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sdUNBQStDLE1BQU0sK0JBQStCLENBQUM7OztJQXNDekQsaUNBQTBCOzs7O0lBTzNELDhCQUFNO0lBZ0JOLDRCQUFJLGFBQUMsUUFBYSxFQUFFLFNBQW1CO0lBVXZDLDRCQUFJO0lBVUosaUNBQVMsYUFBQyxPQUFpQjtJQVEzQixtQ0FBVzsrR0FuREEsYUFBYTttSEFBYixhQUFhOzs7Ozs7OztJQUFiLGFBQWEsa0JBQWIsYUFBYTt3QkF2QzFCO0VBdUNtQywwQkFBMEI7U0FBaEQsYUFBYTs0RkFBYixhQUFhO2tCQUR6QixVQUFVOzhCQVFULE1BQU0sTUFnQk4sSUFBSSxNQVVKLElBQUksTUFVSixTQUFTLE1BUVQsV0FBVyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvcmRvdmEsIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvY29yZSc7XG5cbi8qKlxuICogQG5hbWUgQ2xvdWQgU2V0dGluZ3NcbiAqIEBkZXNjcmlwdGlvblxuICogU3RvcmVzIGFwcCBzZXR0aW5ncyBpbiBjbG91ZCBzdG9yYWdlIHNvIGlmIHRoZSB1c2VyIHJlLWluc3RhbGxzIHRoZSBhcHAgb3IgaW5zdGFsbHMgaXQgb24gYSBkaWZmZXJlbnQgZGV2aWNlLCB0aGUgc2V0dGluZ3Mgd2lsbCBiZSByZXN0b3JlZCBhbmQgYXZhaWxhYmxlIGluIHRoZSBuZXcgaW5zdGFsbGF0aW9uLlxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBDbG91ZFNldHRpbmdzIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL2Nsb3VkLXNldHRpbmdzL25neCc7XG4gKlxuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgY2xvdWRTZXR0aW5nczogQ2xvdWRTZXR0aW5ncykgeyB9XG4gKlxuICogLi4uXG4gKlxuICogdGhpcy5jbG91ZFNldHRpbmdzLmV4aXN0cygpXG4gKiAgIC50aGVuKChleGlzdHM6IGJvb2xlYW4pID0+IGNvbnNvbGUubG9nKFwiU2F2ZWQgc2V0dGluZ3MgZXhpc3Q6IFwiICsgZXhpc3RzKSApXG4gKlxuICogdGhpcy5jbG91ZFNldHRpbmdzLmxvYWQoKVxuICogICAudGhlbigoc2V0dGluZ3M6IGFueSkgPT4gdGhpcy5zZXR0aW5ncyA9IHNldHRpbmdzKVxuICogICAuY2F0Y2goKGVycm9yOiBhbnkpID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcbiAqXG4gKiB0aGlzLmNsb3VkU2V0dGluZ3Muc2F2ZSh0aGlzLnNldHRpbmdzKVxuICogICAudGhlbigoc2F2ZWRTZXR0aW5nczogYW55KSA9PiBjb25zb2xlLmxvZyhcIlNhdmVkIHNldHRpbmdzOiBcIiArIEpTT04uc3RyaW5naWZ5KHNhdmVkU2V0dGluZ3MpKSlcbiAqICAgLmNhdGNoKChlcnJvcjogYW55KSA9PiBjb25zb2xlLmVycm9yKGVycm9yKSk7XG4gKlxuICogYGBgXG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnQ2xvdWRTZXR0aW5ncycsXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLWNsb3VkLXNldHRpbmdzJyxcbiAgcGx1Z2luUmVmOiAnY29yZG92YS5wbHVnaW4uY2xvdWRzZXR0aW5ncycsXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vZHBhOTljL2NvcmRvdmEtcGx1Z2luLWNsb3VkLXNldHRpbmdzJyxcbiAgaW5zdGFsbDogJ2lvbmljIGNvcmRvdmEgcGx1Z2luIGFkZCBjb3Jkb3ZhLXBsdWdpbi1jbG91ZC1zZXR0aW5ncyAtLXZhcmlhYmxlIEFORFJPSURfQkFDS1VQX1NFUlZJQ0VfS0VZPW15YXBpa2V5JyxcbiAgaW5zdGFsbFZhcmlhYmxlczogWydBTkRST0lEX0JBQ0tVUF9TRVJWSUNFX0tFWSddLFxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXSxcbn0pXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQ2xvdWRTZXR0aW5ncyBleHRlbmRzIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luIHtcbiAgLyoqXG4gICAqIEluZGljYXRlcyBpZiBhbnkgc3RvcmVkIGNsb3VkIHNldHRpbmdzIGN1cnJlbnRseSBleGlzdCBmb3IgdGhlIGN1cnJlbnQgdXNlci5cbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2U8Ym9vbGVhbj59IFdpbGwgYmUgcGFzc2VkIGEgYm9vbGVhbiBmbGFnIHdoaWNoIGluZGljYXRlcyB3aGV0aGVyIGFuIHN0b3JlIHNldHRpbmdzIGV4aXN0IGZvciB0aGUgdXNlci5cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgZXhpc3RzKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTYXZlcyB0aGUgc2V0dGluZ3MgdG8gY2xvdWQgYmFja3VwLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gc2V0dGluZ3MgLSBhIEpTT04gc3RydWN0dXJlIHJlcHJlc2VudGluZyB0aGUgdXNlciBzZXR0aW5ncyB0byBzYXZlIHRvIGNsb3VkIGJhY2t1cC5cbiAgICogQHBhcmFtIHtib29sZWFufSBbb3ZlcndyaXRlXSAtIChvcHRpb25hbCkgaWYgdHJ1ZSwgZXhpc3Rpbmcgc2V0dGluZ3Mgd2lsbCBiZSByZXBsYWNlZCByYXRoZXIgdGhhbiB1cGRhdGVkLiBEZWZhdWx0cyB0byBmYWxzZS5cbiAgICogSWYgZmFsc2UsIGV4aXN0aW5nIHNldHRpbmdzIHdpbGwgYmUgbWVyZ2VkIHdpdGggdGhlIG5ldyBzZXR0aW5ncyBwYXNzZWQgdG8gdGhpcyBmdW5jdGlvbi5cbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gV2lsbCBiZSBwYXNzZWQgYSBzaW5nbGUgb2JqZWN0IGFyZ3VtZW50IHdoaWNoIGNvbnRhaW5zIHRoZSBzYXZlZCBzZXR0aW5ncyBhcyBhIEpTT04gb2JqZWN0LlxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIHN1Y2Nlc3NJbmRleDogMSxcbiAgICBlcnJvckluZGV4OiAyLFxuICB9KVxuICBzYXZlKHNldHRpbmdzOiBhbnksIG92ZXJ3cml0ZT86IGJvb2xlYW4pOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBMb2FkcyB0aGUgY3VycmVudCBzZXR0aW5ncy5cbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gV2lsbCBiZSBwYXNzZWQgYSBzaW5nbGUgb2JqZWN0IGFyZ3VtZW50IHdoaWNoIGNvbnRhaW5zIHRoZSBzYXZlZCBzZXR0aW5ncyBhcyBhIEpTT04gb2JqZWN0LlxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBsb2FkKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVycyBhIGZ1bmN0aW9uIHdoaWNoIHdpbGwgYmUgY2FsbGVkIGlmL3doZW4gc2V0dGluZ3Mgb24gdGhlIGRldmljZSBoYXZlIGJlZW4gdXBkYXRlZCBmcm9tIHRoZSBjbG91ZC5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlciAtIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGludm9rZSB3aGVuIGRldmljZSBzZXR0aW5ncyBoYXZlIGJlZW4gdXBkYXRlZCBmcm9tIHRoZSBjbG91ZC5cbiAgICovXG4gIEBDb3Jkb3ZhKHsgc3luYzogdHJ1ZSB9KVxuICBvblJlc3RvcmUoaGFuZGxlcjogRnVuY3Rpb24pOiB2b2lkIHt9XG5cbiAgLyoqXG4gICAqIE91dHB1dHMgdmVyYm9zZSBsb2cgbWVzc2FnZXMgZnJvbSB0aGUgbmF0aXZlIHBsdWdpbiBjb21wb25lbnRzIHRvIHRoZSBKUyBjb25zb2xlLlxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgZW5hYmxlRGVidWcoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuO1xuICB9XG59XG4iXX0=