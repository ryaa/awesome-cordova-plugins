var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, checkAvailability } from '@awesome-cordova-plugins/core';
var AbbyyRTROriginal = /** @class */ (function (_super) {
    __extends(AbbyyRTROriginal, _super);
    function AbbyyRTROriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AbbyyRTROriginal.prototype.startTextCapture = function (options) {
        var _this = this;
        return (function () {
            if (checkAvailability(_this) === true) {
                return new Promise(function (resolve, reject) {
                    AbbyyRtrSdk.startTextCapture(function (result) {
                        if (result.error) {
                            reject(result);
                        }
                        else {
                            resolve(result);
                        }
                    }, options);
                });
            }
        })();
    };
    AbbyyRTROriginal.prototype.startDataCapture = function (options) {
        var _this = this;
        return (function () {
            if (checkAvailability(_this) === true) {
                return new Promise(function (resolve, reject) {
                    AbbyyRtrSdk.startDataCapture(function (result) {
                        if (result.error) {
                            reject(result);
                        }
                        else {
                            resolve(result);
                        }
                    }, options);
                });
            }
        })();
    };
    AbbyyRTROriginal.pluginName = "AbbyyRTR";
    AbbyyRTROriginal.plugin = "cordova-plugin-abbyy-rtr-sdk";
    AbbyyRTROriginal.pluginRef = "AbbyyRtrSdk";
    AbbyyRTROriginal.repo = "https://github.com/abbyysdk/RTR-SDK.Cordova";
    AbbyyRTROriginal.install = "ionic cordova plugin add cordova-plugin-abbyy-rtr-sdk";
    AbbyyRTROriginal.platforms = ["Android", "iOS"];
    return AbbyyRTROriginal;
}(AwesomeCordovaNativePlugin));
var AbbyyRTR = new AbbyyRTROriginal();
export { AbbyyRTR };
//# sourceMappingURL=data:application/json;base64,