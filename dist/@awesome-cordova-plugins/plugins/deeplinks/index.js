var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import { Observable } from 'rxjs';
var DeeplinksOriginal = /** @class */ (function (_super) {
    __extends(DeeplinksOriginal, _super);
    function DeeplinksOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DeeplinksOriginal.prototype.route = function (paths) { return cordova(this, "route", { "observable": true }, arguments); };
    DeeplinksOriginal.prototype.routeWithNavController = function (navController, paths, options) { return cordova(this, "routeWithNavController", { "observable": true }, arguments); };
    DeeplinksOriginal.pluginName = "Deeplinks";
    DeeplinksOriginal.plugin = "ionic-plugin-deeplinks";
    DeeplinksOriginal.pluginRef = "IonicDeeplink";
    DeeplinksOriginal.repo = "https://github.com/ionic-team/ionic-plugin-deeplinks";
    DeeplinksOriginal.install = "ionic cordova plugin add ionic-plugin-deeplinks --variable URL_SCHEME=myapp --variable DEEPLINK_SCHEME=https --variable DEEPLINK_HOST=example.com --variable ANDROID_PATH_PREFIX=/";
    DeeplinksOriginal.installVariables = ["URL_SCHEME", "DEEPLINK_SCHEME", "DEEPLINK_HOST", "ANDROID_PATH_PREFIX"];
    DeeplinksOriginal.platforms = ["Android", "Browser", "iOS"];
    return DeeplinksOriginal;
}(AwesomeCordovaNativePlugin));
var Deeplinks = new DeeplinksOriginal();
export { Deeplinks };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvZGVlcGxpbmtzL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUNBLE9BQU8sdUNBQStDLE1BQU0sK0JBQStCLENBQUM7QUFDNUYsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQzs7SUEyRkgsNkJBQTBCOzs7O0lBY3ZELHlCQUFLLGFBQUMsS0FBVTtJQTBCaEIsMENBQXNCLGFBQUMsYUFBa0IsRUFBRSxLQUFVLEVBQUUsT0FBeUI7Ozs7Ozs7O29CQXJJbEY7RUE2RitCLDBCQUEwQjtTQUE1QyxTQUFTIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29yZG92YSwgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bhd2Vzb21lLWNvcmRvdmEtcGx1Z2lucy9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuZXhwb3J0IGludGVyZmFjZSBEZWVwbGlua01hdGNoIHtcbiAgLyoqXG4gICAqIFRoZSByb3V0ZSBpbmZvIGZvciB0aGUgbWF0Y2hlZCByb3V0ZVxuICAgKi9cbiAgJHJvdXRlOiBhbnk7XG5cbiAgLyoqXG4gICAqIEFueSBhcmd1bWVudHMgcGFzc2VkIGVpdGhlciB0aHJvdWdoIHJvdXRlIHBhcmFtZXRlcnMgb3IgR0VUIHBhcmFtZXRlcnNcbiAgICovXG4gICRhcmdzOiBhbnk7XG5cbiAgLyoqXG4gICAqIFRoZSBkZWVwbGluayBvYmplY3QgcHJvY2Vzc2VkIGZyb20gdGhlIHBsdWdpbiwgYWxvbmcgd2l0aCBhbnlcbiAgICogYW55IGludGVybmFsIG5hdGl2ZSBkYXRhIGF2YWlsYWJsZSBhcyBcImV4dHJhc1wiIGF0IHRoZSB0aW1lXG4gICAqIHRoZSByb3V0ZSB3YXMgbWF0Y2hlZCAoZm9yIGV4YW1wbGUsIEZhY2Vib29rIHNvbWV0aW1lcyBhZGRzIGV4dHJhIGRhdGEpXG4gICAqL1xuICAkbGluazogYW55O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIERlZXBsaW5rT3B0aW9ucyB7XG4gIC8qKlxuICAgKiBTZXQgdGhlIG1hdGNoZWQgcm91dGUgYXMgcm9vdCBwYWdlIHVzaW5nIGBuYXZDdHJsLnNldFJvb3QoKWAgbWV0aG9kLlxuICAgKi9cbiAgcm9vdDogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBAbmFtZSBEZWVwbGlua3NcbiAqIEBwcmVtaWVyIGRlZXBsaW5rc1xuICogQGRlc2NyaXB0aW9uIFRoaXMgcGx1Z2luIGhhbmRsZXMgZGVlcGxpbmtzIG9uIGlPUyBhbmQgQW5kcm9pZCBmb3IgYm90aCBjdXN0b20gVVJMIHNjaGVtZSBsaW5rc1xuICogYW5kIFVuaXZlcnNhbCBBcHAgTGlua3MuXG4gKlxuICogUGxlYXNlIHJlYWQgdGhlIFtpb25pYyBwbHVnaW4gZGVlcGxpbmtzIGRvY3NdKGh0dHBzOi8vZ2l0aHViLmNvbS9pb25pYy10ZWFtL2lvbmljLXBsdWdpbi1kZWVwbGlua3MpIGZvciBpT1MgYW5kIEFuZHJvaWQgaW50ZWdyYXRpb24uXG4gKiBZb3UgbXVzdCBhZGQgYHVuaXZlcnNhbC1saW5rc2AgdG8geW91ciBgY29uZmlnLnhtbGAgYW5kIHNldCB1cCBBcHBsZSBBcHAgU2l0ZSBBc3NvY2lhdGlvbiAoQUFTQSkgZm9yIGlPUyBhbmQgQXNzZXQgTGlua3MgZm9yIEFuZHJvaWQuXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IERlZXBsaW5rcyB9IGZyb20gJ0Bhd2Vzb21lLWNvcmRvdmEtcGx1Z2lucy9kZWVwbGlua3Mvbmd4JztcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGRlZXBsaW5rczogRGVlcGxpbmtzKSB7IH1cbiAqXG4gKiB0aGlzLmRlZXBsaW5rcy5yb3V0ZSh7XG4gKiAgICAgICcvYWJvdXQtdXMnOiBBYm91dFBhZ2UsXG4gKiAgICAgICcvdW5pdmVyc2FsLWxpbmtzLXRlc3QnOiBBYm91dFBhZ2UsXG4gKiAgICAgICcvcHJvZHVjdHMvOnByb2R1Y3RJZCc6IFByb2R1Y3RQYWdlXG4gKiAgICB9KS5zdWJzY3JpYmUobWF0Y2ggPT4ge1xuICogICAgICAvLyBtYXRjaC4kcm91dGUgLSB0aGUgcm91dGUgd2UgbWF0Y2hlZCwgd2hpY2ggaXMgdGhlIG1hdGNoZWQgZW50cnkgZnJvbSB0aGUgYXJndW1lbnRzIHRvIHJvdXRlKClcbiAqICAgICAgLy8gbWF0Y2guJGFyZ3MgLSB0aGUgYXJncyBwYXNzZWQgaW4gdGhlIGxpbmtcbiAqICAgICAgLy8gbWF0Y2guJGxpbmsgLSB0aGUgZnVsbCBsaW5rIGRhdGFcbiAqICAgICAgY29uc29sZS5sb2coJ1N1Y2Nlc3NmdWxseSBtYXRjaGVkIHJvdXRlJywgbWF0Y2gpO1xuICogICAgfSwgbm9tYXRjaCA9PiB7XG4gKiAgICAgIC8vIG5vbWF0Y2guJGxpbmsgLSB0aGUgZnVsbCBsaW5rIGRhdGFcbiAqICAgICAgY29uc29sZS5lcnJvcignR290IGEgZGVlcGxpbmsgdGhhdCBkaWRuXFwndCBtYXRjaCcsIG5vbWF0Y2gpO1xuICogICAgfSk7XG4gKiBgYGBcbiAqXG4gKiBBbHRlcm5hdGl2ZWx5LCBpZiB5b3UncmUgdXNpbmcgSW9uaWMsIHRoZXJlJ3MgYSBjb252ZW5pZW5jZSBtZXRob2QgdGhhdCB0YWtlcyBhIHJlZmVyZW5jZSB0byBhIGBOYXZDb250cm9sbGVyYCBhbmQgaGFuZGxlc1xuICogdGhlIGFjdHVhbCBuYXZpZ2F0aW9uIGZvciB5b3U6XG4gKlxuICogYGBgdHlwZXNjcmlwdFxuICogdGhpcy5kZWVwbGlua3Mucm91dGVXaXRoTmF2Q29udHJvbGxlcih0aGlzLm5hdkNvbnRyb2xsZXIsIHtcbiAqICAgJy9hYm91dC11cyc6IEFib3V0UGFnZSxcbiAqICAgJy9wcm9kdWN0cy86cHJvZHVjdElkJzogUHJvZHVjdFBhZ2VcbiAqIH0pLnN1YnNjcmliZShtYXRjaCA9PiB7XG4gKiAgICAgLy8gbWF0Y2guJHJvdXRlIC0gdGhlIHJvdXRlIHdlIG1hdGNoZWQsIHdoaWNoIGlzIHRoZSBtYXRjaGVkIGVudHJ5IGZyb20gdGhlIGFyZ3VtZW50cyB0byByb3V0ZSgpXG4gKiAgICAgLy8gbWF0Y2guJGFyZ3MgLSB0aGUgYXJncyBwYXNzZWQgaW4gdGhlIGxpbmtcbiAqICAgICAvLyBtYXRjaC4kbGluayAtIHRoZSBmdWxsIGxpbmsgZGF0YVxuICogICAgIGNvbnNvbGUubG9nKCdTdWNjZXNzZnVsbHkgbWF0Y2hlZCByb3V0ZScsIG1hdGNoKTtcbiAqICAgfSwgbm9tYXRjaCA9PiB7XG4gKiAgICAgLy8gbm9tYXRjaC4kbGluayAtIHRoZSBmdWxsIGxpbmsgZGF0YVxuICogICAgIGNvbnNvbGUuZXJyb3IoJ0dvdCBhIGRlZXBsaW5rIHRoYXQgZGlkblxcJ3QgbWF0Y2gnLCBub21hdGNoKTtcbiAqICAgfSk7XG4gKiBgYGBcbiAqXG4gKiBTZWUgdGhlIFtJb25pYyBEZWVwbGlua3MgRGVtb10oaHR0cHM6Ly9naXRodWIuY29tL2lvbmljLXRlYW0vaW9uaWMyLWRlZXBsaW5rcy1kZW1vL2Jsb2IvbWFzdGVyL2FwcC9hcHAudHMpIGZvciBhbiBleGFtcGxlIG9mIGhvdyB0b1xuICogcmV0cmlldmUgdGhlIGBOYXZDb250cm9sbGVyYCByZWZlcmVuY2UgYXQgcnVudGltZS5cbiAqIEBpbnRlcmZhY2VzXG4gKiBEZWVwbGlua01hdGNoXG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnRGVlcGxpbmtzJyxcbiAgcGx1Z2luOiAnaW9uaWMtcGx1Z2luLWRlZXBsaW5rcycsXG4gIHBsdWdpblJlZjogJ0lvbmljRGVlcGxpbmsnLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL2lvbmljLXRlYW0vaW9uaWMtcGx1Z2luLWRlZXBsaW5rcycsXG4gIGluc3RhbGw6XG4gICAgJ2lvbmljIGNvcmRvdmEgcGx1Z2luIGFkZCBpb25pYy1wbHVnaW4tZGVlcGxpbmtzIC0tdmFyaWFibGUgVVJMX1NDSEVNRT1teWFwcCAtLXZhcmlhYmxlIERFRVBMSU5LX1NDSEVNRT1odHRwcyAtLXZhcmlhYmxlIERFRVBMSU5LX0hPU1Q9ZXhhbXBsZS5jb20gLS12YXJpYWJsZSBBTkRST0lEX1BBVEhfUFJFRklYPS8nLFxuICBpbnN0YWxsVmFyaWFibGVzOiBbJ1VSTF9TQ0hFTUUnLCAnREVFUExJTktfU0NIRU1FJywgJ0RFRVBMSU5LX0hPU1QnLCAnQU5EUk9JRF9QQVRIX1BSRUZJWCddLFxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdCcm93c2VyJywgJ2lPUyddLFxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBEZWVwbGlua3MgZXh0ZW5kcyBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiB7XG4gIC8qKlxuICAgKiBEZWZpbmUgYSBzZXQgb2YgcGF0aHMgdG8gbWF0Y2ggYWdhaW5zdCBpbmNvbWluZyBkZWVwbGlua3MuXG4gICAqXG4gICAqIEBwYXJhbSB7cGF0aHN9IHBhdGhzIERlZmluZSBhIHNldCBvZiBwYXRocyB0byBtYXRjaCBhZ2FpbnN0IGluY29taW5nIGRlZXBsaW5rcy5cbiAgICogcGF0aHMgdGFrZXMgYW4gb2JqZWN0IG9mIHRoZSBmb3JtIHsgJ3BhdGgnOiBkYXRhIH0uIElmIGEgZGVlcGxpbmtcbiAgICogbWF0Y2hlcyB0aGUgcGF0aCwgdGhlIHJlc3VsdGluZyBwYXRoLWRhdGEgcGFpciB3aWxsIGJlIHJldHVybmVkIGluIHRoZVxuICAgKiBwcm9taXNlIHJlc3VsdCB3aGljaCB5b3UgY2FuIHRoZW4gdXNlIHRvIG5hdmlnYXRlIGluIHRoZSBhcHAgYXMgeW91IHNlZSBmaXQuXG4gICAqIEByZXR1cm5zIHtPYnNlcnZhYmxlPERlZXBsaW5rTWF0Y2g+fSBSZXR1cm5zIGFuIE9ic2VydmFibGUgdGhhdCBpcyBjYWxsZWQgZWFjaCB0aW1lIGEgZGVlcGxpbmsgY29tZXMgdGhyb3VnaCwgYW5kXG4gICAqIGVycm9ycyBpZiBhIGRlZXBsaW5rIGNvbWVzIHRocm91Z2ggdGhhdCBkb2VzIG5vdCBtYXRjaCBhIGdpdmVuIHBhdGguXG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgb2JzZXJ2YWJsZTogdHJ1ZSxcbiAgfSlcbiAgcm91dGUocGF0aHM6IGFueSk6IE9ic2VydmFibGU8RGVlcGxpbmtNYXRjaD4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBUaGlzIGlzIGEgY29udmVuaWVuY2UgdmVyc2lvbiBvZiBgcm91dGVgIHRoYXQgdGFrZXMgYSByZWZlcmVuY2UgdG8gYSBOYXZDb250cm9sbGVyXG4gICAqIGZyb20gSW9uaWMsIG9yIGEgY3VzdG9tIGNsYXNzIHRoYXQgY29uZm9ybXMgdG8gdGhpcyBwcm90b2NvbDpcbiAgICpcbiAgICogTmF2Q29udHJvbGxlci5wdXNoID0gZnVuY3Rpb24oVmlldywgUGFyYW1zKXt9XG4gICAqXG4gICAqIFRoaXMgaGFuZGxlciB3aWxsIGF1dG9tYXRpY2FsbHkgbmF2aWdhdGUgd2hlbiBhIHJvdXRlIG1hdGNoZXMuIElmIHlvdSBuZWVkIGZpbmVyLWdyYWluZWRcbiAgICogY29udHJvbCBvdmVyIHRoZSBiZWhhdmlvciBvZiBhIG1hdGNoaW5nIGRlZXBsaW5rLCB1c2UgdGhlIHBsYWluIGByb3V0ZWAgbWV0aG9kLlxuICAgKlxuICAgKiBAcGFyYW0ge05hdn0gbmF2Q29udHJvbGxlciBEZWZpbmUgYSBzZXQgb2YgcGF0aHMgdG8gbWF0Y2ggYWdhaW5zdCBpbmNvbWluZyBkZWVwbGlua3MuXG4gICAqIHBhdGhzIHRha2VzIGFuIG9iamVjdCBvZiB0aGUgZm9ybSB7ICdwYXRoJzogZGF0YSB9LiBJZiBhIGRlZXBsaW5rXG4gICAqIG1hdGNoZXMgdGhlIHBhdGgsIHRoZSByZXN1bHRpbmcgcGF0aC1kYXRhIHBhaXIgd2lsbCBiZSByZXR1cm5lZCBpbiB0aGVcbiAgICogcHJvbWlzZSByZXN1bHQgd2hpY2ggeW91IGNhbiB0aGVuIHVzZSB0byBuYXZpZ2F0ZSBpbiB0aGUgYXBwIGFzIHlvdSBzZWUgZml0LlxuICAgKiBAcGFyYW0ge09iamVjdH0gcGF0aHNcbiAgICogQHBhcmFtIHtEZWVwbGlua09wdGlvbnN9IG9wdGlvbnNcbiAgICogQHJldHVybnMge09ic2VydmFibGU8RGVlcGxpbmtNYXRjaD59IFJldHVybnMgYW4gT2JzZXJ2YWJsZSB0aGF0IHJlc29sdmVzIGVhY2ggdGltZSBhIGRlZXBsaW5rIGNvbWVzIHRocm91Z2gsIGFuZFxuICAgKiBlcnJvcnMgaWYgYSBkZWVwbGluayBjb21lcyB0aHJvdWdoIHRoYXQgZG9lcyBub3QgbWF0Y2ggYSBnaXZlbiBwYXRoLlxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIG9ic2VydmFibGU6IHRydWUsXG4gIH0pXG4gIHJvdXRlV2l0aE5hdkNvbnRyb2xsZXIobmF2Q29udHJvbGxlcjogYW55LCBwYXRoczogYW55LCBvcHRpb25zPzogRGVlcGxpbmtPcHRpb25zKTogT2JzZXJ2YWJsZTxEZWVwbGlua01hdGNoPiB7XG4gICAgcmV0dXJuO1xuICB9XG59XG4iXX0=