import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import { Observable } from 'rxjs';
import * as i0 from "@angular/core";
var MusicControls = /** @class */ (function (_super) {
    __extends(MusicControls, _super);
    function MusicControls() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MusicControls.prototype.create = function (options) { return cordova(this, "create", {}, arguments); };
    MusicControls.prototype.destroy = function () { return cordova(this, "destroy", {}, arguments); };
    MusicControls.prototype.subscribe = function () { return cordova(this, "subscribe", { "observable": true }, arguments); };
    MusicControls.prototype.listen = function () { return cordova(this, "listen", { "sync": true }, arguments); };
    MusicControls.prototype.updateIsPlaying = function (isPlaying) { return cordova(this, "updateIsPlaying", {}, arguments); };
    MusicControls.prototype.updateElapsed = function (args) { return cordova(this, "updateElapsed", { "platforms": ["iOS"] }, arguments); };
    MusicControls.prototype.updateDismissable = function (dismissable) { return cordova(this, "updateDismissable", {}, arguments); };
    MusicControls.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: MusicControls, deps: null, target: i0.ɵɵFactoryTarget.Injectable });
    MusicControls.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: MusicControls });
    MusicControls.pluginName = "MusicControls";
    MusicControls.plugin = "cordova-plugin-music-controls2";
    MusicControls.pluginRef = "MusicControls";
    MusicControls.repo = "https://github.com/ghenry22/cordova-plugin-music-controls2";
    MusicControls.platforms = ["Android", "iOS", "Windows"];
    MusicControls = __decorate([], MusicControls);
    return MusicControls;
}(AwesomeCordovaNativePlugin));
export { MusicControls };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: MusicControls, decorators: [{
            type: Injectable
        }], propDecorators: { create: [], destroy: [], subscribe: [], listen: [], updateIsPlaying: [], updateElapsed: [], updateDismissable: [] } });
//# sourceMappingURL=data:application/json;base64,