var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import { Observable } from 'rxjs';
var MusicControlsOriginal = /** @class */ (function (_super) {
    __extends(MusicControlsOriginal, _super);
    function MusicControlsOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MusicControlsOriginal.prototype.create = function (options) { return cordova(this, "create", {}, arguments); };
    MusicControlsOriginal.prototype.destroy = function () { return cordova(this, "destroy", {}, arguments); };
    MusicControlsOriginal.prototype.subscribe = function () { return cordova(this, "subscribe", { "observable": true }, arguments); };
    MusicControlsOriginal.prototype.listen = function () { return cordova(this, "listen", { "sync": true }, arguments); };
    MusicControlsOriginal.prototype.updateIsPlaying = function (isPlaying) { return cordova(this, "updateIsPlaying", {}, arguments); };
    MusicControlsOriginal.prototype.updateElapsed = function (args) { return cordova(this, "updateElapsed", { "platforms": ["iOS"] }, arguments); };
    MusicControlsOriginal.prototype.updateDismissable = function (dismissable) { return cordova(this, "updateDismissable", {}, arguments); };
    MusicControlsOriginal.pluginName = "MusicControls";
    MusicControlsOriginal.plugin = "cordova-plugin-music-controls2";
    MusicControlsOriginal.pluginRef = "MusicControls";
    MusicControlsOriginal.repo = "https://github.com/ghenry22/cordova-plugin-music-controls2";
    MusicControlsOriginal.platforms = ["Android", "iOS", "Windows"];
    return MusicControlsOriginal;
}(AwesomeCordovaNativePlugin));
var MusicControls = new MusicControlsOriginal();
export { MusicControls };
//# sourceMappingURL=data:application/json;base64,