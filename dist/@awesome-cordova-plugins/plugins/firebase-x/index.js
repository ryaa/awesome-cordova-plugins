var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import { Observable } from 'rxjs';
var FirebaseXOriginal = /** @class */ (function (_super) {
    __extends(FirebaseXOriginal, _super);
    function FirebaseXOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FirebaseXOriginal.prototype.getToken = function () { return cordova(this, "getToken", {}, arguments); };
    FirebaseXOriginal.prototype.getId = function () { return cordova(this, "getId", {}, arguments); };
    FirebaseXOriginal.prototype.getCurrentUser = function () { return cordova(this, "getCurrentUser", {}, arguments); };
    FirebaseXOriginal.prototype.reloadCurrentUser = function () { return cordova(this, "reloadCurrentUser", {}, arguments); };
    FirebaseXOriginal.prototype.onTokenRefresh = function () { return cordova(this, "onTokenRefresh", { "observable": true }, arguments); };
    FirebaseXOriginal.prototype.getAPNSToken = function () { return cordova(this, "getAPNSToken", {}, arguments); };
    FirebaseXOriginal.prototype.onApnsTokenReceived = function () { return cordova(this, "onApnsTokenReceived", { "observable": true }, arguments); };
    FirebaseXOriginal.prototype.onMessageReceived = function () { return cordova(this, "onMessageReceived", { "observable": true }, arguments); };
    FirebaseXOriginal.prototype.grantPermission = function () { return cordova(this, "grantPermission", { "platforms": ["iOS"] }, arguments); };
    FirebaseXOriginal.prototype.hasPermission = function () { return cordova(this, "hasPermission", {}, arguments); };
    FirebaseXOriginal.prototype.unregister = function () { return cordova(this, "unregister", {}, arguments); };
    FirebaseXOriginal.prototype.setBadgeNumber = function (badgeNumber) { return cordova(this, "setBadgeNumber", {}, arguments); };
    FirebaseXOriginal.prototype.getBadgeNumber = function () { return cordova(this, "getBadgeNumber", {}, arguments); };
    FirebaseXOriginal.prototype.clearAllNotifications = function () { return cordova(this, "clearAllNotifications", { "platforms": ["Android"] }, arguments); };
    FirebaseXOriginal.prototype.subscribe = function (topic) { return cordova(this, "subscribe", {}, arguments); };
    FirebaseXOriginal.prototype.unsubscribe = function (topic) { return cordova(this, "unsubscribe", {}, arguments); };
    FirebaseXOriginal.prototype.isAutoInitEnabled = function () { return cordova(this, "isAutoInitEnabled", {}, arguments); };
    FirebaseXOriginal.prototype.setAutoInitEnabled = function (enabled) { return cordova(this, "setAutoInitEnabled", {}, arguments); };
    FirebaseXOriginal.prototype.createChannel = function (channelOptions) { return cordova(this, "createChannel", {}, arguments); };
    FirebaseXOriginal.prototype.setDefaultChannel = function (channelOptions) { return cordova(this, "setDefaultChannel", {}, arguments); };
    FirebaseXOriginal.prototype.deleteChannel = function (channelID) { return cordova(this, "deleteChannel", {}, arguments); };
    FirebaseXOriginal.prototype.listChannels = function () { return cordova(this, "listChannels", {}, arguments); };
    FirebaseXOriginal.prototype.setAnalyticsCollectionEnabled = function (enabled) { return cordova(this, "setAnalyticsCollectionEnabled", {}, arguments); };
    FirebaseXOriginal.prototype.setCrashlyticsCollectionEnabled = function (enabled) { return cordova(this, "setCrashlyticsCollectionEnabled", {}, arguments); };
    FirebaseXOriginal.prototype.setPerformanceCollectionEnabled = function (enabled) { return cordova(this, "setPerformanceCollectionEnabled", {}, arguments); };
    FirebaseXOriginal.prototype.logEvent = function (type, data) { return cordova(this, "logEvent", {}, arguments); };
    FirebaseXOriginal.prototype.setScreenName = function (name) { return cordova(this, "setScreenName", {}, arguments); };
    FirebaseXOriginal.prototype.setUserId = function (userId) { return cordova(this, "setUserId", {}, arguments); };
    FirebaseXOriginal.prototype.setUserProperty = function (name, value) { return cordova(this, "setUserProperty", {}, arguments); };
    FirebaseXOriginal.prototype.setCrashlyticsUserId = function (userId) { return cordova(this, "setCrashlyticsUserId", {}, arguments); };
    FirebaseXOriginal.prototype.sendCrash = function () { return cordova(this, "sendCrash", {}, arguments); };
    FirebaseXOriginal.prototype.logMessage = function (message) { return cordova(this, "logMessage", {}, arguments); };
    FirebaseXOriginal.prototype.logError = function (error, stackTrace) { return cordova(this, "logError", {}, arguments); };
    FirebaseXOriginal.prototype.verifyPhoneNumber = function (phoneNumber, timeOutDuration, fakeVerificationCode) { return cordova(this, "verifyPhoneNumber", { "callbackOrder": "reverse" }, arguments); };
    FirebaseXOriginal.prototype.setLanguageCode = function (lang) { return cordova(this, "setLanguageCode", {}, arguments); };
    FirebaseXOriginal.prototype.signInWithCredential = function (credential) { return cordova(this, "signInWithCredential", {}, arguments); };
    FirebaseXOriginal.prototype.createUserWithEmailAndPassword = function (email, password) { return cordova(this, "createUserWithEmailAndPassword", {}, arguments); };
    FirebaseXOriginal.prototype.signInUserWithEmailAndPassword = function (email, password) { return cordova(this, "signInUserWithEmailAndPassword", {}, arguments); };
    FirebaseXOriginal.prototype.signInUserWithCustomToken = function (customToken) { return cordova(this, "signInUserWithCustomToken", {}, arguments); };
    FirebaseXOriginal.prototype.signInUserAnonymously = function () { return cordova(this, "signInUserAnonymously", {}, arguments); };
    FirebaseXOriginal.prototype.authenticateUserWithGoogle = function (clientId) { return cordova(this, "authenticateUserWithGoogle", {}, arguments); };
    FirebaseXOriginal.prototype.authenticateUserWithApple = function (locale) { return cordova(this, "authenticateUserWithApple", { "callbackOrder": "reverse" }, arguments); };
    FirebaseXOriginal.prototype.linkUserWithCredential = function (credential, success, error) { return cordova(this, "linkUserWithCredential", {}, arguments); };
    FirebaseXOriginal.prototype.reauthenticateWithCredential = function (credential, success, error) { return cordova(this, "reauthenticateWithCredential", {}, arguments); };
    FirebaseXOriginal.prototype.isUserSignedIn = function () { return cordova(this, "isUserSignedIn", {}, arguments); };
    FirebaseXOriginal.prototype.signOutUser = function () { return cordova(this, "signOutUser", {}, arguments); };
    FirebaseXOriginal.prototype.updateUserProfile = function (profile) { return cordova(this, "updateUserProfile", {}, arguments); };
    FirebaseXOriginal.prototype.updateUserEmail = function (email) { return cordova(this, "updateUserEmail", {}, arguments); };
    FirebaseXOriginal.prototype.sendUserEmailVerification = function () { return cordova(this, "sendUserEmailVerification", {}, arguments); };
    FirebaseXOriginal.prototype.updateUserPassword = function (password) { return cordova(this, "updateUserPassword", {}, arguments); };
    FirebaseXOriginal.prototype.sendUserPasswordResetEmail = function (email) { return cordova(this, "sendUserPasswordResetEmail", {}, arguments); };
    FirebaseXOriginal.prototype.deleteUser = function () { return cordova(this, "deleteUser", {}, arguments); };
    FirebaseXOriginal.prototype.registerAuthStateChangeListener = function (fn) { return cordova(this, "registerAuthStateChangeListener", {}, arguments); };
    FirebaseXOriginal.prototype.fetch = function (cacheExpirationSeconds) { return cordova(this, "fetch", {}, arguments); };
    FirebaseXOriginal.prototype.activateFetched = function () { return cordova(this, "activateFetched", {}, arguments); };
    FirebaseXOriginal.prototype.getValue = function (key) { return cordova(this, "getValue", {}, arguments); };
    FirebaseXOriginal.prototype.getByteArray = function (key) { return cordova(this, "getByteArray", {}, arguments); };
    FirebaseXOriginal.prototype.getInfo = function () { return cordova(this, "getInfo", {}, arguments); };
    FirebaseXOriginal.prototype.setConfigSettings = function (settings) { return cordova(this, "setConfigSettings", {}, arguments); };
    FirebaseXOriginal.prototype.setDefaults = function (settings) { return cordova(this, "setDefaults", {}, arguments); };
    FirebaseXOriginal.prototype.startTrace = function (name) { return cordova(this, "startTrace", {}, arguments); };
    FirebaseXOriginal.prototype.incrementCounter = function (name, counterName) { return cordova(this, "incrementCounter", {}, arguments); };
    FirebaseXOriginal.prototype.stopTrace = function (name) { return cordova(this, "stopTrace", {}, arguments); };
    FirebaseXOriginal.prototype.addDocumentToFirestoreCollection = function (document, collection, success, error) { return cordova(this, "addDocumentToFirestoreCollection", {}, arguments); };
    FirebaseXOriginal.prototype.setDocumentInFirestoreCollection = function (documentId, document, collection, success, error) { return cordova(this, "setDocumentInFirestoreCollection", {}, arguments); };
    FirebaseXOriginal.prototype.updateDocumentInFirestoreCollection = function (documentId, document, collection, success, error) { return cordova(this, "updateDocumentInFirestoreCollection", {}, arguments); };
    FirebaseXOriginal.prototype.deleteDocumentFromFirestoreCollection = function (documentId, collection, success, error) { return cordova(this, "deleteDocumentFromFirestoreCollection", {}, arguments); };
    FirebaseXOriginal.prototype.fetchDocumentInFirestoreCollection = function (documentId, collection, success, error) { return cordova(this, "fetchDocumentInFirestoreCollection", {}, arguments); };
    FirebaseXOriginal.prototype.fetchFirestoreCollection = function (collection, success, error) { return cordova(this, "fetchFirestoreCollection", {}, arguments); };
    FirebaseXOriginal.pluginName = "FirebaseX";
    FirebaseXOriginal.plugin = "cordova-plugin-firebasex";
    FirebaseXOriginal.pluginRef = "FirebasePlugin";
    FirebaseXOriginal.repo = "https://github.com/dpa99c/cordova-plugin-firebasex";
    FirebaseXOriginal.platforms = ["Android", "iOS"];
    return FirebaseXOriginal;
}(AwesomeCordovaNativePlugin));
var FirebaseX = new FirebaseXOriginal();
export { FirebaseX };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvZmlyZWJhc2UteC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFDQSxPQUFPLHVDQUErQyxNQUFNLCtCQUErQixDQUFDO0FBQzVGLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7O0lBd0tILDZCQUEwQjs7OztJQU92RCw0QkFBUTtJQVVSLHlCQUFLO0lBVUwsa0NBQWM7SUFVZCxxQ0FBaUI7SUFZakIsa0NBQWM7SUFXZCxnQ0FBWTtJQWNaLHVDQUFtQjtJQWNuQixxQ0FBaUI7SUFZakIsbUNBQWU7SUFVZixpQ0FBYTtJQVFiLDhCQUFVO0lBV1Ysa0NBQWMsYUFBQyxXQUFtQjtJQVVsQyxrQ0FBYztJQVlkLHlDQUFxQjtJQVdyQiw2QkFBUyxhQUFDLEtBQWE7SUFXdkIsK0JBQVcsYUFBQyxLQUFhO0lBUXpCLHFDQUFpQjtJQVdqQixzQ0FBa0IsYUFBQyxPQUFnQjtJQWVuQyxpQ0FBYSxhQUFDLGNBQStCO0lBYzdDLHFDQUFpQixhQUFDLGNBQStCO0lBWWpELGlDQUFhLGFBQUMsU0FBaUI7SUFXL0IsZ0NBQVk7SUFXWixpREFBNkIsYUFBQyxPQUFnQjtJQVc5QyxtREFBK0IsYUFBQyxPQUFnQjtJQVdoRCxtREFBK0IsYUFBQyxPQUFnQjtJQVloRCw0QkFBUSxhQUFDLElBQVksRUFBRSxJQUFTO0lBV2hDLGlDQUFhLGFBQUMsSUFBWTtJQVcxQiw2QkFBUyxhQUFDLE1BQWM7SUFZeEIsbUNBQWUsYUFBQyxJQUFZLEVBQUUsS0FBYTtJQWdCM0Msd0NBQW9CLGFBQUMsTUFBYztJQVluQyw2QkFBUztJQVlULDhCQUFVLGFBQUMsT0FBZTtJQWdCMUIsNEJBQVEsYUFBQyxLQUFhLEVBQUUsVUFBbUI7SUErQjNDLHFDQUFpQixhQUFDLFdBQW1CLEVBQUUsZUFBdUIsRUFBRSxvQkFBNkI7SUFVN0YsbUNBQWUsYUFBQyxJQUFZO0lBVzVCLHdDQUFvQixhQUFDLFVBQWtCO0lBV3ZDLGtEQUE4QixhQUFDLEtBQWEsRUFBRSxRQUFnQjtJQVc5RCxrREFBOEIsYUFBQyxLQUFhLEVBQUUsUUFBZ0I7SUFVOUQsNkNBQXlCLGFBQUMsV0FBbUI7SUFRN0MseUNBQXFCO0lBVXJCLDhDQUEwQixhQUFDLFFBQWdCO0lBWTNDLDZDQUF5QixhQUFDLE1BQWU7SUFhekMsMENBQXNCLGFBQUMsVUFBa0IsRUFBRSxPQUFtQixFQUFFLEtBQTRCO0lBWTVGLGdEQUE0QixhQUFDLFVBQWUsRUFBRSxPQUFtQixFQUFFLEtBQTRCO0lBUS9GLGtDQUFjO0lBUWQsK0JBQVc7SUFZWCxxQ0FBaUIsYUFBQyxPQUEyQztJQVU3RCxtQ0FBZSxhQUFDLEtBQWE7SUFTN0IsNkNBQXlCO0lBVXpCLHNDQUFrQixhQUFDLFFBQWdCO0lBV25DLDhDQUEwQixhQUFDLEtBQWE7SUFReEMsOEJBQVU7SUFVVixtREFBK0IsYUFBQyxFQUFPO0lBV3ZDLHlCQUFLLGFBQUMsc0JBQStCO0lBVXJDLG1DQUFlO0lBV2YsNEJBQVEsYUFBQyxHQUFXO0lBV3BCLGdDQUFZLGFBQUMsR0FBVztJQVV4QiwyQkFBTztJQVdQLHFDQUFpQixhQUFDLFFBQWE7SUFXL0IsK0JBQVcsYUFBQyxRQUFhO0lBV3pCLDhCQUFVLGFBQUMsSUFBWTtJQWN2QixvQ0FBZ0IsYUFBQyxJQUFZLEVBQUUsV0FBbUI7SUFXbEQsNkJBQVMsYUFBQyxJQUFZO0lBYXRCLG9EQUFnQyxhQUM5QixRQUFnQixFQUNoQixVQUFrQixFQUNsQixPQUE2QixFQUM3QixLQUE0QjtJQWU5QixvREFBZ0MsYUFDOUIsVUFBa0IsRUFDbEIsUUFBZ0IsRUFDaEIsVUFBa0IsRUFDbEIsT0FBbUIsRUFDbkIsS0FBNEI7SUFpQjlCLHVEQUFtQyxhQUNqQyxVQUFrQixFQUNsQixRQUFnQixFQUNoQixVQUFrQixFQUNsQixPQUFtQixFQUNuQixLQUE0QjtJQWU5Qix5REFBcUMsYUFDbkMsVUFBa0IsRUFDbEIsVUFBa0IsRUFDbEIsT0FBbUIsRUFDbkIsS0FBNEI7SUFlOUIsc0RBQWtDLGFBQ2hDLFVBQWtCLEVBQ2xCLFVBQWtCLEVBQ2xCLE9BQTJCLEVBQzNCLEtBQTRCO0lBYzlCLDRDQUF3QixhQUN0QixVQUFrQixFQUNsQixPQUE0QixFQUM1QixLQUE0Qjs7Ozs7O29CQXYrQmhDO0VBMEsrQiwwQkFBMEI7U0FBNUMsU0FBUyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFBsdWdpbiwgQ29yZG92YSwgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4gfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUNoYW5uZWxPcHRpb25zIHtcbiAgLyoqXG4gICAqIENoYW5uZWwgSUQgLSBtdXN0IGJlIHVuaXF1ZSBwZXIgYXBwIHBhY2thZ2VcbiAgICovXG4gIGlkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIENoYW5uZWwgbmFtZS4gRGVmYXVsdDogZW1wdHkgc3RyaW5nXG4gICAqL1xuICBuYW1lPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBDaGFubmVsIGRlc2NyaXB0aW9uLiBEZWZhdWx0OiBlbXB0eSBzdHJpbmdcbiAgICovXG4gIGRlc2NyaXB0aW9uPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgc291bmQgdG8gcGxheSBvbmNlIGEgcHVzaCBjb21lcy4gRGVmYXVsdCB2YWx1ZTogJ2RlZmF1bHQnXG4gICAqIFZhbHVlcyBhbGxvd2VkOlxuICAgKiAnZGVmYXVsdCcgLSBwbGF5cyB0aGUgZGVmYXVsdCBub3RpZmljYXRpb24gc291bmRcbiAgICogJ3Jpbmd0b25lJyAtIHBsYXlzIHRoZSBjdXJyZW50bHkgc2V0IHJpbmd0b25lXG4gICAqICdmYWxzZScgLSBzaWxlbnQ7IGRvbid0IHBsYXkgYW55IHNvdW5kXG4gICAqIGZpbGVuYW1lIC0gdGhlIGZpbGVuYW1lIG9mIHRoZSBzb3VuZCBmaWxlIGxvY2F0ZWQgaW4gJy9yZXMvcmF3JyB3aXRob3V0IGZpbGUgZXh0ZW5zaW9uIChteXNvdW5kLm1wMyAtPiBteXNvdW5kKVxuICAgKi9cbiAgc291bmQ/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFZpYnJhdGUgb24gbmV3IG5vdGlmaWNhdGlvbi4gRGVmYXVsdCB2YWx1ZTogdHJ1ZVxuICAgKiBQb3NzaWJsZSB2YWx1ZXM6XG4gICAqIEJvb2xlYW4gLSB2aWJyYXRlIG9yIG5vdFxuICAgKiBBcnJheSAtIHZpYnJhdGlvbiBwYXR0ZXJuIC0gZS5nLiBbNTAwLCAyMDAsIDUwMF0gLSBtaWxsaXNlY29uZHMgdmlicmF0ZSwgbWlsbGlzZWNvbmRzIHBhdXNlLCB2aWJyYXRlLCBwYXVzZSwgZXRjLlxuICAgKi9cbiAgdmlicmF0aW9uPzogYm9vbGVhbiB8IG51bWJlcltdO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIGJsaW5rIHRoZSBMRURcbiAgICovXG4gIGxpZ2h0PzogYm9vbGVhbjtcblxuICAvKipcbiAgICogTEVEIGNvbG9yIGluIEFSR0IgZm9ybWF0IC0gdGhpcyBleGFtcGxlIEJMVUUgY29sb3IuIElmIHNldCB0byAtMSwgbGlnaHQgY29sb3Igd2lsbCBiZSBkZWZhdWx0LiBEZWZhdWx0IHZhbHVlOiAtMS5cbiAgICovXG4gIGxpZ2h0Q29sb3I/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEltcG9ydGFuY2UgLSBpbnRlZ2VyIGZyb20gMCB0byA0LiBEZWZhdWx0IHZhbHVlOiA0XG4gICAqIDAgLSBub25lIC0gbm8gc291bmQsIGRvZXMgbm90IHNob3cgaW4gdGhlIHNoYWRlXG4gICAqIDEgLSBtaW4gLSBubyBzb3VuZCwgb25seSBzaG93cyBpbiB0aGUgc2hhZGUsIGJlbG93IHRoZSBmb2xkXG4gICAqIDIgLSBsb3cgLSBubyBzb3VuZCwgc2hvd3MgaW4gdGhlIHNoYWRlLCBhbmQgcG90ZW50aWFsbHkgaW4gdGhlIHN0YXR1cyBiYXJcbiAgICogMyAtIGRlZmF1bHQgLSBzaG93cyBldmVyeXdoZXJlLCBtYWtlcyBub2lzZSwgYnV0IGRvZXMgbm90IHZpc3VhbGx5IGludHJ1ZGVcbiAgICogNCAtIGhpZ2ggLSBzaG93cyBldmVyeXdoZXJlLCBtYWtlcyBub2lzZSBhbmQgcGVla3NcbiAgICovXG4gIGltcG9ydGFuY2U/OiAwIHwgMSB8IDIgfCAzIHwgNDtcblxuICAvKipcbiAgICogU2hvdyBiYWRnZSBvdmVyIGFwcCBpY29uIHdoZW4gbm9uIGhhbmRsZWQgcHVzaGVzIGFyZSBwcmVzZW50LiBEZWZhdWx0IHZhbHVlOiB0cnVlXG4gICAqL1xuICBiYWRnZT86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIFNob3cgbWVzc2FnZSBvbiBsb2NrZWQgc2NyZWVuLiBEZWZhdWx0IHZhbHVlOiAxXG4gICAqIFBvc3NpYmxlIHZhbHVlcyAoZGVmYXVsdCAxKTpcbiAgICogLTEgLSBzZWNyZXQgLSBEbyBub3QgcmV2ZWFsIGFueSBwYXJ0IG9mIHRoZSBub3RpZmljYXRpb24gb24gYSBzZWN1cmUgbG9ja3NjcmVlbi5cbiAgICogMCAtIHByaXZhdGUgLSBTaG93IHRoZSBub3RpZmljYXRpb24gb24gYWxsIGxvY2tzY3JlZW5zLCBidXQgY29uY2VhbCBzZW5zaXRpdmUgb3IgcHJpdmF0ZSBpbmZvcm1hdGlvbiBvbiBzZWN1cmUgbG9ja3NjcmVlbnMuXG4gICAqIDEgLSBwdWJsaWMgLSBTaG93IHRoZSBub3RpZmljYXRpb24gaW4gaXRzIGVudGlyZXR5IG9uIGFsbCBsb2Nrc2NyZWVucy5cbiAgICovXG4gIHZpc2liaWxpdHk/OiAtMSB8IDAgfCAxO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEZpcmViYXNlVXNlciB7XG4gIC8qKlxuICAgKiBJRCB0b2tlblxuICAgKi9cbiAgaWRUb2tlbj86IHN0cmluZztcblxuICAvKipcbiAgICogUHJvdmlkZXIgSURcbiAgICovXG4gIHByb3ZpZGVySWQ/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFVJRFxuICAgKi9cbiAgdWlkPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBwaG90byB1cmxcbiAgICovXG4gIHBob3RvVXJsPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBwaG9uZSBudW1iZXJcbiAgICovXG4gIHBob25lTnVtYmVyPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBpcyBlbWFpbCB2ZXJpZmllZFxuICAgKi9cbiAgZW1haWxJc1ZlcmlmaWVkPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogZW1haWxcbiAgICovXG4gIGVtYWlsPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBuYW1lXG4gICAqL1xuICBuYW1lPzogc3RyaW5nO1xufVxuZXhwb3J0IGludGVyZmFjZSBNZXNzYWdlUGF5bG9hZEFwcyB7XG4gIGFsZXJ0Pzoge1xuICAgIHRpdGxlOiBzdHJpbmc7XG4gICAgYm9keTogc3RyaW5nO1xuICB9XG59XG5leHBvcnQgaW50ZXJmYWNlIE1lc3NhZ2VQYXlsb2FkIHtcbiAgdGl0bGU/OiBzdHJpbmc7XG4gIGJvZHk/OiBzdHJpbmc7XG4gIGNvbGxhcHNlX2tleT86IHN0cmluZztcbiAgZnJvbT86IHN0cmluZztcbiAgaWQ/OiBzdHJpbmc7XG4gIG1lc3NhZ2VUeXBlPzogc3RyaW5nO1xuICBub3RpZmljYXRpb25fZm9yZWdyb3VuZD86IHN0cmluZztcbiAgc2VudF90aW1lPzogc3RyaW5nO1xuICBzaG93X25vdGlmaWNhdGlvbj86IHN0cmluZztcbiAgdHRsPzogc3RyaW5nO1xuICB0YXA/OiAnYmFja2dyb3VuZCcgfCAnZm9yZWdyb3VuZCc7XG4gIGFwcz86IE1lc3NhZ2VQYXlsb2FkQXBzO1xufVxuLyoqXG4gKiBAbmFtZSBGaXJlYmFzZSBYXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoaXMgcGx1Z2luIGJyaW5ncyBwdXNoIG5vdGlmaWNhdGlvbnMsIGFuYWx5dGljcywgZXZlbnQgdHJhY2tpbmcsIGNyYXNoIHJlcG9ydGluZyBhbmQgbW9yZSBmcm9tIEdvb2dsZSBGaXJlYmFzZSB0byB5b3VyIENvcmRvdmEgcHJvamVjdCEgQW5kcm9pZCBhbmQgaU9TIHN1cHBvcnRlZC5cbiAqIEl0IGlzIGEgbWFpbnRhaW5lZCBmb3JrIGZyb20gdW5tYWludGFpbmVkIGlvbmljLW5hdml0ZSBwbHVnaW4gY2FsbGVkIEZpcmViYXNlLlxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBGaXJlYmFzZVggfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvZmlyZWJhc2UteC9uZ3gnO1xuICpcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGZpcmViYXNlWDogRmlyZWJhc2VYKSB7IH1cbiAqXG4gKiAuLi5cbiAqXG4gKlxuICogdGhpcy5maXJlYmFzZVguZ2V0VG9rZW4oKVxuICogICAudGhlbih0b2tlbiA9PiBjb25zb2xlLmxvZyhgVGhlIHRva2VuIGlzICR7dG9rZW59YCkpIC8vIHNhdmUgdGhlIHRva2VuIHNlcnZlci1zaWRlIGFuZCB1c2UgaXQgdG8gcHVzaCBub3RpZmljYXRpb25zIHRvIHRoaXMgZGV2aWNlXG4gKiAgIC5jYXRjaChlcnJvciA9PiBjb25zb2xlLmVycm9yKCdFcnJvciBnZXR0aW5nIHRva2VuJywgZXJyb3IpKTtcbiAqXG4gKiB0aGlzLmZpcmViYXNlWC5vbk1lc3NhZ2VSZWNlaXZlZCgpXG4gKiAgIC5zdWJzY3JpYmUoZGF0YSA9PiBjb25zb2xlLmxvZyhgVXNlciBvcGVuZWQgYSBub3RpZmljYXRpb24gJHtkYXRhfWApKTtcbiAqXG4gKiB0aGlzLmZpcmViYXNlWC5vblRva2VuUmVmcmVzaCgpXG4gKiAgIC5zdWJzY3JpYmUoKHRva2VuOiBzdHJpbmcpID0+IGNvbnNvbGUubG9nKGBHb3QgYSBuZXcgdG9rZW4gJHt0b2tlbn1gKSk7XG4gKiBgYGBcbiAqIEBpbnRlcmZhY2VzXG4gKiBJQ2hhbm5lbE9wdGlvbnNcbiAqL1xuQFBsdWdpbih7XG4gIHBsdWdpbk5hbWU6ICdGaXJlYmFzZVgnLFxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1maXJlYmFzZXgnLFxuICBwbHVnaW5SZWY6ICdGaXJlYmFzZVBsdWdpbicsXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vZHBhOTljL2NvcmRvdmEtcGx1Z2luLWZpcmViYXNleCcsXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddLFxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBGaXJlYmFzZVggZXh0ZW5kcyBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiB7XG4gIC8qKlxuICAgKiBHZXQgdGhlIGN1cnJlbnQgRkNNIHRva2VuLlxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxudWxsIHwgc3RyaW5nPn0gTm90ZSB0aGF0IHRva2VuIHdpbGwgYmUgbnVsbCBpZiBpdCBoYXMgbm90IGJlZW4gZXN0YWJsaXNoZWQgeWV0XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGdldFRva2VuKCk6IFByb21pc2U8bnVsbCB8IHN0cmluZz4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGFwcCBpbnN0YW5jZSBJRCAoYW4gY29uc3RhbnQgSUQgd2hpY2ggcGVyc2lzdHMgYXMgbG9uZyBhcyB0aGUgYXBwIGlzIG5vdCB1bmluc3RhbGxlZC9yZWluc3RhbGxlZClcbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2U8bnVsbCB8IHN0cmluZz59IE5vdGUgdGhhdCBJRCB3aWxsIGJlIG51bGwgaWYgaXQgaGFzIG5vdCBiZWVuIGVzdGFibGlzaGVkIHlldFxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBnZXRJZCgpOiBQcm9taXNlPG51bGwgfCBzdHJpbmc+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBjdXJyZW50IEZDTSB1c2VyLlxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxGaXJlYmFzZVVzZXIgfCBzdHJpbmc+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBnZXRDdXJyZW50VXNlcigpOiBQcm9taXNlPEZpcmViYXNlVXNlciB8IHN0cmluZz4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWxvYWQgdGhlIGN1cnJlbnQgRkNNIHVzZXIuXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPEZpcmViYXNlVXNlciB8IHN0cmluZz59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHJlbG9hZEN1cnJlbnRVc2VyKCk6IFByb21pc2U8RmlyZWJhc2VVc2VyIHwgc3RyaW5nPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBub3RpZmllZCB3aGVuIGEgdG9rZW4gaXMgcmVmcmVzaGVkLlxuICAgKlxuICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIG9ic2VydmFibGU6IHRydWUsXG4gIH0pXG4gIG9uVG9rZW5SZWZyZXNoKCk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIGlPUyBvbmx5LlxuICAgKiBHZXQgdGhlIEFQTlMgdG9rZW4gYWxsb2NhdGVkIGZvciB0aGlzIGFwcCBpbnN0YWxsLlxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxudWxsIHwgc3RyaW5nPn0gTm90ZSB0aGF0IHRva2VuIHdpbGwgYmUgbnVsbCBpZiBpdCBoYXMgbm90IGJlZW4gZXN0YWJsaXNoZWQgeWV0XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGdldEFQTlNUb2tlbigpOiBQcm9taXNlPG51bGwgfCBzdHJpbmc+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogaU9TIG9ubHkuXG4gICAqIFJlZ2lzdGVycyBhIGhhbmRsZXIgdG8gY2FsbCB3aGVuIHRoZSBBUE5TIHRva2VuIGlzIGFsbG9jYXRlZC5cbiAgICogVGhpcyB3aWxsIGJlIGNhbGxlZCBvbmNlIHdoZW4gcmVtb3RlIG5vdGlmaWNhdGlvbnMgcGVybWlzc2lvbiBoYXMgYmVlbiBncmFudGVkIGJ5IHRoZSB1c2VyIGF0IHJ1bnRpbWUuXG4gICAqXG4gICAqIEByZXR1cm5zIHtPYnNlcnZhYmxlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgb2JzZXJ2YWJsZTogdHJ1ZSxcbiAgfSlcbiAgb25BcG5zVG9rZW5SZWNlaXZlZCgpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWdpc3RlcnMgYSBjYWxsYmFjayBmdW5jdGlvbiB0byBpbnZva2Ugd2hlbjpcbiAgICogLSBhIG5vdGlmaWNhdGlvbiBvciBkYXRhIG1lc3NhZ2UgaXMgcmVjZWl2ZWQgYnkgdGhlIGFwcFxuICAgKiAtIGEgc3lzdGVtIG5vdGlmaWNhdGlvbiBpcyB0YXBwZWQgYnkgdGhlIHVzZXJcbiAgICpcbiAgICogQHJldHVybnMge09ic2VydmFibGU8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBvYnNlcnZhYmxlOiB0cnVlLFxuICB9KVxuICBvbk1lc3NhZ2VSZWNlaXZlZDxUID0geyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfT4oKTogT2JzZXJ2YWJsZTxNZXNzYWdlUGF5bG9hZCAmIFQ+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogR3JhbnQgcGVybWlzc2lvbiB0byByZWNlaXZlIHB1c2ggbm90aWZpY2F0aW9ucyAod2lsbCB0cmlnZ2VyIHByb21wdCkgYW5kIHJldHVybiBoYXNQZXJtaXNzaW9uOiB0cnVlLiBpT1Mgb25seSAoQW5kcm9pZCB3aWxsIGFsd2F5cyByZXR1cm4gdHJ1ZSkuXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgcGxhdGZvcm1zOiBbJ2lPUyddLFxuICB9KVxuICBncmFudFBlcm1pc3Npb24oKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgcGVybWlzc2lvbiB0byByZWNlaXZlIHB1c2ggbm90aWZpY2F0aW9ucyBhbmQgcmV0dXJuIGhhc1Blcm1pc3Npb246IHRydWUuIGlPUyBvbmx5IChBbmRyb2lkIHdpbGwgYWx3YXlzIHJldHVybiB0cnVlKS5cbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2U8Ym9vbGVhbj59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGhhc1Blcm1pc3Npb24oKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFVucmVnaXN0ZXIgZnJvbSBmaXJlYmFzZSwgdXNlZCB0byBzdG9wIHJlY2VpdmluZyBwdXNoIG5vdGlmaWNhdGlvbnMuIENhbGwgdGhpcyB3aGVuIHlvdSBsb2dvdXQgdXNlciBmcm9tIHlvdXIgYXBwLlxuICAgKi9cbiAgQENvcmRvdmEoKVxuICB1bnJlZ2lzdGVyKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCBhIG51bWJlciBvbiB0aGUgaWNvbiBiYWRnZS4gU2V0IDAgdG8gY2xlYXIgdGhlIGJhZGdlXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBiYWRnZU51bWJlclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBzZXRCYWRnZU51bWJlcihiYWRnZU51bWJlcjogbnVtYmVyKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogR2V0IGljb24gYmFkZ2UgbnVtYmVyLlxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBnZXRCYWRnZU51bWJlcigpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbGVhciBhbGwgcGVuZGluZyBub3RpZmljYXRpb25zIGZyb20gdGhlIGRyYXdlci5cbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCddLFxuICB9KVxuICBjbGVhckFsbE5vdGlmaWNhdGlvbnMoKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogU3Vic2NyaWJlIHRvIGEgdG9waWMuIFRvcGljIG1lc3NhZ2luZyBhbGxvd3MgeW91IHRvIHNlbmQgYSBtZXNzYWdlIHRvIG11bHRpcGxlIGRldmljZXMgdGhhdCBoYXZlIG9wdGVkIGluIHRvIGEgcGFydGljdWxhciB0b3BpYy5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRvcGljXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHN1YnNjcmliZSh0b3BpYzogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogVW5zdWJzY3JpYmUgZnJvbSBhIHRvcGljLiBUaGlzIHdpbGwgc3RvcCB5b3UgcmVjZWl2aW5nIG1lc3NhZ2VzIGZvciB0aGF0IHRvcGljLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdG9waWNcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgdW5zdWJzY3JpYmUodG9waWM6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIEluZGljYXRlcyB3aGV0aGVyIGF1dG9pbml0IGlzIGN1cnJlbnRseSBlbmFibGVkLiBJZiBzbywgbmV3IEZDTSB0b2tlbnMgd2lsbCBiZSBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlZC5cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgaXNBdXRvSW5pdEVuYWJsZWQoKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgd2hldGhlciB0byBhdXRvaW5pdCBuZXcgRkNNIHRva2Vucy4gQnkgZGVmYXVsdCwgYSBuZXcgdG9rZW4gd2lsbCBiZSBnZW5lcmF0ZWQgYXMgc29vbiBhcyB0aGUgb2xkIG9uZSBpcyByZW1vdmVkLlxuICAgKiBUbyBwcmV2ZW50IGEgbmV3IHRva2VuIGJlaW5nIGdlbmVyYXRlZCwgYnkgc3VyZSB0byBkaXNhYmxlIGF1dG9pbml0IHVzaW5nIHNldEF1dG9Jbml0RW5hYmxlZCgpIGJlZm9yZSBjYWxsaW5nIHVucmVnaXN0ZXIoKS5cbiAgICpcbiAgICogQHBhcmFtIGVuYWJsZWRcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgc2V0QXV0b0luaXRFbmFibGVkKGVuYWJsZWQ6IGJvb2xlYW4pOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBBbmRyb2lkIDgrIG9ubHkuIENyZWF0ZXMgYSBjdXN0b20gY2hhbm5lbCB0byBiZSB1c2VkIGJ5IG5vdGlmaWNhdGlvbiBtZXNzYWdlcyB3aGljaCBoYXZlIHRoZSBjaGFubmVsIHByb3BlcnR5IHNldCBpbiB0aGUgbWVzc2FnZSBwYXlsb2FkIHRvIHRoZSBpZCBvZiB0aGUgY3JlYXRlZCBjaGFubmVsOlxuICAgKiAtIGZvciBiYWNrZ3JvdW5kIChzeXN0ZW0pIG5vdGlmaWNhdGlvbnM6IGFuZHJvaWQubm90aWZpY2F0aW9uLmNoYW5uZWxfaWRcbiAgICogLSBmb3IgZm9yZWdyb3VuZC9kYXRhIG5vdGlmaWNhdGlvbnM6IGRhdGEubm90aWZpY2F0aW9uX2FuZHJvaWRfY2hhbm5lbF9pZFxuICAgKlxuICAgKiBDYWxsaW5nIG9uIEFuZHJvaWQgNyBvciBiZWxvdyBvciBhbm90aGVyIHBsYXRmb3JtIHdpbGwgaGF2ZSBubyBlZmZlY3QuXG4gICAqXG4gICAqIEBwYXJhbSB7SUNoYW5uZWxPcHRpb25zfSBjaGFubmVsT3B0aW9uc1xuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBjcmVhdGVDaGFubmVsKGNoYW5uZWxPcHRpb25zOiBJQ2hhbm5lbE9wdGlvbnMpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBBbmRyb2lkIDgrIG9ubHkuIE92ZXJyaWRlcyB0aGUgcHJvcGVydGllcyBmb3IgdGhlIGRlZmF1bHQgY2hhbm5lbC5cbiAgICogVGhlIGRlZmF1bHQgY2hhbm5lbCBpcyB1c2VkIGlmIG5vIG90aGVyIGNoYW5uZWwgZXhpc3RzIG9yIGlzIHNwZWNpZmllZCBpbiB0aGUgbm90aWZpY2F0aW9uLlxuICAgKiBBbnkgb3B0aW9ucyBub3Qgc3BlY2lmaWVkIHdpbGwgbm90IGJlIG92ZXJyaWRkZW4uIFNob3VsZCBiZSBjYWxsZWQgYXMgc29vbiBhcyBwb3NzaWJsZSAob24gYXBwIHN0YXJ0KSBzbyBkZWZhdWx0IG5vdGlmaWNhdGlvbnMgd2lsbCB3b3JrIGFzIGV4cGVjdGVkLlxuICAgKiBDYWxsaW5nIG9uIEFuZHJvaWQgNyBvciBiZWxvdyBvciBhbm90aGVyIHBsYXRmb3JtIHdpbGwgaGF2ZSBubyBlZmZlY3QuXG4gICAqXG4gICAqIEBwYXJhbSB7SUNoYW5uZWxPcHRpb25zfSBjaGFubmVsT3B0aW9uc1xuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBzZXREZWZhdWx0Q2hhbm5lbChjaGFubmVsT3B0aW9uczogSUNoYW5uZWxPcHRpb25zKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogQW5kcm9pZCA4KyBvbmx5LiBSZW1vdmVzIGEgcHJldmlvdXNseSBkZWZpbmVkIGNoYW5uZWwuXG4gICAqIENhbGxpbmcgb24gQW5kcm9pZCA3IG9yIGJlbG93IG9yIGFub3RoZXIgcGxhdGZvcm0gd2lsbCBoYXZlIG5vIGVmZmVjdC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNoYW5uZWxJRFxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBkZWxldGVDaGFubmVsKGNoYW5uZWxJRDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogQW5kcm9pZCA4KyBvbmx5LiBHZXRzIGEgbGlzdCBvZiBhbGwgY2hhbm5lbHMuXG4gICAqIENhbGxpbmcgb24gQW5kcm9pZCA3IG9yIGJlbG93IG9yIGFub3RoZXIgcGxhdGZvcm0gd2lsbCBoYXZlIG5vIGVmZmVjdC5cbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgbGlzdENoYW5uZWxzKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIEVuYWJsZS9kaXNhYmxlIGFuYWx5dGljcyBjb2xsZWN0aW9uICh1c2VmdWwgZm9yIEdEUFIvcHJpdmFjeSBzZXR0aW5ncykuXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gZW5hYmxlZFxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBzZXRBbmFseXRpY3NDb2xsZWN0aW9uRW5hYmxlZChlbmFibGVkOiBib29sZWFuKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogRW5hYmxlL2Rpc2FibGUgQ3Jhc2hseXRpY3MgY29sbGVjdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFufSBlbmFibGVkXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHNldENyYXNobHl0aWNzQ29sbGVjdGlvbkVuYWJsZWQoZW5hYmxlZDogYm9vbGVhbik6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIEVuYWJsZS9kaXNhYmxlIHBlcmZvcm1hbmNlIGNvbGxlY3Rpb24uXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gZW5hYmxlZFxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBzZXRQZXJmb3JtYW5jZUNvbGxlY3Rpb25FbmFibGVkKGVuYWJsZWQ6IGJvb2xlYW4pOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBMb2cgYW4gZXZlbnQgdXNpbmcgQW5hbHl0aWNzXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGxvZ0V2ZW50KHR5cGU6IHN0cmluZywgZGF0YTogYW55KTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSBuYW1lIG9mIHRoZSBjdXJyZW50IHNjcmVlbiBpbiBBbmFseXRpY3NcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgU2NyZWVuIG5hbWVcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgc2V0U2NyZWVuTmFtZShuYW1lOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgYSB1c2VyIGlkIGZvciB1c2UgaW4gQW5hbHl0aWNzXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1c2VySWRcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgc2V0VXNlcklkKHVzZXJJZDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogU2V0IGEgdXNlciBwcm9wZXJ0eSBmb3IgdXNlIGluIEFuYWx5dGljc1xuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgc2V0VXNlclByb3BlcnR5KG5hbWU6IHN0cmluZywgdmFsdWU6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCBDcmFzaGx5dGljcyB1c2VyIGlkZW50aWZpZXIuXG4gICAqIFRvIGRpYWdub3NlIGFuIGlzc3VlLCBpdOKAmXMgb2Z0ZW4gaGVscGZ1bCB0byBrbm93IHdoaWNoIG9mIHlvdXIgdXNlcnMgZXhwZXJpZW5jZWQgYSBnaXZlbiBjcmFzaC5cbiAgICogQ3Jhc2hseXRpY3MgaW5jbHVkZXMgYSB3YXkgdG8gYW5vbnltb3VzbHkgaWRlbnRpZnkgdXNlcnMgaW4geW91ciBjcmFzaCByZXBvcnRzLlxuICAgKiBUbyBhZGQgdXNlciBJRHMgdG8geW91ciByZXBvcnRzLCBhc3NpZ24gZWFjaCB1c2VyIGEgdW5pcXVlIGlkZW50aWZpZXIgaW4gdGhlIGZvcm0gb2YgYW4gSUQgbnVtYmVyLCB0b2tlbiwgb3IgaGFzaGVkIHZhbHVlLlxuICAgKlxuICAgKiBNb3JlIGluZm8gaHR0cHM6Ly9maXJlYmFzZS5nb29nbGUuY29tL2RvY3MvY3Jhc2hseXRpY3MvY3VzdG9taXplLWNyYXNoLXJlcG9ydHM/YXV0aHVzZXI9MCNzZXRfdXNlcl9pZHNcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHVzZXJJZFxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBzZXRDcmFzaGx5dGljc1VzZXJJZCh1c2VySWQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFNpbXVsYXRlcyAoY2F1c2VzKSBhIGZhdGFsIG5hdGl2ZSBjcmFzaCB3aGljaCBjYXVzZXMgYSBjcmFzaCBldmVudCB0byBiZSBzZW50IHRvIENyYXNobHl0aWNzICh1c2VmdWwgZm9yIHRlc3RpbmcpLlxuICAgKiBTZWUgdGhlIEZpcmViYXNlIGRvY3VtZW50YXRpb24gcmVnYXJkaW5nIGNyYXNoIHRlc3RpbmcuXG4gICAqIENyYXNoZXMgd2lsbCBhcHBlYXIgdW5kZXIgRXZlbnQgdHlwZSA9IFwiQ3Jhc2hlc1wiIGluIHRoZSBDcmFzaGx5dGljcyBjb25zb2xlLlxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBzZW5kQ3Jhc2goKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogU2VuZHMgYSBjcmFzaC1yZWxhdGVkIGxvZyBtZXNzYWdlIHRoYXQgd2lsbCBhcHBlYXIgaW4gdGhlIExvZ3Mgc2VjdGlvbiBvZiB0aGUgbmV4dCBuYXRpdmUgY3Jhc2ggZXZlbnQuXG4gICAqIE5vdGU6IGlmIHlvdSBkb24ndCB0aGVuIGNyYXNoLCB0aGUgbWVzc2FnZSB3b24ndCBiZSBzZW50ISBBbHNvIGxvZ3MgdGhlIG1lc3NhZ2UgdG8gdGhlIG5hdGl2ZSBkZXZpY2UgY29uc29sZS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2VcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgbG9nTWVzc2FnZShtZXNzYWdlOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZW5kcyBhIG5vbi1mYXRhbCBlcnJvciBldmVudCB0byBDcmFzaGx5dGljcy4gSW4gYSBDb3Jkb3ZhIGFwcCwgeW91IG1heSB1c2UgdGhpcyB0byBsb2cgdW5oYW5kbGVkIEphdmFzY3JpcHQgZXhjZXB0aW9ucywgZm9yIGV4YW1wbGUuXG4gICAqIFRoZSBldmVudCB3aWxsIGFwcGVhciB1bmRlciBFdmVudCB0eXBlID0gXCJOb24tZmF0YWxzXCIgaW4gdGhlIENyYXNobHl0aWNzIGNvbnNvbGUuXG4gICAqIFRoZSBlcnJvciBtZXNzYWdlIHdpbGwgYXBwZWFyIGluIHRoZSBMb2dzIHNlY3Rpb24gb2YgdGhlIG5vbi1mYXRhbCBlcnJvciBldmVudC5cbiAgICogQWxzbyBsb2dzIHRoZSBlcnJvciBtZXNzYWdlIHRvIHRoZSBuYXRpdmUgZGV2aWNlIGNvbnNvbGUuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBlcnJvclxuICAgKiBAcGFyYW0ge29iamVjdH0gKG9wdGlvbmFsKSBhIHN0YWNrIHRyYWNlIGdlbmVyYXRlZCBieSBzdGFja3RyYWNlLmpzXG4gICAqIEBwYXJhbSBzdGFja1RyYWNlXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGxvZ0Vycm9yKGVycm9yOiBzdHJpbmcsIHN0YWNrVHJhY2U/OiBvYmplY3QpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXF1ZXN0cyB2ZXJpZmljYXRpb24gb2YgYSBwaG9uZSBudW1iZXIgaW4gb3JkZXIgdG8gYXV0aGVudGljYXRlIGEgdXNlciBhbmQgc2lnbiB0aGVuIGludG8gRmlyZWJhc2UgaW4geW91ciBhcHAuXG4gICAqXG4gICAqIE5PVEU6IFRoaXMgd2lsbCBvbmx5IHdvcmsgb24gcGh5c2ljYWwgZGV2aWNlcyB3aXRoIGEgU0lNIGNhcmQgKG5vdCBpT1MgU2ltdWxhdG9yIG9yIEFuZHJvaWQgRW11bGF0b3IpXG4gICAqXG4gICAqIEluIHJlc3BvbnNlIHRvIHlvdXIgcmVxdWVzdCwgeW91J2xsIHJlY2VpdmUgYSB2ZXJpZmljYXRpb24gSUQgd2hpY2ggeW91IGNhbiB1c2UgaW4gY29uanVuY3Rpb24gd2l0aCB0aGUgdmVyaWZpY2F0aW9uIGNvZGVcbiAgICogdG8gc2lnbiB0aGUgdXNlciBpbi5cbiAgICpcbiAgICogT24gaU9TIGFuZCBzb21lIEFuZHJvaWQgZGV2aWNlcywgdGhlIHVzZXIgd2lsbCByZWNlaXZlIGFuZCBTTVMgY29udGFpbmluZyB0aGUgdmVyaWZpY2F0aW9uIGNvZGUgd2hpY2ggdGhleSBtdXN0IG1hbnVhbGx5IGVudGVyXG4gICAqIGludG8geW91ciBhcHAuXG4gICAqXG4gICAqIFNvbWUgQW5kcm9pZCBkZXZpY2VzIHN1cHBvcnQgXCJpbnN0YW50IHZlcmZpY2F0aW9uXCIsIGluIHdoaWNoIGNhc2UgYW4gU01TIHdpbGwgbm90IGJlIHNlbmQgYW5kIHlvdSB3aWxsIGJlIHJldHVybmVkXG4gICAqIHRoZSB2ZXJpZmljYXRpb24gY29kZSBhbG9uZyB3aXRoIHRoZSB2ZXJpZmljYXRpb24gSUQuIEluIHRoaXMgY2FzZSwgdGhlIHVzZXIgZG9lc24ndCBuZWVkIHRvIGRvIGFueXRoaW5nIGluIG9yZGVyIGZvciB5b3VcbiAgICogdG8gc2lnbiB0aGVtIGluLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcGhvbmVOdW1iZXIgLSBwaG9uZSBudW1iZXIgdG8gdmVyaWZ5XG4gICAqIEBwYXJhbSB7aW50ZWdlcn0gdGltZU91dER1cmF0aW9uIC0gdGltZSB0byB3YWl0IGluIHNlY29uZHMgYmVmb3JlIHRpbWluZyBvdXRcbiAgICogQHBhcmFtIHtzdHJpbmd9IGZha2VWZXJpZmljYXRpb25Db2RlIC0gKG9wdGlvbmFsKSB0byB0ZXN0IGluc3RhbnQgdmVyaWZpY2F0aW9uIG9uIEFuZHJvaWQgLHNwZWNpZnkgYSBmYWtlIHZlcmlmaWNhdGlvbiBjb2RlIHRvIHJldHVybiBmb3Igd2hpdGVsaXN0ZWQgcGhvbmUgbnVtYmVycy5cbiAgICpcbiAgICogVGhlIHN1Y2Nlc3MgY2FsbGJhY2sgd2lsbCBiZSBwYXNzZWQgYSBjcmVkZW50aWFsIG9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAgICogICBpbnN0YW50VmVyaWZpY2F0aW9uIHtib29sZWFufSAtIHRydWUgaWYgdGhlIEFuZHJvaWQgZGV2aWNlIHN1cHBvcnRzIGluc3RhbnQgdmVyaWZpY2F0aW9uLCBpbiB3aGljaCBjYXNlIHRoZSB2ZXJpZmljYXRpb24gY29kZSB3aWxsIGJlIGluY2x1ZGVkIGluIHRoZSBjcmVkZW50aWFsIG9iamVjdC4gSWYgdGhpcyBpcyBmYWxzZSwgdGhlIGRldmljZSB3aWxsIGJlIHNlbnQgYW4gU01TIGNvbnRhaW5pbmcgdGhlIHZlcmlmaWNhdGlvbiBjb2RlIGZvciB0aGUgdXNlciB0byBtYW51YWxseSBlbnRlciBpbnRvIHlvdXIgYXBwLiBBbHdheXMgZmFsc2Ugb24gaU9TLlxuICAgKiAgIHZlcmlmaWNhdGlvbklkIHtzdHJpbmd9IC0gdGhlIHZlcmlmaWNhdGlvbiBJRCB5b3UnbGwgbmVlZCB0byBwYXNzIGFsb25nIHdpdGggdGhlIHZlcmlmaWNhdGlvbiBjb2RlIHRvIHNpZ24gdGhlIHVzZXIgaW4uIEFsd2F5cyByZXR1cm5lZCBvbiBib3RoIEFuZHJvaWQgJiBpT1MuXG4gICAqICAgY29kZSB7c3RyaW5nfSAtIHZlcmlmaWNhdGlvbiBjb2RlLiBXaWxsIG9ubHkgYmUgcHJlc2VudCBpZiBpbnN0YW50VmVyaWZpY2F0aW9uIGlzIHRydWUuIEFsd2F5cyB1bmRlZmluZWQgb24gaU9TLlxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIGNhbGxiYWNrT3JkZXI6ICdyZXZlcnNlJyxcbiAgfSlcbiAgdmVyaWZ5UGhvbmVOdW1iZXIocGhvbmVOdW1iZXI6IHN0cmluZywgdGltZU91dER1cmF0aW9uOiBudW1iZXIsIGZha2VWZXJpZmljYXRpb25Db2RlPzogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogU3dpdGNoIGN1cnJlbnQgYXV0aGVudGlmaWNhdGlvbiBzeXN0ZW0gbGFuZ3VhZ2UsIGZvciBleGFtcGxlLCB0aGUgcGhvbmUgc21zIGNvZGUuXG4gICAqXG4gICAqIEBwYXJhbSBsYW5nIC0gbGFuZ3VhZ2UgdG8gY2hhbmdlLCBleDogJ2ZyJyBmb3IgZnJlbmNoXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHNldExhbmd1YWdlQ29kZShsYW5nOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTaWducyB0aGUgdXNlciBpbnRvIEZpcmViYXNlIHdpdGggY3JlZGVudGlhbHMgb2J0YWluZWQgdXNpbmcgdmVyaWZ5UGhvbmVOdW1iZXIoKS5cbiAgICogU2VlIHRoZSBBbmRyb2lkLSBhbmQgaU9TLXNwZWNpZmljIEZpcmViYXNlIGRvY3VtZW50YXRpb24gZm9yIG1vcmUgaW5mby5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGNyZWRlbnRpYWwgLSBhIGNyZWRlbnRpYWwgb2JqZWN0IHJldHVybmVkIGJ5IHRoZSBzdWNjZXNzIGNhbGxiYWNrIG9mIGFuIGF1dGhlbnRpY2F0aW9uIG1ldGhvZFxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBzaWduSW5XaXRoQ3JlZGVudGlhbChjcmVkZW50aWFsOiBvYmplY3QpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IGVtYWlsL3Bhc3N3b3JkLWJhc2VkIHVzZXIgYWNjb3VudC4gSWYgYWNjb3VudCBjcmVhdGlvbiBpcyBzdWNjZXNzZnVsLCB1c2VyIHdpbGwgYmUgYXV0b21hdGljYWxseSBzaWduZWQgaW4uXG4gICAqXG4gICAqIEBwYXJhbSBlbWFpbFxuICAgKiBAcGFyYW0gcGFzc3dvcmRcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgY3JlYXRlVXNlcldpdGhFbWFpbEFuZFBhc3N3b3JkKGVtYWlsOiBzdHJpbmcsIHBhc3N3b3JkOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTaWducyBpbiB0byBhbiBlbWFpbC9wYXNzd29yZC1iYXNlZCB1c2VyIGFjY291bnQuXG4gICAqXG4gICAqIEBwYXJhbSBlbWFpbFxuICAgKiBAcGFyYW0gcGFzc3dvcmRcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgc2lnbkluVXNlcldpdGhFbWFpbEFuZFBhc3N3b3JkKGVtYWlsOiBzdHJpbmcsIHBhc3N3b3JkOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTaWducyBpbiB1c2VyIHdpdGggY3VzdG9tIHRva2VuLlxuICAgKlxuICAgKiBAcGFyYW0gY3VzdG9tVG9rZW5cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgc2lnbkluVXNlcldpdGhDdXN0b21Ub2tlbihjdXN0b21Ub2tlbjogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogU2lnbnMgaW4gdXNlciBhbm9ueW1vdXNseS5cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgc2lnbkluVXNlckFub255bW91c2x5KCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIEF1dGhlbnRpY2F0ZXMgdGhlIHVzZXIgd2l0aCBhIEdvb2dsZSBhY2NvdW50IHRvIG9idGFpbiBhIGNyZWRlbnRpYWwgdGhhdCBjYW4gYmUgdXNlZCB0byBzaWduIHRoZSB1c2VyIGluL2xpbmsgdG8gYW4gZXhpc3RpbmcgdXNlciBhY2NvdW50L3JlYXV0aGVudGljYXRlIHRoZSB1c2VyLlxuICAgKlxuICAgKiBAcGFyYW0gY2xpZW50SWRcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgYXV0aGVudGljYXRlVXNlcldpdGhHb29nbGUoY2xpZW50SWQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIEF1dGhlbnRpY2F0ZXMgdGhlIHVzZXIgd2l0aCBhbiBBcHBsZSBhY2NvdW50IHVzaW5nIFNpZ24gSW4gd2l0aCBBcHBsZSB0byBvYnRhaW4gYSBjcmVkZW50aWFsIHRoYXQgY2FuIGJlIHVzZWQgdG8gc2lnbiB0aGUgdXNlciBpbi9saW5rIHRvIGFuIGV4aXN0aW5nIHVzZXIgYWNjb3VudC9yZWF1dGhlbnRpY2F0ZSB0aGUgdXNlci5cbiAgICpcbiAgICogQHBhcmFtIGxvY2FsZVxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIGNhbGxiYWNrT3JkZXI6ICdyZXZlcnNlJyxcbiAgfSlcbiAgYXV0aGVudGljYXRlVXNlcldpdGhBcHBsZShsb2NhbGU/OiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBMaW5rcyB0aGUgdXNlciBhY2NvdW50IHRvIGFuIGV4aXN0aW5nIEZpcmViYXNlIHVzZXIgYWNjb3VudCB3aXRoIGNyZWRlbnRpYWxzIG9idGFpbmVkIHVzaW5nIHZlcmlmeVBob25lTnVtYmVyKCkuXG4gICAqIFNlZSB0aGUgQW5kcm9pZC0gYW5kIGlPUy1zcGVjaWZpYyBGaXJlYmFzZSBkb2N1bWVudGF0aW9uIGZvciBtb3JlIGluZm8uXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBjcmVkZW50aWFsIC0gYSBjcmVkZW50aWFsIG9iamVjdCByZXR1cm5lZCBieSB0aGUgc3VjY2VzcyBjYWxsYmFjayBvZiBhbiBhdXRoZW50aWNhdGlvbiBtZXRob2RcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gc3VjY2VzcyAtIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGNhbGwgb24gc3VjY2Vzc2Z1bCBzaWduLWluIHVzaW5nIGNyZWRlbnRpYWxzXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGVycm9yIC0gY2FsbGJhY2sgZnVuY3Rpb24gd2hpY2ggd2lsbCBiZSBwYXNzZWQgYSB7c3RyaW5nfSBlcnJvciBtZXNzYWdlIGFzIGFuIGFyZ3VtZW50XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGxpbmtVc2VyV2l0aENyZWRlbnRpYWwoY3JlZGVudGlhbDogb2JqZWN0LCBzdWNjZXNzOiAoKSA9PiB2b2lkLCBlcnJvcjogKGVycjogc3RyaW5nKSA9PiB2b2lkKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogUmVhdXRoZW50aWNhdGVzIHRoZSBjdXJyZW50bHkgc2lnbmVkIGluIHVzZXIgd2l0aCBjcmVkZW50aWFscyBvYnRhaW5lZCB2aWEgYW4gYXV0aGVudGljYXRpb24gbWV0aG9kIHN1Y2ggYXMgdmVyaWZ5UGhvbmVOdW1iZXIoKSBvciBhdXRoZW50aWNhdGVVc2VyV2l0aEdvb2dsZSgpLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gY3JlZGVudGlhbCAtIGEgY3JlZGVudGlhbCBvYmplY3QgcmV0dXJuZWQgYnkgdGhlIHN1Y2Nlc3MgY2FsbGJhY2sgb2YgYW4gYXV0aGVudGljYXRpb24gbWV0aG9kXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHN1Y2Nlc3MgLSBjYWxsYmFjayBmdW5jdGlvbiB0byBjYWxsIG9uIHN1Y2Nlc3NmdWwgc2lnbi1pbiB1c2luZyBjcmVkZW50aWFsc1xuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcnJvciAtIGNhbGxiYWNrIGZ1bmN0aW9uIHdoaWNoIHdpbGwgYmUgcGFzc2VkIGEge3N0cmluZ30gZXJyb3IgbWVzc2FnZSBhcyBhbiBhcmd1bWVudFxuICAgKi9cbiAgQENvcmRvdmEoKVxuICByZWF1dGhlbnRpY2F0ZVdpdGhDcmVkZW50aWFsKGNyZWRlbnRpYWw6IGFueSwgc3VjY2VzczogKCkgPT4gdm9pZCwgZXJyb3I6IChlcnI6IHN0cmluZykgPT4gdm9pZCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiB0aGVyZSBpcyBhIGN1cnJlbnQgRmlyZWJhc2UgdXNlciBzaWduZWQgaW50byB0aGUgYXBwLlxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBpc1VzZXJTaWduZWRJbigpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogU2lnbnMgY3VycmVudCBGaXJlYmFzZSB1c2VyIG91dCBvZiB0aGUgYXBwLlxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBzaWduT3V0VXNlcigpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGVzIHRoZSBkaXNwbGF5IG5hbWUgYW5kL29yIHBob3RvIFVSTCBvZiB0aGUgY3VycmVudCBGaXJlYmFzZSB1c2VyIHNpZ25lZCBpbnRvIHRoZSBhcHAuXG4gICAqXG4gICAqIEBwYXJhbSBwcm9maWxlXG4gICAqIEBwYXJhbSBwcm9maWxlLm5hbWVcbiAgICogQHBhcmFtIHByb2ZpbGUucGhvdG9VcmlcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgdXBkYXRlVXNlclByb2ZpbGUocHJvZmlsZTogeyBuYW1lOiBzdHJpbmc7IHBob3RvVXJpOiBzdHJpbmcgfSk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMvc2V0cyB0aGUgZW1haWwgYWRkcmVzcyBvZiB0aGUgY3VycmVudCBGaXJlYmFzZSB1c2VyIHNpZ25lZCBpbnRvIHRoZSBhcHAuXG4gICAqXG4gICAqIEBwYXJhbSBlbWFpbFxuICAgKi9cbiAgQENvcmRvdmEoKVxuICB1cGRhdGVVc2VyRW1haWwoZW1haWw6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFNlbmRzIGEgdmVyaWZpY2F0aW9uIGVtYWlsIHRvIHRoZSBjdXJyZW50bHkgY29uZmlndXJlZCBlbWFpbCBhZGRyZXNzIG9mIHRoZSBjdXJyZW50IEZpcmViYXNlIHVzZXIgc2lnbmVkIGludG8gdGhlIGFwcC5cbiAgICogV2hlbiB0aGUgdXNlciBvcGVucyB0aGUgY29udGFpbmVkIGxpbmssIHRoZWlyIGVtYWlsIGFkZHJlc3Mgd2lsbCBoYXZlIGJlZW4gdmVyaWZpZWQuXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHNlbmRVc2VyRW1haWxWZXJpZmljYXRpb24oKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlcy9zZXRzIHRoZSBhY2NvdW50IHBhc3N3b3JkIGZvciB0aGUgY3VycmVudCBGaXJlYmFzZSB1c2VyIHNpZ25lZCBpbnRvIHRoZSBhcHAuXG4gICAqXG4gICAqIEBwYXJhbSBwYXNzd29yZFxuICAgKi9cbiAgQENvcmRvdmEoKVxuICB1cGRhdGVVc2VyUGFzc3dvcmQocGFzc3dvcmQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFNlbmRzIGEgcGFzc3dvcmQgcmVzZXQgZW1haWwgdG8gdGhlIHNwZWNpZmllZCB1c2VyIGVtYWlsIGFkZHJlc3MuXG4gICAqIE5vdGU6IGRvZXNuJ3QgcmVxdWlyZSB0aGUgRmlyZWJhc2UgdXNlciB0byBiZSBzaWduZWQgaW4gdG8gdGhlIGFwcC5cbiAgICpcbiAgICogQHBhcmFtIGVtYWlsXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHNlbmRVc2VyUGFzc3dvcmRSZXNldEVtYWlsKGVtYWlsOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWxldGVzIHRoZSBhY2NvdW50IG9mIHRoZSBjdXJyZW50IEZpcmViYXNlIHVzZXIgc2lnbmVkIGludG8gdGhlIGFwcC5cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgZGVsZXRlVXNlcigpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWdpc3RlcnMgYSBKYXZhc2NyaXB0IGZ1bmN0aW9uIHRvIGludm9rZSB3aGVuIEZpcmViYXNlIEF1dGhlbnRpY2F0aW9uIHN0YXRlIGNoYW5nZXMgYmV0d2VlbiB1c2VyIHNpZ25lZCBpbi9zaWduZWQgb3V0LlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiAtIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGludm9rZSB3aGVuIGF1dGhlbnRpY2F0aW9uIHN0YXRlIGNoYW5nZXNcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgcmVnaXN0ZXJBdXRoU3RhdGVDaGFuZ2VMaXN0ZW5lcihmbjogYW55KTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogRmV0Y2ggUmVtb3RlIENvbmZpZyBwYXJhbWV0ZXIgdmFsdWVzIGZvciB5b3VyIGFwcC5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IGNhY2hlRXhwaXJhdGlvblNlY29uZHMgc3BlY2lmeSB0aGUgY2FjaGVFeHBpcmF0aW9uU2Vjb25kc1xuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBmZXRjaChjYWNoZUV4cGlyYXRpb25TZWNvbmRzPzogbnVtYmVyKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogQWN0aXZhdGUgdGhlIFJlbW90ZSBDb25maWcgZmV0Y2hlZCBjb25maWcuXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGFjdGl2YXRlRmV0Y2hlZCgpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXRyaWV2ZSBhIFJlbW90ZSBDb25maWcgdmFsdWUuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXlcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgZ2V0VmFsdWUoa2V5OiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBBbmRyb2lkIG9ubHkuIFJldHJpZXZlIGEgUmVtb3RlIENvbmZpZyBieXRlIGFycmF5LlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5XG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGdldEJ5dGVBcnJheShrZXk6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIEFuZHJvaWQgb25seS4gR2V0IHRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSBGaXJlYmFzZVJlbW90ZUNvbmZpZyBzaW5nbGV0b24gb2JqZWN0LlxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBnZXRJbmZvKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIEFuZHJvaWQgb25seS4gQ2hhbmdlIHRoZSBzZXR0aW5ncyBmb3IgdGhlIEZpcmViYXNlUmVtb3RlQ29uZmlnIG9iamVjdCdzIG9wZXJhdGlvbnMuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzZXR0aW5nc1xuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBzZXRDb25maWdTZXR0aW5ncyhzZXR0aW5nczogYW55KTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogQW5kcm9pZCBvbmx5LiBTZXQgZGVmYXVsdHMgaW4gdGhlIFJlbW90ZSBDb25maWcuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzZXR0aW5nc1xuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBzZXREZWZhdWx0cyhzZXR0aW5nczogYW55KTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogU3RhcnQgYSB0cmFjZS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgc3RhcnRUcmFjZShuYW1lOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBUbyBjb3VudCB0aGUgcGVyZm9ybWFuY2UtcmVsYXRlZCBldmVudHMgdGhhdCBvY2N1ciBpbiB5b3VyIGFwcCAoc3VjaCBhcyBjYWNoZSBoaXRzIG9yIHJldHJpZXMpLFxuICAgKiBhZGQgYSBsaW5lIG9mIGNvZGUgc2ltaWxhciB0byB0aGUgZm9sbG93aW5nIHdoZW5ldmVyIHRoZSBldmVudCBvY2N1cnMsXG4gICAqIHVzaW5nIGEgc3RyaW5nIG90aGVyIHRoYW4gcmV0cnkgdG8gbmFtZSB0aGF0IGV2ZW50IGlmIHlvdSBhcmUgY291bnRpbmcgYSBkaWZmZXJlbnQgdHlwZSBvZiBldmVudC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNvdW50ZXJOYW1lXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGluY3JlbWVudENvdW50ZXIobmFtZTogc3RyaW5nLCBjb3VudGVyTmFtZTogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogU3RvcCB0aGUgdHJhY2UuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHN0b3BUcmFjZShuYW1lOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGEgbmV3IGRvY3VtZW50IHRvIGEgRmlyZXN0b3JlIGNvbGxlY3Rpb24sIHdoaWNoIHdpbGwgYmUgYWxsb2NhdGVkIGFuIGF1dG8tZ2VuZXJhdGVkIGRvY3VtZW50IElELlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZG9jdW1lbnQgLSBkb2N1bWVudCBvYmplY3QgdG8gYWRkIHRvIGNvbGxlY3Rpb25cbiAgICogQHBhcmFtIHtzdHJpbmd9IGNvbGxlY3Rpb24gLSBuYW1lIG9mIHRvcC1sZXZlbCBjb2xsZWN0aW9uIHRvIGFkZCBkb2N1bWVudCB0by5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gc3VjY2VzcyAtIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGNhbGwgb24gc3VjY2Vzc2Z1bGx5IGFkZGluZyB0aGUgZG9jdW1lbnQuIFdpbGwgYmUgcGFzc2VkIGEge3N0cmluZ30gYXJndW1lbnQgY29udGFpbmluZyB0aGUgYXV0by1nZW5lcmF0ZWQgZG9jdW1lbnQgSUQgdGhhdCB0aGUgZG9jdW1lbnQgd2FzIHN0b3JlZCBhZ2FpbnN0LlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcnJvciAtIGNhbGxiYWNrIGZ1bmN0aW9uIHdoaWNoIHdpbGwgYmUgcGFzc2VkIGEge3N0cmluZ30gZXJyb3IgbWVzc2FnZSBhcyBhbiBhcmd1bWVudC5cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgYWRkRG9jdW1lbnRUb0ZpcmVzdG9yZUNvbGxlY3Rpb24oXG4gICAgZG9jdW1lbnQ6IG9iamVjdCxcbiAgICBjb2xsZWN0aW9uOiBzdHJpbmcsXG4gICAgc3VjY2VzczogKGlkOiBzdHJpbmcpID0+IHZvaWQsXG4gICAgZXJyb3I6IChlcnI6IHN0cmluZykgPT4gdm9pZFxuICApOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIChhZGRzL3JlcGxhY2VzKSBhIGRvY3VtZW50IHdpdGggdGhlIGdpdmVuIElEIGluIGEgRmlyZXN0b3JlIGNvbGxlY3Rpb24uXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBkb2N1bWVudElkIC0gZG9jdW1lbnQgSUQgdG8gdXNlIHdoZW4gc2V0dGluZyBkb2N1bWVudCBpbiB0aGUgY29sbGVjdGlvbi5cbiAgICogQHBhcmFtIHtvYmplY3R9IGRvY3VtZW50IC0gZG9jdW1lbnQgb2JqZWN0IHRvIHNldCBpbiBjb2xsZWN0aW9uLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gY29sbGVjdGlvbiAtIG5hbWUgb2YgdG9wLWxldmVsIGNvbGxlY3Rpb24gdG8gc2V0IGRvY3VtZW50IGluLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzdWNjZXNzIC0gY2FsbGJhY2sgZnVuY3Rpb24gdG8gY2FsbCBvbiBzdWNjZXNzZnVsbHkgc2V0dGluZyB0aGUgZG9jdW1lbnQuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGVycm9yIC0gY2FsbGJhY2sgZnVuY3Rpb24gd2hpY2ggd2lsbCBiZSBwYXNzZWQgYSB7c3RyaW5nfSBlcnJvciBtZXNzYWdlIGFzIGFuIGFyZ3VtZW50LlxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBzZXREb2N1bWVudEluRmlyZXN0b3JlQ29sbGVjdGlvbihcbiAgICBkb2N1bWVudElkOiBzdHJpbmcsXG4gICAgZG9jdW1lbnQ6IG9iamVjdCxcbiAgICBjb2xsZWN0aW9uOiBzdHJpbmcsXG4gICAgc3VjY2VzczogKCkgPT4gdm9pZCxcbiAgICBlcnJvcjogKGVycjogc3RyaW5nKSA9PiB2b2lkXG4gICk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgYW4gZXhpc3RpbmcgZG9jdW1lbnQgd2l0aCB0aGUgZ2l2ZW4gSUQgaW4gYSBGaXJlc3RvcmUgY29sbGVjdGlvbi4gVGhpcyBpcyBhIG5vbi1kZXN0cnVjdGl2ZSB1cGRhdGUgdGhhdCB3aWxsIG9ubHlcbiAgICogb3ZlcndyaXRlIGV4aXN0aW5nIGtleXMgaW4gdGhlIGV4aXN0aW5nIGRvY3VtZW50IG9yIGFkZCBuZXcgb25lcyBpZiB0aGV5IGRvbid0IGFscmVhZHkgZXhpc3QuIElmIHRoZSBubyBkb2N1bWVudCB3aXRoIHRoZVxuICAgKiBzcGVjaWZpZWQgSUQgZXhpc3RzIGluIHRoZSBjb2xsZWN0aW9uLCBhbiBlcnJvciB3aWxsIGJlIHJhaXNlZC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGRvY3VtZW50SWQgLSBkb2N1bWVudCBJRCBvZiB0aGUgZG9jdW1lbnQgdG8gdXBkYXRlLlxuICAgKiBAcGFyYW0ge29iamVjdH0gZG9jdW1lbnQgLSBlbnRpcmUgZG9jdW1lbnQgb3IgZG9jdW1lbnQgZnJhZ21lbnQgdG8gdXBkYXRlIGV4aXN0aW5nIGRvY3VtZW50IHdpdGguXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjb2xsZWN0aW9uIC0gbmFtZSBvZiB0b3AtbGV2ZWwgY29sbGVjdGlvbiB0byB1cGRhdGUgZG9jdW1lbnQgaW4uXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHN1Y2Nlc3MgLSBjYWxsYmFjayBmdW5jdGlvbiB0byBjYWxsIG9uIHN1Y2Nlc3NmdWxseSB1cGRhdGluZyB0aGUgZG9jdW1lbnQuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGVycm9yIC0gY2FsbGJhY2sgZnVuY3Rpb24gd2hpY2ggd2lsbCBiZSBwYXNzZWQgYSB7c3RyaW5nfSBlcnJvciBtZXNzYWdlIGFzIGFuIGFyZ3VtZW50LlxuICAgKi9cbiAgQENvcmRvdmEoKVxuICB1cGRhdGVEb2N1bWVudEluRmlyZXN0b3JlQ29sbGVjdGlvbihcbiAgICBkb2N1bWVudElkOiBzdHJpbmcsXG4gICAgZG9jdW1lbnQ6IG9iamVjdCxcbiAgICBjb2xsZWN0aW9uOiBzdHJpbmcsXG4gICAgc3VjY2VzczogKCkgPT4gdm9pZCxcbiAgICBlcnJvcjogKGVycjogc3RyaW5nKSA9PiB2b2lkXG4gICk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIERlbGV0ZXMgYW4gZXhpc3RpbmcgZG9jdW1lbnQgd2l0aCB0aGUgZ2l2ZW4gSUQgaW4gYSBGaXJlc3RvcmUgY29sbGVjdGlvbi5cbiAgICogLSBOb3RlOiBJZiB0aGUgbm8gZG9jdW1lbnQgd2l0aCB0aGUgc3BlY2lmaWVkIElEIGV4aXN0cyBpbiB0aGUgY29sbGVjdGlvbiwgdGhlIEZpcmViYXNlIFNESyB3aWxsIHN0aWxsIHJldHVybiBhIHN1Y2Nlc3NmdWwgb3V0Y29tZS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGRvY3VtZW50SWQgLSBkb2N1bWVudCBJRCBvZiB0aGUgZG9jdW1lbnQgdG8gZGVsZXRlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gY29sbGVjdGlvbiAtIG5hbWUgb2YgdG9wLWxldmVsIGNvbGxlY3Rpb24gdG8gZGVsZXRlIGRvY3VtZW50IGluLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzdWNjZXNzIC0gY2FsbGJhY2sgZnVuY3Rpb24gdG8gY2FsbCBvbiBzdWNjZXNzZnVsbHkgZGVsZXRpbmcgdGhlIGRvY3VtZW50LlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcnJvciAtICBjYWxsYmFjayBmdW5jdGlvbiB3aGljaCB3aWxsIGJlIHBhc3NlZCBhIHtzdHJpbmd9IGVycm9yIG1lc3NhZ2UgYXMgYW4gYXJndW1lbnQuXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGRlbGV0ZURvY3VtZW50RnJvbUZpcmVzdG9yZUNvbGxlY3Rpb24oXG4gICAgZG9jdW1lbnRJZDogc3RyaW5nLFxuICAgIGNvbGxlY3Rpb246IHN0cmluZyxcbiAgICBzdWNjZXNzOiAoKSA9PiB2b2lkLFxuICAgIGVycm9yOiAoZXJyOiBzdHJpbmcpID0+IHZvaWRcbiAgKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogRmV0Y2hlcyBhbiBleGlzdGluZyBkb2N1bWVudCB3aXRoIHRoZSBnaXZlbiBJRCBmcm9tIGEgRmlyZXN0b3JlIGNvbGxlY3Rpb24uXG4gICAqIC1Ob3RlOiBJZiB0aGUgbm8gZG9jdW1lbnQgd2l0aCB0aGUgc3BlY2lmaWVkIElEIGV4aXN0cyBpbiB0aGUgY29sbGVjdGlvbiwgdGhlIGVycm9yIGNhbGxiYWNrIHdpbGwgYmUgaW52b2tlZC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGRvY3VtZW50SWQgLSBkb2N1bWVudCBJRCBvZiB0aGUgZG9jdW1lbnQgdG8gZmV0Y2guXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjb2xsZWN0aW9uIC0gbmFtZSBvZiB0b3AtbGV2ZWwgY29sbGVjdGlvbiB0byBmZXRjaCBkb2N1bWVudCBmcm9tLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzdWNjZXNzIC0gY2FsbGJhY2sgZnVuY3Rpb24gdG8gY2FsbCBvbiBzdWNjZXNzZnVsbHkgZmV0Y2hpbmcgdGhlIGRvY3VtZW50LiBXaWxsIGJlIHBhc3NlZCBhbiB7b2JqZWN0fSBjb250YWluIHRoZSBkb2N1bWVudCBjb250ZW50cy5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZXJyb3IgLSBjYWxsYmFjayBmdW5jdGlvbiB3aGljaCB3aWxsIGJlIHBhc3NlZCBhIHtzdHJpbmd9IGVycm9yIG1lc3NhZ2UgYXMgYW4gYXJndW1lbnQuXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGZldGNoRG9jdW1lbnRJbkZpcmVzdG9yZUNvbGxlY3Rpb24oXG4gICAgZG9jdW1lbnRJZDogc3RyaW5nLFxuICAgIGNvbGxlY3Rpb246IHN0cmluZyxcbiAgICBzdWNjZXNzOiAoZG9jOiBhbnkpID0+IHZvaWQsXG4gICAgZXJyb3I6IChlcnI6IHN0cmluZykgPT4gdm9pZFxuICApOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBGZXRjaGVzIGFsbCB0aGUgZG9jdW1lbnRzIGluIHRoZSBzcGVjaWZpYyBjb2xsZWN0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gY29sbGVjdGlvbiAtIG5hbWUgb2YgdG9wLWxldmVsIGNvbGxlY3Rpb24gdG8gZmV0Y2guXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHN1Y2Nlc3MgLSBjYWxsYmFjayBmdW5jdGlvbiB0byBjYWxsIG9uIHN1Y2Nlc3NmdWxseSBkZWxldGluZyB0aGUgZG9jdW1lbnQuIFdpbGwgYmUgcGFzc2VkIGFuIHtvYmplY3R9IGNvbnRhaW5pbmcgYWxsIHRoZSBkb2N1bWVudHMgaW4gdGhlIGNvbGxlY3Rpb24sXG4gICAqIGluZGV4ZWQgYnkgZG9jdW1lbnQgSUQuIElmIGEgRmlyZWJhc2UgY29sbGVjdGlvbiB3aXRoIHRoYXQgbmFtZSBkb2VzIG5vdCBleGlzdCBvciBpdCBjb250YWlucyBubyBkb2N1bWVudHMsIHRoZSBvYmplY3Qgd2lsbCBiZSBlbXB0eS5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZXJyb3IgLSBjYWxsYmFjayBmdW5jdGlvbiB3aGljaCB3aWxsIGJlIHBhc3NlZCBhIHtzdHJpbmd9IGVycm9yIG1lc3NhZ2UgYXMgYW4gYXJndW1lbnQuXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGZldGNoRmlyZXN0b3JlQ29sbGVjdGlvbihcbiAgICBjb2xsZWN0aW9uOiBzdHJpbmcsXG4gICAgc3VjY2VzczogKGRvY3M6IGFueSkgPT4gdm9pZCxcbiAgICBlcnJvcjogKGVycjogc3RyaW5nKSA9PiB2b2lkXG4gICk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG59XG4iXX0=