var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import { Observable } from 'rxjs';
var QRScannerOriginal = /** @class */ (function (_super) {
    __extends(QRScannerOriginal, _super);
    function QRScannerOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    QRScannerOriginal.prototype.prepare = function () { return cordova(this, "prepare", {}, arguments); };
    QRScannerOriginal.prototype.scan = function () { return cordova(this, "scan", { "callbackStyle": "node", "observable": true }, arguments); };
    QRScannerOriginal.prototype.show = function () { return cordova(this, "show", {}, arguments); };
    QRScannerOriginal.prototype.hide = function () { return cordova(this, "hide", {}, arguments); };
    QRScannerOriginal.prototype.enableLight = function () { return cordova(this, "enableLight", {}, arguments); };
    QRScannerOriginal.prototype.destroy = function () { return cordova(this, "destroy", {}, arguments); };
    QRScannerOriginal.prototype.disableLight = function () { return cordova(this, "disableLight", {}, arguments); };
    QRScannerOriginal.prototype.useFrontCamera = function () { return cordova(this, "useFrontCamera", {}, arguments); };
    QRScannerOriginal.prototype.useBackCamera = function () { return cordova(this, "useBackCamera", {}, arguments); };
    QRScannerOriginal.prototype.useCamera = function (camera) { return cordova(this, "useCamera", {}, arguments); };
    QRScannerOriginal.prototype.pausePreview = function () { return cordova(this, "pausePreview", {}, arguments); };
    QRScannerOriginal.prototype.resumePreview = function () { return cordova(this, "resumePreview", {}, arguments); };
    QRScannerOriginal.prototype.getStatus = function () { return cordova(this, "getStatus", {}, arguments); };
    QRScannerOriginal.prototype.openSettings = function () { return cordova(this, "openSettings", { "sync": true }, arguments); };
    QRScannerOriginal.pluginName = "QRScanner";
    QRScannerOriginal.plugin = "cordova-plugin-qrscanner";
    QRScannerOriginal.pluginRef = "QRScanner";
    QRScannerOriginal.repo = "https://github.com/bitpay/cordova-plugin-qrscanner";
    QRScannerOriginal.platforms = ["Android", "Browser", "iOS", "Windows"];
    return QRScannerOriginal;
}(AwesomeCordovaNativePlugin));
var QRScanner = new QRScannerOriginal();
export { QRScanner };
//# sourceMappingURL=data:application/json;base64,