var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var ForegroundServiceOriginal = /** @class */ (function (_super) {
    __extends(ForegroundServiceOriginal, _super);
    function ForegroundServiceOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ForegroundServiceOriginal.prototype.start = function (title, text, icon, importance, id) {
        if (importance === void 0) { importance = 1; }
        if (id === void 0) { id = 0; }
        return cordova(this, "start", { "sync": true }, arguments);
    };
    ForegroundServiceOriginal.prototype.stop = function () { return cordova(this, "stop", { "sync": true }, arguments); };
    ForegroundServiceOriginal.pluginName = "ForegroundService";
    ForegroundServiceOriginal.plugin = "cordova-plugin-foreground-service";
    ForegroundServiceOriginal.pluginRef = "cordova.plugins.foregroundService";
    ForegroundServiceOriginal.repo = "https://github.com/DavidBriglio/cordova-plugin-foreground-service";
    ForegroundServiceOriginal.platforms = ["Android"];
    return ForegroundServiceOriginal;
}(AwesomeCordovaNativePlugin));
var ForegroundService = new ForegroundServiceOriginal();
export { ForegroundService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvZm9yZWdyb3VuZC1zZXJ2aWNlL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFDQSxPQUFPLHVDQUErQyxNQUFNLCtCQUErQixDQUFDOztJQWdEckQscUNBQTBCOzs7O0lBNEIvRCxpQ0FBSyxhQUFDLEtBQWEsRUFBRSxJQUFZLEVBQUUsSUFBYSxFQUFFLFVBQXlCLEVBQUUsRUFBTTtRQUFqQywyQkFBQSxFQUFBLGNBQXlCO1FBQUUsbUJBQUEsRUFBQSxNQUFNOzs7SUFVbkYsZ0NBQUk7Ozs7Ozs0QkF2Rk47RUFpRHVDLDBCQUEwQjtTQUFwRCxpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb3Jkb3ZhLCBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL2NvcmUnO1xuXG4vKipcbiAqIEBuYW1lIEZvcmVncm91bmQgU2VydmljZVxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGlzIHBsdWdpbiBhbGxvd3MgZm9yIGFuZHJvaWQgZGV2aWNlcyB0byBjb250aW51ZSBydW5uaW5nIHNlcnZpY2VzIGluIHRoZSBiYWNrZ3JvdW5kLCB1c2luZyBhXG4gKiBmb3JlZ3JvdW5kIG9uZ29pbmcgbm90aWZpY2F0aW9uLiBUaGlzIGlzIHRhcmdldGVkIHRvd2FyZHMgdXNlIHdpdGggcGx1Z2lucyBzdWNoIGFzXG4gKiAnY29yZG92YS1nZW9sb2NhdGlvbicgdGhhdCB3aWxsIG5vdCBydW4gd2hpbGUgdGhlIGFwcCBpcyBpbiB0aGUgYmFja2dyb3VuZCBvbiBhbmRyb2lkIEFQSSAyNisuXG4gKlxuICogRm9yIGFuZHJvaWQgQVBJIDI4KywgdGhlIGZvbGxvd2luZyB4bWwgc25pcHBldCBzaG91bGQgYmUgaW5zZXJ0ZWQgaW50byBgYGBjb25maWcueG1sYGBgOlxuICpcbiAqIGBgYFxuICogLi4uXG4gKiA8cGxhdGZvcm0gbmFtZT1cImFuZHJvaWRcIj5cbiAqICAgPGNvbmZpZy1maWxlIHBhcmVudD1cIi8qXCIgdGFyZ2V0PVwiQW5kcm9pZE1hbmlmZXN0LnhtbFwiPlxuICogICAgIDx1c2VzLXBlcm1pc3Npb24gYW5kcm9pZDpuYW1lPVwiYW5kcm9pZC5wZXJtaXNzaW9uLkZPUkVHUk9VTkRfU0VSVklDRVwiIC8+XG4gKiAgIDwvY29uZmlnLWZpbGU+XG4gKiAgIC4uLlxuICogYGBgXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IEZvcmVncm91bmRTZXJ2aWNlIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL2ZvcmVncm91bmQtc2VydmljZS9uZ3gnO1xuICpcbiAqXG4gKiBjb25zdHJ1Y3RvcihwdWJsaWMgZm9yZWdyb3VuZFNlcnZpY2U6IEZvcmVncm91bmRTZXJ2aWNlKSB7IH1cbiAqXG4gKiAuLi5cbiAqXG4gKiBzdGFydFNlcnZpY2UoKSB7XG4gKiAgLy8gTm90aWZpY2F0aW9uIGltcG9ydGFuY2UgaXMgb3B0aW9uYWwsIHRoZSBkZWZhdWx0IGlzIDEgLSBMb3cgKG5vIHNvdW5kIG9yIHZpYnJhdGlvbilcbiAqICB0aGlzLmZvcmVncm91bmRTZXJ2aWNlLnN0YXJ0KCdHUFMgUnVubmluZycsICdCYWNrZ3JvdW5kIFNlcnZpY2UnLCAnZHJhd2FibGUvZnNpY29uJyk7XG4gKiB9XG4gKlxuICogc3RvcFNlcnZpY2UoKSB7XG4gKiAgLy8gRGlzYWJsZSB0aGUgZm9yZWdyb3VuZCBzZXJ2aWNlXG4gKiAgdGhpcy5mb3JlZ3JvdW5kU2VydmljZS5zdG9wKCk7XG4gKiB9XG4gKlxuICogYGBgXG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnRm9yZWdyb3VuZFNlcnZpY2UnLFxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1mb3JlZ3JvdW5kLXNlcnZpY2UnLFxuICBwbHVnaW5SZWY6ICdjb3Jkb3ZhLnBsdWdpbnMuZm9yZWdyb3VuZFNlcnZpY2UnLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL0RhdmlkQnJpZ2xpby9jb3Jkb3ZhLXBsdWdpbi1mb3JlZ3JvdW5kLXNlcnZpY2UnLFxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCddLFxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBGb3JlZ3JvdW5kU2VydmljZSBleHRlbmRzIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luIHtcbiAgLyoqXG4gICAqIEVuYWJsZXMgdGhlIGZvcmVncm91bmQgc2VydmljZVxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdGl0bGUgKGNvbnRlbnQgdGl0bGUpIEEgYnJpZWYgaGVhZGxpbmUgZm9yIHRoZSBub3RpZmljYXRpb25cbiAgICogQHBhcmFtIHtzdHJpbmd9IHRleHQgKGNvbnRlbnQgdGV4dCkgU3VwcG9ydGluZyBpbmZvcm1hdGlvblxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWNvbiBUaGUgZHJhd2FibGUgaWNvbiBjYW4gYmUgYW55IGRyYXdhYmxlIGltYWdlIHRoYXQgZXhpc3RzIGluIHRoZSByZXNvdXJjZSBmb2xkZXIuIFRoaXMgbWVhbnMgeW91IG11c3QgY29weSB0aGUgaWNvbiB5b3Ugd2FudCB0byB1c2UgaW50byB0aGUgcGxhdGZvcm1zL2FuZHJvaWQvYXBwL3NyYy9tYWluL3Jlcy9kcmF3YWJsZSBmb2xkZXIgc2V0LiBJZiBubyBpY29uIGNhbiBiZSBmb3VuZCB1c2luZyB0aGUgaWNvbiBuYW1lIHBhcmFtZXRlciwgYSBkZWZhdWx0IHN0YXIgaWNvbiB3aWxsIGJlIHVzZWQuXG4gICAqXG4gICAqIEZvciBhbiBleGFtcGxlLCBpZiB0aGUgYGZzaWNvbi5wbmdgIChzZWUgeG1sIGJlbG93KSByZXNpZGVzIGhlcmU6IGBgYHNyYy9hc3NldHMvaWNvbi9mc2ljb24ucG5nYGBgLiBUaGVuIGBgYGljb25gYGAgcGFyYW1ldGVyIHZhbHVlIHdvdWxkIGJlIGBgYCdkcmF3YWJsZS9mc2ljb24nYGBgLiBJbiBvcmRlciBmb3IgdGhpcyBleGFtcGxlIHRvIHdvcmssIHRoZSBmb2xsb3dpbmcgeG1sIHNuaXBwZXQgbXVzdCBiZSBpbiBgYGBjb25maWcueG1sYGBgLlxuICAgKlxuICAgKiBgYGBcbiAgICogPHBsYXRmb3JtIG5hbWU9XCJhbmRyb2lkXCI+XG4gICAqICAgPHJlc291cmNlLWZpbGUgc3JjPVwid3d3L2Fzc2V0cy9pY29uL2ZzaWNvbi5wbmdcIiB0YXJnZXQ9XCJhcHAvc3JjL21haW4vcmVzL2RyYXdhYmxlL2ZzaWNvbi5wbmdcIiAvPlxuICAgKiAgIC4uLlxuICAgKiBgYGBcbiAgICogQHBhcmFtIHtudW1iZXJ9IGltcG9ydGFuY2UgTm90aWZpY2F0aW9uIGltcG9ydGFuY2UgZGljdGF0ZXMgaG93IHRoZSBub3RpZmljYXRpb24gaXMgaW5pdGlhbGx5IHByZXNlbnRlZDpcbiAgICpcbiAgICogVmFsdWUgfCBJbXBvcnRhbmNlIHwgRGVzY3JpcHRpb24gfCBFeGFtcGxlc1xuICAgKiAtLS0gfCAtLS0gfCAtLS0gfCAtLS1cbiAgICogMXxJTVBPUlRBTkNFX0xPV3xEb2VzIG5vdCBtYWtlIGEgc291bmQgb3IgaGVhZHMtdXAgZGlzcGxheSAocGx1Z2luJ3MgZGVmYXVsdCl8TmV3IGNvbnRlbnQgdGhlIHVzZXIgaGFzIHN1YnNjcmliZWQgdG8sIHNvY2lhbCBuZXR3b3JrIGludml0YXRpb25zXG4gICAqIDJ8SU1QT1JUQU5DRV9ERUZBVUxUfE1ha2VzIGEgc291bmQsIGJ1dCBubyBoZWFkcy11cCBkaXNwbGF5fFRyYWZmaWMgYWxlcnRzLCB0YXNrIHJlbWluZGVyc1xuICAgKiAzfElNUE9SVEFOQ0VfSElHSHxNYWtlcyBhIHNvdW5kIGFuZCBoZWFkcy11cCBkaXNwbGF5fFRleHQgbWVzc2FnZXMsIGFsYXJtcywgcGhvbmUgY2FsbHNcbiAgICogQHBhcmFtIHtudW1iZXJ9IGlkIFRoZSBub3RpZmljYXRpb24gaWQgaXMgYSBjdXN0b21pemFibGUgaW50ZWdlciB0aGF0IGlzIHVzZWQgdG8gcmVmZXJlbmNlIHRoZSBub3RpZmljYXRpb24gdGhhdCB3aWxsIGJlIGxhdW5jaGVkLiBUaGlzIGlzIGN1c3RvbWl6YWJsZSB0byBhdm9pZCBjb25mbGljdGluZyB3aXRoIGFueSBvdGhlciBub3RpZmljYXRpb25zLiBJZiB0aGlzIGlzIG5vdCBpbmNsdWRlZCwgYSBbKnVuaXF1ZSpdIGRlZmF1bHQgaWQgd2lsbCBiZSB1c2VkLlxuICAgKiBAc2VlIGh0dHBzOi8vbWF0ZXJpYWwuaW8vZGVzaWduL3BsYXRmb3JtLWd1aWRhbmNlL2FuZHJvaWQtbm90aWZpY2F0aW9ucy5odG1sXG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgc3luYzogdHJ1ZSxcbiAgfSlcbiAgc3RhcnQodGl0bGU6IHN0cmluZywgdGV4dDogc3RyaW5nLCBpY29uPzogc3RyaW5nLCBpbXBvcnRhbmNlOiAxIHwgMiB8IDMgPSAxLCBpZCA9IDApOiB2b2lkIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogRGlzYWJsZXMgdGhlIGZvcmVncm91bmQgc2VydmljZVxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIHN5bmM6IHRydWUsXG4gIH0pXG4gIHN0b3AoKTogdm9pZCB7XG4gICAgcmV0dXJuO1xuICB9XG59XG4iXX0=