import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
export var DocumentScannerSourceType;
(function (DocumentScannerSourceType) {
    /**
     * Scan directly from device camera.
     * This is the default.
     */
    DocumentScannerSourceType[DocumentScannerSourceType["CAMERA"] = 1] = "CAMERA";
    /**
     * Scan from an image already stored on device.
     */
    DocumentScannerSourceType[DocumentScannerSourceType["GALLERY"] = 0] = "GALLERY";
})(DocumentScannerSourceType || (DocumentScannerSourceType = {}));
var DocumentScanner = /** @class */ (function (_super) {
    __extends(DocumentScanner, _super);
    function DocumentScanner() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DocumentScanner.prototype.scanDoc = function (opts) { return cordova(this, "scanDoc", { "callbackOrder": "reverse" }, arguments); };
    DocumentScanner.pluginName = "DocumentScanner";
    DocumentScanner.plugin = "cordova-plugin-document-scanner";
    DocumentScanner.pluginRef = "scan";
    DocumentScanner.repo = "https://github.com/NeutrinosPlatform/cordova-plugin-document-scanner";
    DocumentScanner.platforms = ["Android", "iOS"];
    DocumentScanner.decorators = [
        { type: Injectable }
    ];
    return DocumentScanner;
}(AwesomeCordovaNativePlugin));
export { DocumentScanner };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvZG9jdW1lbnQtc2Nhbm5lci9uZ3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyx1Q0FBK0MsTUFBTSwrQkFBK0IsQ0FBQztBQUU1RixNQUFNLENBQU4sSUFBWSx5QkFXWDtBQVhELFdBQVkseUJBQXlCO0lBQ25DOzs7T0FHRztJQUNILDZFQUFVLENBQUE7SUFFVjs7T0FFRztJQUNILCtFQUFXLENBQUE7QUFDYixDQUFDLEVBWFcseUJBQXlCLEtBQXpCLHlCQUF5QixRQVdwQzs7SUFnRW9DLG1DQUEwQjs7OztJQVU3RCxpQ0FBTyxhQUFDLElBQTZCOzs7Ozs7O2dCQVh0QyxVQUFVOzswQkE3RVg7RUE4RXFDLDBCQUEwQjtTQUFsRCxlQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29yZG92YSwgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bhd2Vzb21lLWNvcmRvdmEtcGx1Z2lucy9jb3JlJztcblxuZXhwb3J0IGVudW0gRG9jdW1lbnRTY2FubmVyU291cmNlVHlwZSB7XG4gIC8qKlxuICAgKiBTY2FuIGRpcmVjdGx5IGZyb20gZGV2aWNlIGNhbWVyYS5cbiAgICogVGhpcyBpcyB0aGUgZGVmYXVsdC5cbiAgICovXG4gIENBTUVSQSA9IDEsXG5cbiAgLyoqXG4gICAqIFNjYW4gZnJvbSBhbiBpbWFnZSBhbHJlYWR5IHN0b3JlZCBvbiBkZXZpY2UuXG4gICAqL1xuICBHQUxMRVJZID0gMCxcbn1cblxuZXhwb3J0IGludGVyZmFjZSBEb2N1bWVudFNjYW5uZXJPcHRpb25zIHtcbiAgLyoqXG4gICAqIENob29zZSB0byBzY2FuIGZyb20gY2FtZXJhIG9yIGV4aXN0aW5nIGltYWdlIGZpbGUuIE9ubHkgdmFsaWQgZm9yIEFuZHJvaWQuXG4gICAqL1xuICBzb3VyY2VUeXBlPzogRG9jdW1lbnRTY2FubmVyU291cmNlVHlwZTtcblxuICAvKipcbiAgICogRmlsZW5hbWUgdG8gc2F2ZSBzY2FubmVkIGltYWdlIHRvIChtaW51cyBleHRlbnNpb24sIHdoaWNoIGlzIGFsd2F5cyBcIi5wbmdcIikuXG4gICAqIE9ubHkgdmFsaWQgZm9yIGlPUy4gQ2FsbGVyIGlzIHJlc3BvbnNpYmxlIGZvciBjbGVhbmluZyB1cCBhbnkgZmlsZXMgY3JlYXRlZFxuICAgKiBpZiB0aGlzIHBhcmFtZXRlciBpcyBzZXQgdG8gYW55dGhpbmcgb3RoZXIgdGhhbiB0aGUgZGVmYXVsdCB2YWx1ZSxcbiAgICogd2hpY2ggaXMgXCJpbWFnZVwiLlxuICAgKi9cbiAgZmlsZU5hbWU/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFF1YWxpdHkgdG8gdXNlIHdoZW4gY2FwdHVyaW5nIHRoZSBpbWFnZSwgbXVzdCBiZSBhIGZsb2F0IHZhbHVlXG4gICAqIGZyb20gMS4wKGRlZmF1bHQgLSBIaWdoZXN0IHF1YWxpdHkpIHRvIDUuMChMb3dlc3QgUXVhbGl0eSkuIEFueSB2YWx1ZVxuICAgKiBpbiBiZXR3ZWVuIHdpbGwgYmUgYWNjZXB0ZWQuIEFueSB2YWx1ZSBub3QgZXF1YWwgdG8gb3Igbm90IGJldHdlZW4gdGhlc2UgdmFsdWVzXG4gICAqICB3aWxsIGRlZmF1bHQgdG8gdGhlIGhpZ2hlc3QgcXVhbGl0eSBvZiAxLjAuXG4gICAqL1xuICBxdWFsaXR5PzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBJZiB0aGUgaW1hZ2Ugc2hvdWxkIGJlIHJldHVybmVkIGFzIGEgYmFzZTY0IGVuY29kaW5nIGluc3RlYWQgb2YgYXMgYSBmaWxlIFVSTC5cbiAgICogSWYgdHJ1ZSwgdGhlIHBsdWdpbiB3aWxsIHJldHVybiB0aGUgc2Nhbm5lZCBpbWFnZSBhcyBiYXNlNjQuIElmIGZhbHNlLFxuICAgKiB0aGUgcGx1Z2luIHdpbGwgcmV0dXJuIHRoZSBpbWFnZSBVUkwgb2YgdGhlIGltYWdlLlxuICAgKi9cbiAgcmV0dXJuQmFzZTY0PzogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBAbmFtZSBEb2N1bWVudCBTY2FubmVyXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoaXMgcGx1Z2luIHByb2Nlc3NlcyBpbWFnZXMgb2YgZG9jdW1lbnRzLCBjb21wZW5zYXRpbmcgZm9yIHBlcnNwZWN0aXZlLlxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBEb2N1bWVudFNjYW5uZXIsIERvY3VtZW50U2Nhbm5lck9wdGlvbnMgfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvZG9jdW1lbnQtc2Nhbm5lcic7XG4gKlxuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgZG9jdW1lbnRTY2FubmVyOiBEb2N1bWVudFNjYW5uZXIpIHsgfVxuICpcbiAqIC4uLlxuICpcbiAqIGxldCBvcHRzOiBEb2N1bWVudFNjYW5uZXJPcHRpb25zID0ge307XG4gKiB0aGlzLmRvY3VtZW50U2Nhbm5lci5zY2FuRG9jdW1lbnQob3B0cylcbiAqICAgLnRoZW4oKHJlczogc3RyaW5nKSA9PiBjb25zb2xlLmxvZyhyZXMpKVxuICogICAuY2F0Y2goKGVycm9yOiBhbnkpID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcbiAqXG4gKiBgYGBcbiAqIEBpbnRlcmZhY2VzXG4gKiBEb2N1bWVudFNjYW5uZXJPcHRpb25zXG4gKiBAZW51bXNcbiAqIERvY3VtZW50U2Nhbm5lclNvdXJjZVR5cGVcbiAqL1xuQFBsdWdpbih7XG4gIHBsdWdpbk5hbWU6ICdEb2N1bWVudFNjYW5uZXInLFxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1kb2N1bWVudC1zY2FubmVyJyxcbiAgcGx1Z2luUmVmOiAnc2NhbicsXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vTmV1dHJpbm9zUGxhdGZvcm0vY29yZG92YS1wbHVnaW4tZG9jdW1lbnQtc2Nhbm5lcicsXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddLFxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBEb2N1bWVudFNjYW5uZXIgZXh0ZW5kcyBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiB7XG4gIC8qKlxuICAgKiBTY2FuIGEgZG9jdW1lbnRcbiAgICpcbiAgICogQHBhcmFtIG9wdHMge0RvY3VtZW50U2Nhbm5lck9wdGlvbnN9IG9wdGlvbmFsIHBhcmFtZXRlciBmb3IgY29udHJvbGxpbmcgc2Nhbm5pbmdcbiAgICogQHJldHVybnMge1Byb21pc2U8c3RyaW5nPn0gZmlsZSBVUkwgb2Ygc2Nhbm5lZCBkb2N1bWVudCBpbWFnZVxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIGNhbGxiYWNrT3JkZXI6ICdyZXZlcnNlJyxcbiAgfSlcbiAgc2NhbkRvYyhvcHRzPzogRG9jdW1lbnRTY2FubmVyT3B0aW9ucyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgcmV0dXJuO1xuICB9XG59XG4iXX0=