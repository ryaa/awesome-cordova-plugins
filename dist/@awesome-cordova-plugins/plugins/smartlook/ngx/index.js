import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import * as i0 from "@angular/core";
var SmartlookSetupConfigBuilder = /** @class */ (function () {
    function SmartlookSetupConfigBuilder(smartlookAPIKey) {
        this._smartlookSetupConfig = new SmartlookSetupConfig(smartlookAPIKey);
    }
    SmartlookSetupConfigBuilder.prototype.fps = function (fps) {
        this._smartlookSetupConfig.fps = fps;
        return this;
    };
    SmartlookSetupConfigBuilder.prototype.renderingMode = function (renderingMode) {
        this._smartlookSetupConfig.renderingMode = renderingMode.getRenderingModeString();
        return this;
    };
    SmartlookSetupConfigBuilder.prototype.startNewSession = function (startNewSession) {
        this._smartlookSetupConfig.startNewSession = startNewSession;
        return this;
    };
    SmartlookSetupConfigBuilder.prototype.startNewSessionAndUser = function (startNewSessionAndUser) {
        this._smartlookSetupConfig.startNewSessionAndUser = startNewSessionAndUser;
        return this;
    };
    SmartlookSetupConfigBuilder.prototype.eventTrackingModes = function (eventTrackingModes) {
        this._smartlookSetupConfig.eventTrackingModes = eventTrackingModes.getEventTrackingModeStringArray();
        return this;
    };
    SmartlookSetupConfigBuilder.prototype.build = function () {
        return this._smartlookSetupConfig;
    };
    return SmartlookSetupConfigBuilder;
}());
export { SmartlookSetupConfigBuilder };
var SmartlookSetupConfig = /** @class */ (function () {
    function SmartlookSetupConfig(smartlookAPIKey) {
        this.smartlookAPIKey = smartlookAPIKey;
    }
    return SmartlookSetupConfig;
}());
export { SmartlookSetupConfig };
var SmartlookResetSession = /** @class */ (function () {
    function SmartlookResetSession(resetUser) {
        this.resetUser = resetUser;
    }
    return SmartlookResetSession;
}());
export { SmartlookResetSession };
var SmartlookUserIdentifier = /** @class */ (function () {
    function SmartlookUserIdentifier(identifier, sessionProperties) {
        this.identifier = identifier;
        this.sessionProperties = sessionProperties;
    }
    return SmartlookUserIdentifier;
}());
export { SmartlookUserIdentifier };
var SmartlookEventTrackingMode = /** @class */ (function () {
    function SmartlookEventTrackingMode(eventTrackingMode) {
        this.eventTrackingMode = eventTrackingMode;
    }
    SmartlookEventTrackingMode.FULL_TRACKING = function () {
        return new SmartlookEventTrackingMode('full_tracking');
    };
    SmartlookEventTrackingMode.IGNORE_USER_INTERACTION = function () {
        return new SmartlookEventTrackingMode('ignore_user_interaction');
    };
    SmartlookEventTrackingMode.IGNORE_NAVIGATION_INTERACTION = function () {
        return new SmartlookEventTrackingMode('ignore_navigation_interaction');
    };
    SmartlookEventTrackingMode.IGNORE_RAGE_CLICKS = function () {
        return new SmartlookEventTrackingMode('ignore_rage_clicks');
    };
    SmartlookEventTrackingMode.NO_TRACKING = function () {
        return new SmartlookEventTrackingMode('no_tracking');
    };
    SmartlookEventTrackingMode.prototype.getEventTrackingModeString = function () {
        return this.eventTrackingMode;
    };
    return SmartlookEventTrackingMode;
}());
export { SmartlookEventTrackingMode };
var SmartlookEventTrackingModes = /** @class */ (function () {
    function SmartlookEventTrackingModes(eventTrackingModes) {
        this.eventTrackingModes = eventTrackingModes.map(function (eventTrackingMode) {
            return eventTrackingMode.getEventTrackingModeString();
        });
    }
    SmartlookEventTrackingModes.prototype.getEventTrackingModeStringArray = function () {
        return this.eventTrackingModes;
    };
    return SmartlookEventTrackingModes;
}());
export { SmartlookEventTrackingModes };
var SmartlookViewState = /** @class */ (function () {
    function SmartlookViewState() {
    }
    SmartlookViewState.START = 'start';
    SmartlookViewState.STOP = 'stop';
    return SmartlookViewState;
}());
export { SmartlookViewState };
var SmartlookNavigationEvent = /** @class */ (function () {
    function SmartlookNavigationEvent(name, viewState) {
        this.name = name;
        this.viewState = this.viewState;
    }
    return SmartlookNavigationEvent;
}());
export { SmartlookNavigationEvent };
var SmartlookCustomEvent = /** @class */ (function () {
    function SmartlookCustomEvent(name, eventProperties) {
        this.name = name;
        this.eventProperties = eventProperties;
    }
    return SmartlookCustomEvent;
}());
export { SmartlookCustomEvent };
var SmartlookTimedCustomEventStart = /** @class */ (function () {
    function SmartlookTimedCustomEventStart(name, eventProperties) {
        this.name = name;
        this.eventProperties = eventProperties;
    }
    return SmartlookTimedCustomEventStart;
}());
export { SmartlookTimedCustomEventStart };
var SmartlookTimedCustomEventStop = /** @class */ (function () {
    function SmartlookTimedCustomEventStop(eventId, eventProperties) {
        this.eventId = eventId;
        this.eventProperties = eventProperties;
    }
    return SmartlookTimedCustomEventStop;
}());
export { SmartlookTimedCustomEventStop };
var SmartlookTimedCustomEventCancel = /** @class */ (function () {
    function SmartlookTimedCustomEventCancel(eventId, reason, eventProperties) {
        this.eventId = eventId;
        this.reason = reason;
        this.eventProperties = eventProperties;
    }
    return SmartlookTimedCustomEventCancel;
}());
export { SmartlookTimedCustomEventCancel };
var SmartlookGlobalEventProperties = /** @class */ (function () {
    function SmartlookGlobalEventProperties(globalEventProperties, immutable) {
        this.globalEventProperties = globalEventProperties;
        this.immutable = immutable;
    }
    return SmartlookGlobalEventProperties;
}());
export { SmartlookGlobalEventProperties };
var SmartlookGlobalEventProperty = /** @class */ (function () {
    function SmartlookGlobalEventProperty(key, value, immutable) {
        this.key = key;
        this.value = value;
        this.immutable = immutable;
    }
    return SmartlookGlobalEventProperty;
}());
export { SmartlookGlobalEventProperty };
var SmartlookGlobalEventPropertyKey = /** @class */ (function () {
    function SmartlookGlobalEventPropertyKey(key) {
        this.key = key;
    }
    return SmartlookGlobalEventPropertyKey;
}());
export { SmartlookGlobalEventPropertyKey };
var SmartlookReferrer = /** @class */ (function () {
    function SmartlookReferrer(referrer, source) {
        this.referrer = referrer;
        this.source = source;
    }
    return SmartlookReferrer;
}());
export { SmartlookReferrer };
var SmartlookDashboardSessionUrl = /** @class */ (function () {
    function SmartlookDashboardSessionUrl(withCurrentTimestamp) {
        this.withCurrentTimestamp = withCurrentTimestamp;
    }
    return SmartlookDashboardSessionUrl;
}());
export { SmartlookDashboardSessionUrl };
var SmartlookRenderingMode = /** @class */ (function () {
    function SmartlookRenderingMode(renderingMode) {
        this.renderingMode = renderingMode;
    }
    SmartlookRenderingMode.NO_RENDERING = function () {
        return new SmartlookRenderingMode('no_rendering');
    };
    SmartlookRenderingMode.NATIVE = function () {
        return new SmartlookRenderingMode('native');
    };
    SmartlookRenderingMode.prototype.getRenderingModeString = function () {
        return this.renderingMode;
    };
    return SmartlookRenderingMode;
}());
export { SmartlookRenderingMode };
var Smartlook = /** @class */ (function (_super) {
    __extends(Smartlook, _super);
    function Smartlook() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Smartlook.prototype.setupAndStartRecording = function (config) { return cordova(this, "setupAndStartRecording", { "sync": true }, arguments); };
    Smartlook.prototype.setup = function (config) { return cordova(this, "setup", { "sync": true }, arguments); };
    Smartlook.prototype.startRecording = function () { return cordova(this, "startRecording", { "sync": true }, arguments); };
    Smartlook.prototype.stopRecording = function () { return cordova(this, "stopRecording", { "sync": true }, arguments); };
    Smartlook.prototype.isRecording = function () { return cordova(this, "isRecording", {}, arguments); };
    Smartlook.prototype.resetSession = function (resetSession) { return cordova(this, "resetSession", { "sync": true }, arguments); };
    Smartlook.prototype.startFullscreenSensitiveMode = function () { return cordova(this, "startFullscreenSensitiveMode", { "sync": true }, arguments); };
    Smartlook.prototype.stopFullscreenSensitiveMode = function () { return cordova(this, "stopFullscreenSensitiveMode", { "sync": true }, arguments); };
    Smartlook.prototype.isFullscreenSensitiveModeActive = function () { return cordova(this, "isFullscreenSensitiveModeActive", {}, arguments); };
    Smartlook.prototype.setUserIdentifier = function (identifier) { return cordova(this, "setUserIdentifier", { "sync": true }, arguments); };
    Smartlook.prototype.setEventTrackingMode = function (eventTrackingMode) { return cordova(this, "setEventTrackingMode", { "sync": true }, arguments); };
    Smartlook.prototype.setEventTrackingModes = function (eventTrackingModes) { return cordova(this, "setEventTrackingModes", { "sync": true }, arguments); };
    Smartlook.prototype.trackNavigationEvent = function (navigationEvent) { return cordova(this, "trackNavigationEvent", { "sync": true }, arguments); };
    Smartlook.prototype.startTimedCustomEvent = function (timedEvent) { return cordova(this, "startTimedCustomEvent", {}, arguments); };
    Smartlook.prototype.stopTimedCustomEvent = function (timedEvent) { return cordova(this, "stopTimedCustomEvent", { "sync": true }, arguments); };
    Smartlook.prototype.cancelTimedCustomEvent = function (timedEvent) { return cordova(this, "cancelTimedCustomEvent", { "sync": true }, arguments); };
    Smartlook.prototype.trackCustomEvent = function (event) { return cordova(this, "trackCustomEvent", { "sync": true }, arguments); };
    Smartlook.prototype.setGlobalEventProperties = function (properties) { return cordova(this, "setGlobalEventProperties", { "sync": true }, arguments); };
    Smartlook.prototype.setGlobalEventProperty = function (property) { return cordova(this, "setGlobalEventProperty", { "sync": true }, arguments); };
    Smartlook.prototype.removeGlobalEventProperty = function (property) { return cordova(this, "removeGlobalEventProperty", { "sync": true }, arguments); };
    Smartlook.prototype.removeAllGlobalEventProperties = function () { return cordova(this, "removeAllGlobalEventProperties", { "sync": true }, arguments); };
    Smartlook.prototype.setReferrer = function (referrer) { return cordova(this, "setReferrer", { "sync": true }, arguments); };
    Smartlook.prototype.getDashboardSessionUrl = function (smartlookDashboardSessionUrl) { return cordova(this, "getDashboardSessionUrl", {}, arguments); };
    Smartlook.prototype.getDashboardVisitorUrl = function () { return cordova(this, "getDashboardVisitorUrl", {}, arguments); };
    Smartlook.prototype.registerIntegrationListener = function (integrationListener) { return cordova(this, "registerIntegrationListener", { "sync": true }, arguments); };
    Smartlook.prototype.setRenderingMode = function (renderingMode) { return cordova(this, "setRenderingMode", { "sync": true }, arguments); };
    Smartlook.prototype.unregisterIntegrationListener = function () { return cordova(this, "unregisterIntegrationListener", { "sync": true }, arguments); };
    Smartlook.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: Smartlook, deps: null, target: i0.ɵɵFactoryTarget.Injectable });
    Smartlook.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: Smartlook });
    Smartlook.pluginName = "Smartlook";
    Smartlook.plugin = "https://github.com/smartlook/cordova-smartlook.git";
    Smartlook.pluginRef = "cordova.plugins.SmartlookPlugin";
    Smartlook.repo = "https://github.com/smartlook/cordova-smartlook.git";
    Smartlook.platforms = ["Android", "iOS"];
    Smartlook = __decorate([], Smartlook);
    return Smartlook;
}(AwesomeCordovaNativePlugin));
export { Smartlook };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: Smartlook, decorators: [{
            type: Injectable
        }], propDecorators: { setupAndStartRecording: [], setup: [], startRecording: [], stopRecording: [], isRecording: [], resetSession: [], startFullscreenSensitiveMode: [], stopFullscreenSensitiveMode: [], isFullscreenSensitiveModeActive: [], setUserIdentifier: [], setEventTrackingMode: [], setEventTrackingModes: [], trackNavigationEvent: [], startTimedCustomEvent: [], stopTimedCustomEvent: [], cancelTimedCustomEvent: [], trackCustomEvent: [], setGlobalEventProperties: [], setGlobalEventProperty: [], removeGlobalEventProperty: [], removeAllGlobalEventProperties: [], setReferrer: [], getDashboardSessionUrl: [], getDashboardVisitorUrl: [], registerIntegrationListener: [], setRenderingMode: [], unregisterIntegrationListener: [] } });
//# sourceMappingURL=data:application/json;base64,