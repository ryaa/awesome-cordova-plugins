import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import * as i0 from "@angular/core";
var NewRelic = /** @class */ (function (_super) {
    __extends(NewRelic, _super);
    function NewRelic() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NewRelic.prototype.setUserId = function (userId) { return cordova(this, "setUserId", { "sync": true }, arguments); };
    NewRelic.prototype.setAttribute = function (name, value) { return cordova(this, "setAttribute", { "sync": true }, arguments); };
    NewRelic.prototype.removeAttribute = function (name) { return cordova(this, "removeAttribute", { "sync": true }, arguments); };
    NewRelic.prototype.recordBreadcrumb = function (name, eventAttributes) { return cordova(this, "recordBreadcrumb", { "sync": true }, arguments); };
    NewRelic.prototype.recordCustomEvent = function (eventType, eventName, eventAttributes) { return cordova(this, "recordCustomEvent", { "sync": true }, arguments); };
    NewRelic.prototype.startInteraction = function (name) { return cordova(this, "startInteraction", { "sync": true }, arguments); };
    NewRelic.prototype.endInteraction = function (name) { return cordova(this, "endInteraction", { "sync": true }, arguments); };
    NewRelic.prototype.crashNow = function (message) { return cordova(this, "crashNow", { "sync": true }, arguments); };
    NewRelic.prototype.currentSessionId = function (name) { return cordova(this, "currentSessionId", { "sync": true }, arguments); };
    NewRelic.prototype.incrementAttribute = function (name, value) { return cordova(this, "incrementAttribute", { "sync": true }, arguments); };
    NewRelic.prototype.recordMetric = function (name, category, value, countUnit, valueUnit) { return cordova(this, "recordMetric", { "sync": true }, arguments); };
    NewRelic.prototype.removeAllAttributes = function () { return cordova(this, "removeAllAttributes", { "sync": true }, arguments); };
    NewRelic.prototype.setMaxEventPoolSize = function (maxPoolSize) { return cordova(this, "setMaxEventPoolSize", { "sync": true }, arguments); };
    NewRelic.prototype.setMaxEventBufferTime = function (maxBufferTimeInSeconds) { return cordova(this, "setMaxEventBufferTime", { "sync": true }, arguments); };
    NewRelic.prototype.analyticsEventEnabled = function (enabled) { return cordova(this, "analyticsEventEnabled", { "sync": true }, arguments); };
    NewRelic.prototype.networkRequestEnabled = function (enabled) { return cordova(this, "networkRequestEnabled", { "sync": true }, arguments); };
    NewRelic.prototype.networkErrorRequestEnabled = function (enabled) { return cordova(this, "networkErrorRequestEnabled", { "sync": true }, arguments); };
    NewRelic.prototype.httpRequestBodyCaptureEnabled = function (enabled) { return cordova(this, "httpRequestBodyCaptureEnabled", { "sync": true }, arguments); };
    NewRelic.prototype.noticeHttpTransaction = function (url, method, status, startTime, endTime, bytesSent, bytesReceived, body) { return cordova(this, "noticeHttpTransaction", { "sync": true }, arguments); };
    NewRelic.prototype.noticeNetworkFailure = function (url, method, startTime, endTime, failure) { return cordova(this, "noticeNetworkFailure", { "sync": true }, arguments); };
    NewRelic.prototype.recordError = function (err) { return cordova(this, "recordError", { "sync": true }, arguments); };
    NewRelic.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: NewRelic, deps: null, target: i0.ɵɵFactoryTarget.Injectable });
    NewRelic.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: NewRelic });
    NewRelic.pluginName = "NewRelic";
    NewRelic.plugin = "newrelic-cordova-plugin";
    NewRelic.pluginRef = "NewRelic";
    NewRelic.repo = "https://github.com/newrelic/newrelic-cordova-plugin";
    NewRelic.install = "ionic cordova plugin add https://github.com/newrelic/newrelic-cordova-plugin.git --variable IOS_APP_TOKEN=\"{ios-app-token}\" --variable ANDROID_APP_TOKEN=\"{android-app-token}\"";
    NewRelic.installVariables = ["IOS_APP_TOKEN", "ANDROID_APP_TOKEN"];
    NewRelic.platforms = ["Android", "iOS"];
    NewRelic = __decorate([], NewRelic);
    return NewRelic;
}(AwesomeCordovaNativePlugin));
export { NewRelic };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: NewRelic, decorators: [{
            type: Injectable
        }], propDecorators: { setUserId: [], setAttribute: [], removeAttribute: [], recordBreadcrumb: [], recordCustomEvent: [], startInteraction: [], endInteraction: [], crashNow: [], currentSessionId: [], incrementAttribute: [], recordMetric: [], removeAllAttributes: [], setMaxEventPoolSize: [], setMaxEventBufferTime: [], analyticsEventEnabled: [], networkRequestEnabled: [], networkErrorRequestEnabled: [], httpRequestBodyCaptureEnabled: [], noticeHttpTransaction: [], noticeNetworkFailure: [], recordError: [] } });
//# sourceMappingURL=data:application/json;base64,