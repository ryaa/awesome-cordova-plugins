var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordovaInstance, cordova, checkAvailability } from '@awesome-cordova-plugins/core';
import { Observable } from 'rxjs';
var PushOriginal = /** @class */ (function (_super) {
    __extends(PushOriginal, _super);
    function PushOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Init push notifications
     *
     * @param options {PushOptions}
     * @returns {PushObject}
     */
    PushOriginal.prototype.init = function (options) {
        return new PushObject(options);
    };
    PushOriginal.prototype.hasPermission = function () { return cordova(this, "hasPermission", {}, arguments); };
    PushOriginal.prototype.createChannel = function (channel) { return cordova(this, "createChannel", { "callbackOrder": "reverse" }, arguments); };
    PushOriginal.prototype.deleteChannel = function (id) { return cordova(this, "deleteChannel", { "callbackOrder": "reverse" }, arguments); };
    PushOriginal.prototype.listChannels = function () { return cordova(this, "listChannels", {}, arguments); };
    PushOriginal.pluginName = "Push";
    PushOriginal.plugin = "phonegap-plugin-push";
    PushOriginal.pluginRef = "PushNotification";
    PushOriginal.repo = "https://github.com/phonegap/phonegap-plugin-push";
    PushOriginal.install = "ionic cordova plugin add phonegap-plugin-push";
    PushOriginal.platforms = ["Android", "Browser", "iOS", "Windows"];
    return PushOriginal;
}(AwesomeCordovaNativePlugin));
var Push = new PushOriginal();
export { Push };
var PushObject = /** @class */ (function () {
    function PushObject(options) {
        if (checkAvailability('PushNotification', 'init', 'PushNotification') === true) {
            if (typeof window !== 'undefined') {
                this._objectInstance = window.PushNotification.init(options);
            }
        }
    }
    PushObject.prototype.on = function (event) { return cordovaInstance(this, "on", { "observable": true, "clearFunction": "off", "clearWithArgs": true }, arguments); };
    PushObject.prototype.unregister = function () { return cordovaInstance(this, "unregister", {}, arguments); };
    PushObject.prototype.setApplicationIconBadgeNumber = function (count) { return cordovaInstance(this, "setApplicationIconBadgeNumber", { "callbackOrder": "reverse" }, arguments); };
    PushObject.prototype.getApplicationIconBadgeNumber = function () { return cordovaInstance(this, "getApplicationIconBadgeNumber", {}, arguments); };
    PushObject.prototype.finish = function (id) { return cordovaInstance(this, "finish", { "callbackOrder": "reverse" }, arguments); };
    PushObject.prototype.clearAllNotifications = function () { return cordovaInstance(this, "clearAllNotifications", {}, arguments); };
    PushObject.prototype.subscribe = function (topic) { return cordovaInstance(this, "subscribe", {}, arguments); };
    PushObject.prototype.unsubscribe = function (topic) { return cordovaInstance(this, "unsubscribe", {}, arguments); };
    PushObject.pluginName = "Push";
    PushObject.plugin = "phonegap-plugin-push";
    PushObject.pluginRef = "PushNotification";
    return PushObject;
}());
export { PushObject };
//# sourceMappingURL=data:application/json;base64,