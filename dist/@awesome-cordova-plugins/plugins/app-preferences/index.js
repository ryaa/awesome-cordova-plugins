var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import { Observable } from 'rxjs';
var AppPreferencesOriginal = /** @class */ (function (_super) {
    __extends(AppPreferencesOriginal, _super);
    function AppPreferencesOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AppPreferencesOriginal.prototype.fetch = function (dict, key) { return cordova(this, "fetch", { "callbackOrder": "reverse" }, arguments); };
    AppPreferencesOriginal.prototype.store = function (dict, key, value) { return cordova(this, "store", { "callbackOrder": "reverse" }, arguments); };
    AppPreferencesOriginal.prototype.remove = function (dict, key) { return cordova(this, "remove", { "callbackOrder": "reverse" }, arguments); };
    AppPreferencesOriginal.prototype.clearAll = function () { return cordova(this, "clearAll", { "callbackOrder": "reverse" }, arguments); };
    AppPreferencesOriginal.prototype.show = function () { return cordova(this, "show", { "callbackOrder": "reverse" }, arguments); };
    AppPreferencesOriginal.prototype.watch = function (subscribe) { return cordova(this, "watch", { "observable": true }, arguments); };
    AppPreferencesOriginal.prototype.suite = function (suiteName) { return cordova(this, "suite", { "platforms": ["Android"], "sync": true }, arguments); };
    AppPreferencesOriginal.prototype.iosSuite = function (suiteName) { return cordova(this, "iosSuite", { "platforms": ["iOS"], "sync": true }, arguments); };
    AppPreferencesOriginal.prototype.cloudSync = function () { return cordova(this, "cloudSync", { "platforms": ["iOS", "Windows", "Windows Phone 8"] }, arguments); };
    AppPreferencesOriginal.prototype.defaults = function () { return cordova(this, "defaults", { "platforms": ["iOS", "Windows", "Windows Phone 8"] }, arguments); };
    AppPreferencesOriginal.pluginName = "AppPreferences";
    AppPreferencesOriginal.plugin = "cordova-plugin-app-preferences";
    AppPreferencesOriginal.pluginRef = "plugins.appPreferences";
    AppPreferencesOriginal.repo = "https://github.com/apla/me.apla.cordova.app-preferences";
    AppPreferencesOriginal.platforms = ["Android", "BlackBerry 10", "Browser", "iOS", "macOS", "Windows 8", "Windows Phone"];
    return AppPreferencesOriginal;
}(AwesomeCordovaNativePlugin));
var AppPreferences = new AppPreferencesOriginal();
export { AppPreferences };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvYXBwLXByZWZlcmVuY2VzL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQSxPQUFPLHVDQUErQyxNQUFNLCtCQUErQixDQUFDO0FBQzVGLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7O0lBMkJFLGtDQUEwQjs7OztJQVc1RCw4QkFBSyxhQUFDLElBQVksRUFBRSxHQUFZO0lBZWhDLDhCQUFLLGFBQUMsSUFBWSxFQUFFLEdBQVcsRUFBRSxLQUFXO0lBYzVDLCtCQUFNLGFBQUMsSUFBWSxFQUFFLEdBQVk7SUFZakMsaUNBQVE7SUFZUiw2QkFBSTtJQWFKLDhCQUFLLGFBQUMsU0FBa0I7SUFnQnhCLDhCQUFLLGFBQUMsU0FBaUI7SUFRdkIsaUNBQVEsYUFBQyxTQUFpQjtJQWExQixrQ0FBUztJQWFULGlDQUFROzs7Ozs7eUJBM0pWO0VBNEJvQywwQkFBMEI7U0FBakQsY0FBYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvcmRvdmEsIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qKlxuICogQG5hbWUgQXBwIFByZWZlcmVuY2VzXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoaXMgcGx1Z2luIGFsbG93cyB5b3UgdG8gcmVhZCBhbmQgd3JpdGUgYXBwIHByZWZlcmVuY2VzXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IEFwcFByZWZlcmVuY2VzIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL2FwcC1wcmVmZXJlbmNlcy9uZ3gnO1xuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgYXBwUHJlZmVyZW5jZXM6IEFwcFByZWZlcmVuY2VzKSB7IH1cbiAqXG4gKiAuLi5cbiAqXG4gKiB0aGlzLmFwcFByZWZlcmVuY2VzLmZldGNoKCdrZXknKS50aGVuKChyZXMpID0+IHsgY29uc29sZS5sb2cocmVzKTsgfSk7XG4gKlxuICogYGBgXG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnQXBwUHJlZmVyZW5jZXMnLFxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1hcHAtcHJlZmVyZW5jZXMnLFxuICBwbHVnaW5SZWY6ICdwbHVnaW5zLmFwcFByZWZlcmVuY2VzJyxcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9hcGxhL21lLmFwbGEuY29yZG92YS5hcHAtcHJlZmVyZW5jZXMnLFxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdCbGFja0JlcnJ5IDEwJywgJ0Jyb3dzZXInLCAnaU9TJywgJ21hY09TJywgJ1dpbmRvd3MgOCcsICdXaW5kb3dzIFBob25lJ10sXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEFwcFByZWZlcmVuY2VzIGV4dGVuZHMgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4ge1xuICAvKipcbiAgICogR2V0IGEgcHJlZmVyZW5jZSB2YWx1ZVxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZGljdCBEaWN0aW9uYXJ5IGZvciBrZXkgKE9QVElPTkFMKVxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IEtleVxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIGNhbGxiYWNrT3JkZXI6ICdyZXZlcnNlJyxcbiAgfSlcbiAgZmV0Y2goZGljdDogc3RyaW5nLCBrZXk/OiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgYSBwcmVmZXJlbmNlIHZhbHVlXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBkaWN0IERpY3Rpb25hcnkgZm9yIGtleSAoT1BUSU9OQUwpXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgS2V5XG4gICAqIEBwYXJhbSB7YW55fSB2YWx1ZSBWYWx1ZVxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIGNhbGxiYWNrT3JkZXI6ICdyZXZlcnNlJyxcbiAgfSlcbiAgc3RvcmUoZGljdDogc3RyaW5nLCBrZXk6IHN0cmluZywgdmFsdWU/OiBhbnkpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUgdmFsdWUgZnJvbSBwcmVmZXJlbmNlc1xuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZGljdCBEaWN0aW9uYXJ5IGZvciBrZXkgKE9QVElPTkFMKVxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IEtleVxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIGNhbGxiYWNrT3JkZXI6ICdyZXZlcnNlJyxcbiAgfSlcbiAgcmVtb3ZlKGRpY3Q6IHN0cmluZywga2V5Pzogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogQ2xlYXIgcHJlZmVyZW5jZXNcbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBjYWxsYmFja09yZGVyOiAncmV2ZXJzZScsXG4gIH0pXG4gIGNsZWFyQWxsKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFNob3cgbmF0aXZlIHByZWZlcmVuY2VzIGludGVyZmFjZVxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIGNhbGxiYWNrT3JkZXI6ICdyZXZlcnNlJyxcbiAgfSlcbiAgc2hvdygpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTaG93IG5hdGl2ZSBwcmVmZXJlbmNlcyBpbnRlcmZhY2VcbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFufSBzdWJzY3JpYmUgdHJ1ZSB2YWx1ZSB0byBzdWJzY3JpYmUsIGZhbHNlIC0gdW5zdWJzY3JpYmVcbiAgICogQHJldHVybnMge09ic2VydmFibGU8YW55Pn0gUmV0dXJucyBhbiBvYnNlcnZhYmxlXG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgb2JzZXJ2YWJsZTogdHJ1ZSxcbiAgfSlcbiAgd2F0Y2goc3Vic2NyaWJlOiBib29sZWFuKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIG5hbWVkIGNvbmZpZ3VyYXRpb24gY29udGV4dFxuICAgKiBJbiBpT1MgeW91J2xsIGdldCBhIHN1aXRlIGNvbmZpZ3VyYXRpb24sIG9uIEFuZHJvaWQg4oCUIG5hbWVkIGZpbGVcbiAgICogU3VwcG9ydHM6IEFuZHJvaWQsIGlPU1xuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3VpdGVOYW1lIHN1aXRlIG5hbWVcbiAgICogQHJldHVybnMge09iamVjdH0gQ3VzdG9tIG9iamVjdCwgYm91bmQgdG8gdGhhdCBzdWl0ZVxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIHBsYXRmb3JtczogWydBbmRyb2lkJ10sXG4gICAgc3luYzogdHJ1ZSxcbiAgfSlcbiAgc3VpdGUoc3VpdGVOYW1lOiBzdHJpbmcpOiBhbnkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIEBDb3Jkb3ZhKHtcbiAgICBwbGF0Zm9ybXM6IFsnaU9TJ10sXG4gICAgc3luYzogdHJ1ZSxcbiAgfSlcbiAgaW9zU3VpdGUoc3VpdGVOYW1lOiBzdHJpbmcpOiBhbnkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gY2xvdWQgc3luY2hyb25pemVkIGNvbmZpZ3VyYXRpb24gY29udGV4dFxuICAgKiBDdXJyZW50bHkgc3VwcG9ydHMgV2luZG93cyBhbmQgaU9TL21hY09TXG4gICAqXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IEN1c3RvbSBvYmplY3QsIGJvdW5kIHRvIHRoYXQgc3VpdGVcbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBwbGF0Zm9ybXM6IFsnaU9TJywgJ1dpbmRvd3MnLCAnV2luZG93cyBQaG9uZSA4J10sXG4gIH0pXG4gIGNsb3VkU3luYygpOiBPYmplY3Qge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gZGVmYXVsdCBjb25maWd1cmF0aW9uIGNvbnRleHRcbiAgICogQ3VycmVudGx5IHN1cHBvcnRzIFdpbmRvd3MgYW5kIGlPUy9tYWNPU1xuICAgKlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBDdXN0b20gT2JqZWN0LCBib3VuZCB0byB0aGF0IHN1aXRlXG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgcGxhdGZvcm1zOiBbJ2lPUycsICdXaW5kb3dzJywgJ1dpbmRvd3MgUGhvbmUgOCddLFxuICB9KVxuICBkZWZhdWx0cygpOiBPYmplY3Qge1xuICAgIHJldHVybjtcbiAgfVxufVxuIl19