import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import { Observable } from 'rxjs';
import * as i0 from "@angular/core";
var FirebaseDynamicLinks = /** @class */ (function (_super) {
    __extends(FirebaseDynamicLinks, _super);
    function FirebaseDynamicLinks() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FirebaseDynamicLinks.prototype.getDynamicLink = function () { return cordova(this, "getDynamicLink", { "otherPromise": true }, arguments); };
    FirebaseDynamicLinks.prototype.onDynamicLink = function () { return cordova(this, "onDynamicLink", { "callbackOrder": "reverse", "observable": true }, arguments); };
    FirebaseDynamicLinks.prototype.createDynamicLink = function (opts) { return cordova(this, "createDynamicLink", { "otherPromise": true }, arguments); };
    FirebaseDynamicLinks.prototype.createShortDynamicLink = function (opts) { return cordova(this, "createShortDynamicLink", { "otherPromise": true }, arguments); };
    FirebaseDynamicLinks.prototype.createUnguessableDynamicLink = function (opts) { return cordova(this, "createUnguessableDynamicLink", { "otherPromise": true }, arguments); };
    FirebaseDynamicLinks.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FirebaseDynamicLinks, deps: null, target: i0.ɵɵFactoryTarget.Injectable });
    FirebaseDynamicLinks.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FirebaseDynamicLinks });
    FirebaseDynamicLinks.pluginName = "FirebaseDynamicLinks";
    FirebaseDynamicLinks.plugin = " cordova-plugin-firebase-dynamiclinks";
    FirebaseDynamicLinks.pluginRef = "cordova.plugins.firebase.dynamiclinks";
    FirebaseDynamicLinks.repo = "https://github.com/chemerisuk/cordova-plugin-firebase-dynamiclinks";
    FirebaseDynamicLinks.install = "ionic cordova plugin add cordova-plugin-firebase-dynamiclinks --save --variable APP_DOMAIN=\"example.com\" --variable APP_PATH=\"/\"";
    FirebaseDynamicLinks.installVariables = ["APP_DOMAIN", "APP_PATH"];
    FirebaseDynamicLinks.platforms = ["Android", "iOS"];
    FirebaseDynamicLinks = __decorate([], FirebaseDynamicLinks);
    return FirebaseDynamicLinks;
}(AwesomeCordovaNativePlugin));
export { FirebaseDynamicLinks };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FirebaseDynamicLinks, decorators: [{
            type: Injectable
        }], propDecorators: { getDynamicLink: [], onDynamicLink: [], createDynamicLink: [], createShortDynamicLink: [], createUnguessableDynamicLink: [] } });
//# sourceMappingURL=data:application/json;base64,