var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import { Observable } from 'rxjs';
var FTPOriginal = /** @class */ (function (_super) {
    __extends(FTPOriginal, _super);
    function FTPOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FTPOriginal.prototype.connect = function (hostname, username, password) { return cordova(this, "connect", {}, arguments); };
    FTPOriginal.prototype.ls = function (path) { return cordova(this, "ls", {}, arguments); };
    FTPOriginal.prototype.mkdir = function (path) { return cordova(this, "mkdir", {}, arguments); };
    FTPOriginal.prototype.rmdir = function (path) { return cordova(this, "rmdir", {}, arguments); };
    FTPOriginal.prototype.rm = function (file) { return cordova(this, "rm", {}, arguments); };
    FTPOriginal.prototype.upload = function (localFile, remoteFile) { return cordova(this, "upload", { "observable": true }, arguments); };
    FTPOriginal.prototype.download = function (localFile, remoteFile) { return cordova(this, "download", { "observable": true }, arguments); };
    FTPOriginal.prototype.cancel = function () { return cordova(this, "cancel", {}, arguments); };
    FTPOriginal.prototype.disconnect = function () { return cordova(this, "disconnect", {}, arguments); };
    FTPOriginal.pluginName = "FTP";
    FTPOriginal.plugin = "cordova-plugin-ftp";
    FTPOriginal.pluginRef = "cordova.plugin.ftp";
    FTPOriginal.repo = "https://github.com/xfally/cordova-plugin-ftp";
    FTPOriginal.platforms = ["Android", "iOS"];
    return FTPOriginal;
}(AwesomeCordovaNativePlugin));
var FTP = new FTPOriginal();
export { FTP };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvZnRwL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFDQSxPQUFPLHVDQUErQyxNQUFNLCtCQUErQixDQUFDO0FBQzVGLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7O0lBOEJULHVCQUEwQjs7OztJQVlqRCxxQkFBTyxhQUFDLFFBQWdCLEVBQUUsUUFBZ0IsRUFBRSxRQUFnQjtJQW1CNUQsZ0JBQUUsYUFBQyxJQUFZO0lBV2YsbUJBQUssYUFBQyxJQUFZO0lBYWxCLG1CQUFLLGFBQUMsSUFBWTtJQVdsQixnQkFBRSxhQUFDLElBQVk7SUFnQmYsb0JBQU0sYUFBQyxTQUFpQixFQUFFLFVBQWtCO0lBZ0I1QyxzQkFBUSxhQUFDLFNBQWlCLEVBQUUsVUFBa0I7SUFVOUMsb0JBQU07SUFVTix3QkFBVTs7Ozs7O2NBdEpaO0VBZ0N5QiwwQkFBMEI7U0FBdEMsR0FBRyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvcmRvdmEsIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5cbi8qKlxuICogQG5hbWUgRlRQXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoaXMgY29yZG92YSBwbHVnaW4gaXMgY3JlYXRlZCB0byB1c2UgZnRwIChjbGllbnQpIGluIHdlYi9qcy5cbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgRlRQIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL2Z0cC9uZ3gnO1xuICpcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGZUUDogRlRQKSB7IH1cbiAqXG4gKiAuLi5cbiAqXG4gKlxuICogdGhpcy5mVFAuY29ubmVjdCgnZnRwX2hvc3QnLCAnZnRwX3VzZXInLCAnZnRwX3Bhc3N3b3JkJylcbiAqICAgLnRoZW4oKHJlczogYW55KSA9PiBjb25zb2xlLmxvZygnTG9naW4gc3VjY2Vzc2Z1bCcsIHJlcykpXG4gKiAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xuICpcbiAqIGBgYFxuICovXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ0ZUUCcsXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLWZ0cCcsXG4gIHBsdWdpblJlZjogJ2NvcmRvdmEucGx1Z2luLmZ0cCcsXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20veGZhbGx5L2NvcmRvdmEtcGx1Z2luLWZ0cCcsXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddLFxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBGVFAgZXh0ZW5kcyBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiB7XG4gIC8qKlxuICAgKiBDb25uZWN0IHRvIG9uZSBmdHAgc2VydmVyLlxuICAgKlxuICAgKiBKdXN0IG5lZWQgdG8gaW5pdCB0aGUgY29ubmVjdGlvbiBvbmNlLiBJZiBzdWNjZXNzLCB5b3UgY2FuIGRvIGFueSBmdHAgYWN0aW9ucyBsYXRlci5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGhvc3RuYW1lIFRoZSBmdHAgc2VydmVyIHVybC4gTGlrZSBpcCB3aXRob3V0IHByb3RvY29sIHByZWZpeCwgZS5nLiBcIjE5Mi4xNjguMS4xXCIuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1c2VybmFtZSBUaGUgZnRwIGxvZ2luIHVzZXJuYW1lLiBJZiBpdCBhbmQgYHBhc3N3b3JkYCBhcmUgYWxsIGJsYW5rL3VuZGVmaW5lZCwgdGhlIGRlZmF1bHQgdXNlcm5hbWUgXCJhbm9ueW1vdXNcIiBpcyB1c2VkLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcGFzc3dvcmQgVGhlIGZ0cCBsb2dpbiBwYXNzd29yZC4gSWYgaXQgYW5kIGB1c2VybmFtZWAgYXJlIGFsbCBibGFuay91bmRlZmluZWQsIHRoZSBkZWZhdWx0IHBhc3N3b3JkIFwiYW5vbnltb3VzQFwiIGlzIHVzZWQuXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IFRoZSBzdWNjZXNzIGNhbGxiYWNrLiBOb3RpY2U6IEZvciBpT1MsIGlmIHRyaWdnZXJlZCwgbWVhbnMgYGluaXRgIHN1Y2Nlc3MsIGJ1dCBOT1QgbWVhbnMgdGhlIGxhdGVyIGFjdGlvbiwgZS5nLiBgbHNgLi4uIGBkb3dubG9hZGAgd2lsbCBzdWNjZXNzIVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBjb25uZWN0KGhvc3RuYW1lOiBzdHJpbmcsIHVzZXJuYW1lOiBzdHJpbmcsIHBhc3N3b3JkOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBMaXN0IGZpbGVzICh3aXRoIGluZm8gb2YgYG5hbWVgLCBgdHlwZWAsIGBsaW5rYCwgYHNpemVgLCBgbW9kaWZpZWREYXRlYCkgdW5kZXIgb25lIGRpcmVjdG9yeSBvbiB0aGUgZnRwIHNlcnZlci5cbiAgICogWW91IGNhbiBnZXQgb25lIGZpbGUncyBuYW1lIHVzaW5nIGBmaWxlTGlzdFt4XS5uYW1lYCAoYHhgIGlzIHRoZSBsb2NhdGlvbiBpbiBhcnJheSkuXG4gICAqXG4gICAqIEV4cGxhaW4ga2V5OlxuICAgKiAtIG5hbWU6IGZpbGUgbmFtZSAodXRmLTgpLlxuICAgKiAtIHR5cGU6IGZpbGUgdHlwZS4gbnVtYmVyIGAwYCBtZWFucyByZWd1bGFyIGZpbGUsIGAxYCBtZWFucyBkaXJlY3RvcnksIGAyYCBtZWFucyBzeW1ib2xpYyBsaW5rLCBgLTFgIG1lYW5zIHVua25vd24gdHlwZSAobWF5YmUgYmxvY2sgZGV2LCBjaGFyIGRldi4uLikuXG4gICAqIC0gbGluazogaWYgdGhlIGZpbGUgaXMgYSBzeW1ib2xpYyBsaW5rLCB0aGVuIHRoaXMgZmllbGQgc3RvcmUgc3ltYm9saWMgbGluayBpbmZvcm1hdGlvbiAodXRmLTgpLCBlbHNlIGl0J3MgYSBibGFuayBzdHJpbmcuXG4gICAqIC0gc2l6ZTogZmlsZSBzaXplIGluIGJ5dGVzLlxuICAgKiAtIG1vZGlmaWVkRGF0ZTogbW9kaWZpZWQgZGF0ZSBvZiB0aGlzIGZpbGUuIGRhdGUgZm9ybWF0IGlzIGB5eXl5LU1NLWRkIEhIOm1tOnNzIHp6emAsIGUuZyBcIjIwMTUtMTItMDEgMjA6NDU6MDAgR01UKzhcIi5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHBhdGggVGhlIHBhdGggb24gdGhlIGZ0cCBzZXJ2ZXIuIGUuZy4gXCIvYWRmLzEyMy9cIi5cbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgbHMocGF0aDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIG9uZSBkaXJlY3Rvcnkgb24gdGhlIGZ0cCBzZXJ2ZXIuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9uIHRoZSBmdHAgc2VydmVyLiBlLmcuIFwiL2FkZi8xMjMvXCIuXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIG1rZGlyKHBhdGg6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIERlbGV0ZSBvbmUgZGlyZWN0b3J5IG9uIHRoZSBmdHAgc2VydmVyLlxuICAgKlxuICAgKiBUaXA6IEFzIG1hbnkgZnRwIHNlcnZlciBjb3VsZCBub3Qgcm0gZGlyIHdoZW4gaXQncyBub3QgZW1wdHksIHNvIHJtIGFsbCBmaWxlcyB1bmRlciB0aGUgZGlyIGF0IGZpcnN0IGlzIHJlY29tbWVuZGVkLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBUaGUgZmlsZSAod2l0aCBmdWxsIHBhdGgpIHlvdSB3YW50IHRvIGRlbGV0ZS4gZS5nLiBcIi9hZGYvMTIzL25ld0Rpci9teUZpbGVcIi5cbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgcm1kaXIocGF0aDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogRGVsZXRlIG9uZSBmaWxlIG9uIHRoZSBmdHAgc2VydmVyLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZmlsZSBUaGUgZmlsZSAod2l0aCBmdWxsIHBhdGgpIHlvdSB3YW50IHRvIGRlbGV0ZS4gZS5nLiBcIi9hZGYvMTIzL25ld0Rpci9teUZpbGVcIi5cbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgcm0oZmlsZTogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogVXBsb2FkIG9uZSBsb2NhbCBmaWxlIHRvIHRoZSBmdHAgc2VydmVyLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbG9jYWxGaWxlIFRoZSBmaWxlICh3aXRoIGZ1bGwgcGF0aCkgeW91IHdhbnQgdG8gdXBsb2FkLiBlLmcuIFwiL2xvY2FsL3BhdGgvdG8vbG9jYWxGaWxlXCIuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZW1vdGVGaWxlIFRoZSBmaWxlICh3aXRoIGZ1bGwgcGF0aCkgeW91IHdhbnQgdG8gbG9jYXRlZCBvbiB0aGUgZnRwIHNlcnZlci4gZS5nLiBcIi9hZGYvMTIzL25ld0Rpci9yZW1vdGVGaWxlXCIuXG4gICAqIEByZXR1cm5zIHtPYnNlcnZhYmxlPGFueT59IFJldHVybnMgYW4gb2JzZXJ2YWJsZS5cbiAgICogICAgICAgICAgICAgICAgICAgICAgICBJdCB3aWxsIGJlIHRyaWdnZXJlZCBtYW55IHRpbWVzIGFjY29yZGluZyB0aGUgZmlsZSdzIHNpemUuXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgVGhlIGFyZyBgMGAsIGAwLjF4eGAsIGAwLjJ4eGAgLi4uIGAxYCBtZWFucyB0aGUgdXBsb2FkIHBlcmNlbnQuIFdoZW4gaXQgcmVhY2ggYDFgLCBtZWFucyBzdWNjZXNzLlxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIG9ic2VydmFibGU6IHRydWUsXG4gIH0pXG4gIHVwbG9hZChsb2NhbEZpbGU6IHN0cmluZywgcmVtb3RlRmlsZTogc3RyaW5nKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogRG93bmxvYWQgb25lIHJlbW90ZSBmaWxlIG9uIHRoZSBmdHAgc2VydmVyIHRvIGxvY2FsIHBhdGguXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBsb2NhbEZpbGUgVGhlIGZpbGUgKHdpdGggZnVsbCBwYXRoKSB5b3Ugd2FudCB0byB1cGxvYWQuIGUuZy4gXCIvbG9jYWwvcGF0aC90by9sb2NhbEZpbGVcIi5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlbW90ZUZpbGUgVGhlIGZpbGUgKHdpdGggZnVsbCBwYXRoKSB5b3Ugd2FudCB0byBsb2NhdGVkIG9uIHRoZSBmdHAgc2VydmVyLiBlLmcuIFwiL2FkZi8xMjMvbmV3RGlyL3JlbW90ZUZpbGVcIi5cbiAgICogQHJldHVybnMge09ic2VydmFibGU8YW55Pn0gUmV0dXJucyBhbiBvYnNlcnZhYmxlLlxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgIEl0IHdpbGwgYmUgdHJpZ2dlcmVkIG1hbnkgdGltZXMgYWNjb3JkaW5nIHRoZSBmaWxlJ3Mgc2l6ZS5cbiAgICogICAgICAgICAgICAgICAgICAgICAgICBUaGUgYXJnIGAwYCwgYDAuMXh4YCwgYDAuMnh4YCAuLi4gYDFgIG1lYW5zIHRoZSB1cGxvYWQgcGVyY2VudC4gV2hlbiBpdCByZWFjaCBgMWAsIG1lYW5zIHN1Y2Nlc3MuXG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgb2JzZXJ2YWJsZTogdHJ1ZSxcbiAgfSlcbiAgZG93bmxvYWQobG9jYWxGaWxlOiBzdHJpbmcsIHJlbW90ZUZpbGU6IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbmNlbCBhbGwgcmVxdWVzdHMuIEFsd2F5cyBzdWNjZXNzLlxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBjYW5jZWwoKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogRGlzY29ubmVjdCBmcm9tIGZ0cCBzZXJ2ZXIuXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGRpc2Nvbm5lY3QoKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cbn1cbiJdfQ==