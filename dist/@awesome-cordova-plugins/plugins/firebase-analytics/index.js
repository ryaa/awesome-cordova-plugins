var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var FirebaseAnalyticsOriginal = /** @class */ (function (_super) {
    __extends(FirebaseAnalyticsOriginal, _super);
    function FirebaseAnalyticsOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FirebaseAnalyticsOriginal.prototype.logEvent = function (name, params) { return cordova(this, "logEvent", { "sync": true }, arguments); };
    FirebaseAnalyticsOriginal.prototype.setUserId = function (id) { return cordova(this, "setUserId", { "sync": true }, arguments); };
    FirebaseAnalyticsOriginal.prototype.setUserProperty = function (name, value) { return cordova(this, "setUserProperty", { "sync": true }, arguments); };
    FirebaseAnalyticsOriginal.prototype.setEnabled = function (enabled) { return cordova(this, "setEnabled", { "sync": true }, arguments); };
    FirebaseAnalyticsOriginal.prototype.setCurrentScreen = function (name) { return cordova(this, "setCurrentScreen", { "sync": true }, arguments); };
    FirebaseAnalyticsOriginal.prototype.resetAnalyticsData = function () { return cordova(this, "resetAnalyticsData", { "sync": true }, arguments); };
    FirebaseAnalyticsOriginal.pluginName = "FirebaseAnalytics";
    FirebaseAnalyticsOriginal.plugin = "cordova-plugin-firebase-analytics";
    FirebaseAnalyticsOriginal.pluginRef = "cordova.plugins.firebase.analytics";
    FirebaseAnalyticsOriginal.repo = "https://github.com/chemerisuk/cordova-plugin-firebase-analytics";
    FirebaseAnalyticsOriginal.platforms = ["Android", "iOS"];
    return FirebaseAnalyticsOriginal;
}(AwesomeCordovaNativePlugin));
var FirebaseAnalytics = new FirebaseAnalyticsOriginal();
export { FirebaseAnalytics };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvZmlyZWJhc2UtYW5hbHl0aWNzL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFDQSxPQUFPLHVDQUErQyxNQUFNLCtCQUErQixDQUFDOztJQWtEckQscUNBQTBCOzs7O0lBVS9ELG9DQUFRLGFBQUMsSUFBWSxFQUFFLE1BQVc7SUFZbEMscUNBQVMsYUFBQyxFQUFVO0lBYXBCLDJDQUFlLGFBQUMsSUFBWSxFQUFFLEtBQWE7SUFXM0Msc0NBQVUsYUFBQyxPQUFnQjtJQVkzQiw0Q0FBZ0IsYUFBQyxJQUFZO0lBVTdCLDhDQUFrQjs7Ozs7OzRCQXZIcEI7RUFtRHVDLDBCQUEwQjtTQUFwRCxpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb3Jkb3ZhLCBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL2NvcmUnO1xuXG4vKipcbiAqIEBiZXRhXG4gKiBAbmFtZSBGaXJlYmFzZSBBbmFseXRpY3NcbiAqIEBkZXNjcmlwdGlvblxuICogQ29yZG92YSBwbHVnaW4gZm9yIEZpcmViYXNlIEFuYWx5dGljc1xuICpcbiAqIEdvIHRvIGZpcmViYXNlIGNvbnNvbGUgYW5kIGV4cG9ydCBnb29nbGUtc2VydmljZXMuanNvbiBhbmQgR29vZ2xlU2VydmljZS1JbmZvLnBsaXN0LiBQdXQgdGhvc2UgZmlsZXMgaW50byB0aGUgcm9vdCBvZiB5b3VyIGNvcmRvdmEgYXBwIGZvbGRlci5cbiAqXG4gKiBOT1RFOiBvbiBpT1MgaW4gb3JkZXIgdG8gY29sbGVjdCBkZW1vZ3JhcGhpYywgYWdlLCBnZW5kZXIgZGF0YSBldGMuIHlvdSBzaG91bGQgYWRkaXRpb25hbGx5IGluY2x1ZGUgQWRTdXBwb3J0LmZyYW1ld29yayBpbnRvIHlvdXIgcHJvamVjdC5cbiAqXG4gKiAjIyBVc2luZyBjYXBhY2l0b3I/XG4gKiBGb3IgQW5kcm9pZCB5b3UnbGwgaGF2ZSB0byBhZGQgaW4gX19hbmRyb2lkL2FwcC9zcmMvbWFpbi9BbmRyb2lkTWFuaWZlc3QueG1sX18gdW5kZXIgYDxhcHBsaWNhdGlvbj5gXG4gKiBgYGBcbiAqIDxtZXRhLWRhdGFcbiAqICAgICAgdG9vbHM6cmVwbGFjZT1cImFuZHJvaWQ6dmFsdWVcIlxuICogICAgICBhbmRyb2lkOm5hbWU9XCJmaXJlYmFzZV9hbmFseXRpY3NfY29sbGVjdGlvbl9lbmFibGVkXCJcbiAqICAgICAgYW5kcm9pZDp2YWx1ZT1cInRydWVcIi8+XG4gKlxuICogPG1ldGEtZGF0YVxuICogICAgICB0b29sczpyZXBsYWNlPVwiYW5kcm9pZDp2YWx1ZVwiXG4gKiAgICAgIGFuZHJvaWQ6bmFtZT1cImdvb2dsZV9hbmFseXRpY3NfYXV0b21hdGljX3NjcmVlbl9yZXBvcnRpbmdfZW5hYmxlZFwiXG4gKiAgICAgIGFuZHJvaWQ6dmFsdWU9XCJmYWxzZVwiLz5cbiAqIGBgYFxuICpcbiAqIEFuZCBpbiB0aGUgc2FtZSBmaWxlLCB5b3UnbGwgaGF2ZSB0byBhZGQgYHhtbG5zOnRvb2xzPVwiaHR0cDovL3NjaGVtYXMuYW5kcm9pZC5jb20vdG9vbHNcImAgdG8geW91ciBfbWFuaWZlc3RfIHRhZy5cbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgRmlyZWJhc2VBbmFseXRpY3MgfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvZmlyZWJhc2UtYW5hbHl0aWNzL25neCc7XG4gKlxuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgZmlyZWJhc2VBbmFseXRpY3M6IEZpcmViYXNlQW5hbHl0aWNzKSB7IH1cbiAqXG4gKiAuLi5cbiAqXG4gKiB0aGlzLmZpcmViYXNlQW5hbHl0aWNzLmxvZ0V2ZW50KCdwYWdlX3ZpZXcnLCB7cGFnZTogXCJkYXNoYm9hcmRcIn0pXG4gKiAgIC50aGVuKChyZXM6IGFueSkgPT4gY29uc29sZS5sb2cocmVzKSlcbiAqICAgLmNhdGNoKChlcnJvcjogYW55KSA9PiBjb25zb2xlLmVycm9yKGVycm9yKSk7XG4gKlxuICogYGBgXG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnRmlyZWJhc2VBbmFseXRpY3MnLFxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1maXJlYmFzZS1hbmFseXRpY3MnLFxuICBwbHVnaW5SZWY6ICdjb3Jkb3ZhLnBsdWdpbnMuZmlyZWJhc2UuYW5hbHl0aWNzJyxcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9jaGVtZXJpc3VrL2NvcmRvdmEtcGx1Z2luLWZpcmViYXNlLWFuYWx5dGljcycsXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddLFxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBGaXJlYmFzZUFuYWx5dGljcyBleHRlbmRzIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luIHtcbiAgLyoqXG4gICAqIExvZ3MgYW4gYXBwIGV2ZW50LlxuICAgKiBCZSBhd2FyZSBvZiBhdXRvbWF0aWNhbGx5IGNvbGxlY3RlZCBldmVudHMuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBldmVudFxuICAgKiBAcGFyYW0ge2FueX0gcGFyYW1zIFNvbWUgcGFyYW0gdG8gY29uZmlndXJlIHNvbWV0aGluZ1xuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxuICAgKi9cbiAgQENvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXG4gIGxvZ0V2ZW50KG5hbWU6IHN0cmluZywgcGFyYW1zOiBhbnkpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSB1c2VyIElEIHByb3BlcnR5LlxuICAgKiBUaGlzIGZlYXR1cmUgbXVzdCBiZSB1c2VkIGluIGFjY29yZGFuY2Ugd2l0aCBHb29nbGUncyBQcml2YWN5IFBvbGljeS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkIFRoZSB1c2VyIElEXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXG4gICAqL1xuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcbiAgc2V0VXNlcklkKGlkOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGZlYXR1cmUgbXVzdCBiZSB1c2VkIGluIGFjY29yZGFuY2Ugd2l0aCBHb29nbGUncyBQcml2YWN5IFBvbGljeS5cbiAgICogQmUgYXdhcmUgb2YgYXV0b21hdGljYWxseSBjb2xsZWN0ZWQgdXNlciBwcm9wZXJ0aWVzLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgcHJvcGVydHkgbmFtZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgVGhlIHByb3BlcnR5IHZhbHVlXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXG4gICAqL1xuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcbiAgc2V0VXNlclByb3BlcnR5KG5hbWU6IHN0cmluZywgdmFsdWU6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgd2hldGhlciBhbmFseXRpY3MgY29sbGVjdGlvbiBpcyBlbmFibGVkIGZvciB0aGlzIGFwcCBvbiB0aGlzIGRldmljZS5cbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFufSBlbmFibGVkXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXG4gICAqL1xuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcbiAgc2V0RW5hYmxlZChlbmFibGVkOiBib29sZWFuKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgY3VycmVudCBzY3JlZW4gbmFtZSwgd2hpY2ggc3BlY2lmaWVzIHRoZSBjdXJyZW50IHZpc3VhbCBjb250ZXh0IGluIHlvdXIgYXBwLlxuICAgKiBUaGlzIGhlbHBzIGlkZW50aWZ5IHRoZSBhcmVhcyBpbiB5b3VyIGFwcCB3aGVyZSB1c2VycyBzcGVuZCB0aGVpciB0aW1lIGFuZCBob3cgdGhleSBpbnRlcmFjdCB3aXRoIHlvdXIgYXBwLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgc2NyZWVuXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXG4gICAqL1xuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcbiAgc2V0Q3VycmVudFNjcmVlbihuYW1lOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbGVhcnMgYWxsIGFuYWx5dGljcyBkYXRhIGZvciB0aGlzIGluc3RhbmNlIGZyb20gdGhlIGRldmljZSBhbmQgcmVzZXRzIHRoZSBhcHAgaW5zdGFuY2UgSURcbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2U8dm9pZD59IFJldHVybnMgYSBwcm9taXNlXG4gICAqL1xuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcbiAgcmVzZXRBbmFseXRpY3NEYXRhKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybjtcbiAgfVxufVxuIl19