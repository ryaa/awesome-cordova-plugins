var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import { Observable } from 'rxjs';
var ZeroconfOriginal = /** @class */ (function (_super) {
    __extends(ZeroconfOriginal, _super);
    function ZeroconfOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ZeroconfOriginal.prototype.getHostname = function () { return cordova(this, "getHostname", {}, arguments); };
    ZeroconfOriginal.prototype.register = function (type, domain, name, port, txtRecord) { return cordova(this, "register", {}, arguments); };
    ZeroconfOriginal.prototype.unregister = function (type, domain, name) { return cordova(this, "unregister", {}, arguments); };
    ZeroconfOriginal.prototype.stop = function () { return cordova(this, "stop", {}, arguments); };
    ZeroconfOriginal.prototype.watch = function (type, domain) { return cordova(this, "watch", { "observable": true, "clearFunction": "unwatch", "clearWithArgs": true }, arguments); };
    ZeroconfOriginal.prototype.unwatch = function (type, domain) { return cordova(this, "unwatch", {}, arguments); };
    ZeroconfOriginal.prototype.close = function () { return cordova(this, "close", {}, arguments); };
    ZeroconfOriginal.prototype.reInit = function () { return cordova(this, "reInit", {}, arguments); };
    ZeroconfOriginal.pluginName = "Zeroconf";
    ZeroconfOriginal.plugin = "cordova-plugin-zeroconf";
    ZeroconfOriginal.pluginRef = "cordova.plugins.zeroconf";
    ZeroconfOriginal.repo = "https://github.com/becvert/cordova-plugin-zeroconf";
    ZeroconfOriginal.platforms = ["Android", "iOS"];
    return ZeroconfOriginal;
}(AwesomeCordovaNativePlugin));
var Zeroconf = new ZeroconfOriginal();
export { Zeroconf };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvemVyb2NvbmYvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUNBLE9BQU8sdUNBQStDLE1BQU0sK0JBQStCLENBQUM7QUFDNUYsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQzs7SUEyREosNEJBQTBCOzs7O0lBT3RELDhCQUFXO0lBZVgsMkJBQVEsYUFBQyxJQUFZLEVBQUUsTUFBYyxFQUFFLElBQVksRUFBRSxJQUFZLEVBQUUsU0FBYztJQWFqRiw2QkFBVSxhQUFDLElBQVksRUFBRSxNQUFjLEVBQUUsSUFBWTtJQVVyRCx1QkFBSTtJQWdCSix3QkFBSyxhQUFDLElBQVksRUFBRSxNQUFjO0lBWWxDLDBCQUFPLGFBQUMsSUFBWSxFQUFFLE1BQWM7SUFVcEMsd0JBQUs7SUFVTCx5QkFBTTs7Ozs7O21CQTFKUjtFQTZEOEIsMEJBQTBCO1NBQTNDLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb3Jkb3ZhLCBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFplcm9jb25mU2VydmljZSB7XG4gIGRvbWFpbjogc3RyaW5nO1xuICB0eXBlOiBzdHJpbmc7XG4gIG5hbWU6IHN0cmluZztcbiAgcG9ydDogbnVtYmVyO1xuICBob3N0bmFtZTogc3RyaW5nO1xuICBpcHY0QWRkcmVzc2VzOiBzdHJpbmdbXTtcbiAgaXB2NkFkZHJlc3Nlczogc3RyaW5nW107XG4gIHR4dFJlY29yZDogYW55O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFplcm9jb25mUmVzdWx0IHtcbiAgYWN0aW9uOiAncmVnaXN0ZXJlZCcgfCAnYWRkZWQnIHwgJ3JlbW92ZWQnIHwgJ3Jlc29sdmVkJztcbiAgc2VydmljZTogWmVyb2NvbmZTZXJ2aWNlO1xufVxuXG4vKipcbiAqIEBuYW1lIFplcm9jb25mXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoaXMgcGx1Z2luIGFsbG93cyB5b3UgdG8gYnJvd3NlIGFuZCBwdWJsaXNoIFplcm9jb25mL0JvbmpvdXIvbUROUyBzZXJ2aWNlcy5cbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgWmVyb2NvbmYgfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvemVyb2NvbmYvbmd4JztcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIHplcm9jb25mOiBaZXJvY29uZikgeyB9XG4gKlxuICogLi4uXG4gKlxuICogLy8gd2F0Y2ggZm9yIHNlcnZpY2VzIG9mIGEgc3BlY2lmaWVkIHR5cGVcbiAqIHRoaXMuemVyb2NvbmYud2F0Y2goJ19odHRwLl90Y3AuJywgJ2xvY2FsLicpLnN1YnNjcmliZShyZXN1bHQgPT4ge1xuICogICBpZiAocmVzdWx0LmFjdGlvbiA9PSAnYWRkZWQnKSB7XG4gKiAgICAgY29uc29sZS5sb2coJ3NlcnZpY2UgYWRkZWQnLCByZXN1bHQuc2VydmljZSk7XG4gKiAgIH0gZWxzZSB7XG4gKiAgICAgY29uc29sZS5sb2coJ3NlcnZpY2UgcmVtb3ZlZCcsIHJlc3VsdC5zZXJ2aWNlKTtcbiAqICAgfVxuICogfSk7XG4gKlxuICogLy8gcHVibGlzaCBhIHplcm9jb25mIHNlcnZpY2Ugb2YgeW91ciBvd25cbiAqIHRoaXMuemVyb2NvbmYucmVnaXN0ZXIoJ19odHRwLl90Y3AuJywgJ2xvY2FsLicsICdCZWN2ZXJ0XFwncyBpUGFkJywgODAsIHtcbiAqICAgJ2Zvbyc6ICdiYXInXG4gKiB9KS50aGVuKHJlc3VsdCA9PiB7XG4gKiAgIGNvbnNvbGUubG9nKCdTZXJ2aWNlIHJlZ2lzdGVyZWQnLCByZXN1bHQuc2VydmljZSk7XG4gKiB9KTtcbiAqXG4gKlxuICogLy8gdW5yZWdpc3RlciB5b3VyIHNlcnZpY2VcbiAqIHRoaXMuemVyb2NvbmYudW5yZWdpc3RlcignX2h0dHAuX3RjcC4nLCAnbG9jYWwuJywgJ0JlY3ZlcnRcXCdzIGlQYWQnKTtcbiAqIGBgYFxuICovXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ1plcm9jb25mJyxcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4temVyb2NvbmYnLFxuICBwbHVnaW5SZWY6ICdjb3Jkb3ZhLnBsdWdpbnMuemVyb2NvbmYnLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL2JlY3ZlcnQvY29yZG92YS1wbHVnaW4temVyb2NvbmYnLFxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXSxcbn0pXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgWmVyb2NvbmYgZXh0ZW5kcyBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiB7XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoaXMgZGV2aWNlJ3MgaG9zdG5hbWUuXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHN0cmluZz59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGdldEhvc3RuYW1lKCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFB1Ymxpc2hlcyBhIG5ldyBzZXJ2aWNlLlxuICAgKlxuICAgKiBAcGFyYW0gdHlwZSB7c3RyaW5nfSBTZXJ2aWNlIHR5cGUgbmFtZSwgZS5nLiBcIl9odHRwLl90Y3BcIi5cbiAgICogQHBhcmFtIGRvbWFpbiB7c3RyaW5nfSBEb21haW4gc2NvcGUgb2YgdGhlIHNlcnZpY2UsIHR5cGljYWxseSBcImxvY2FsLlwiLlxuICAgKiBAcGFyYW0gbmFtZSB7c3RyaW5nfSBVbnF1YWxpZmllZCBzZXJ2aWNlIGluc3RhbmNlIG5hbWUuXG4gICAqIEBwYXJhbSBwb3J0IHtudW1iZXJ9IExvY2FsIHBvcnQgb24gd2hpY2ggdGhlIHNlcnZpY2UgcnVucy5cbiAgICogQHBhcmFtIHR4dFJlY29yZCB7YW55fSBBcmJpdHJhcnkga2V5L3ZhbHVlIHBhaXJzIGRlc2NyaWJpbmcgdGhlIHNlcnZpY2UuXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPFplcm9jb25mUmVzdWx0Pn0gUmV0dXJucyBhIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSByZWdpc3RlcmVkIHNlcnZpY2UuXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHJlZ2lzdGVyKHR5cGU6IHN0cmluZywgZG9tYWluOiBzdHJpbmcsIG5hbWU6IHN0cmluZywgcG9ydDogbnVtYmVyLCB0eHRSZWNvcmQ6IGFueSk6IFByb21pc2U8WmVyb2NvbmZSZXN1bHQ+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogVW5yZWdpc3RlcnMgYSBzZXJ2aWNlLlxuICAgKlxuICAgKiBAcGFyYW0gdHlwZSB7c3RyaW5nfSBTZXJ2aWNlIHR5cGUgbmFtZSwgZS5nLiBcIl9odHRwLl90Y3BcIi5cbiAgICogQHBhcmFtIGRvbWFpbiB7c3RyaW5nfSBEb21haW4gc2NvcGUgb2YgdGhlIHNlcnZpY2UsIHR5cGljYWxseSBcImxvY2FsLlwiLlxuICAgKiBAcGFyYW0gbmFtZSB7c3RyaW5nfSBVbnF1YWxpZmllZCBzZXJ2aWNlIGluc3RhbmNlIG5hbWUuXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICB1bnJlZ2lzdGVyKHR5cGU6IHN0cmluZywgZG9tYWluOiBzdHJpbmcsIG5hbWU6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBVbnJlZ2lzdGVycyBhbGwgcHVibGlzaGVkIHNlcnZpY2VzLlxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgc3RvcCgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogU3RhcnRzIHdhdGNoaW5nIGZvciBzZXJ2aWNlcyBvZiB0aGUgc3BlY2lmaWVkIHR5cGUuXG4gICAqXG4gICAqIEBwYXJhbSB0eXBlIHtzdHJpbmd9IFNlcnZpY2UgdHlwZSBuYW1lLCBlLmcuIFwiX2h0dHAuX3RjcFwiLlxuICAgKiBAcGFyYW0gZG9tYWluIHtzdHJpbmd9IERvbWFpbiBzY29wZSBvZiB0aGUgc2VydmljZSwgdHlwaWNhbGx5IFwibG9jYWwuXCIuXG4gICAqIEByZXR1cm5zIHtPYnNlcnZhYmxlPFplcm9jb25mUmVzdWx0Pn0gUmV0dXJucyBhbiBPYnNlcnZhYmxlIHRoYXQgbm90aWZpZXMgb2YgZWFjaCBzZXJ2aWNlIGFkZGVkIG9yIHJlbW92ZWQuXG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgb2JzZXJ2YWJsZTogdHJ1ZSxcbiAgICBjbGVhckZ1bmN0aW9uOiAndW53YXRjaCcsXG4gICAgY2xlYXJXaXRoQXJnczogdHJ1ZSxcbiAgfSlcbiAgd2F0Y2godHlwZTogc3RyaW5nLCBkb21haW46IHN0cmluZyk6IE9ic2VydmFibGU8WmVyb2NvbmZSZXN1bHQ+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogU3RvcHMgd2F0Y2hpbmcgZm9yIHNlcnZpY2VzIG9mIHRoZSBzcGVjaWZpZWQgdHlwZS5cbiAgICpcbiAgICogQHBhcmFtIHR5cGUge3N0cmluZ30gU2VydmljZSB0eXBlIG5hbWUsIGUuZy4gXCJfaHR0cC5fdGNwXCIuXG4gICAqIEBwYXJhbSBkb21haW4ge3N0cmluZ30gRG9tYWluIHNjb3BlIG9mIHRoZSBzZXJ2aWNlLCB0eXBpY2FsbHkgXCJsb2NhbC5cIi5cbiAgICogQHJldHVybnMge1Byb21pc2U8dm9pZD59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHVud2F0Y2godHlwZTogc3RyaW5nLCBkb21haW46IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbG9zZXMgdGhlIHNlcnZpY2UgYnJvd3NlciBhbmQgc3RvcHMgd2F0Y2hpbmcuXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBjbG9zZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogUmUtaW5pdGlhbGl6ZXMgdGhlIHBsdWdpbiB0byBjbGVhbiBzZXJ2aWNlICYgYnJvd3NlciBzdGF0ZS5cbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2U8dm9pZD59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHJlSW5pdCgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm47XG4gIH1cbiAgLyoqXG4gICAqIEZhbWlseSBvZiBhZGRyZXNzZXMgdG8gcmVnaXN0ZXI6IGlwdjQsIGlwdjYgb3IgYW55LlxuICAgKi9cbiAgcmVnaXN0ZXJBZGRyZXNzRmFtaWx5OiAnaXB2NCcgfCAnaXB2NicgfCAnYW55JztcbiAgLyoqXG4gICAqIEZhbWlseSBvZiBhZGRyZXNzZXMgdG8gd2F0Y2ggZm9yOiBpcHY0LCBpcHY2IG9yIGFueS5cbiAgICovXG4gIHdhdGNoQWRkcmVzc0ZhbWlseTogJ2lwdjQnIHwgJ2lwdjYnIHwgJ2FueSc7XG59XG4iXX0=