import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import { Observable } from 'rxjs';
import * as i0 from "@angular/core";
var Zeroconf = /** @class */ (function (_super) {
    __extends(Zeroconf, _super);
    function Zeroconf() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Zeroconf.prototype.getHostname = function () { return cordova(this, "getHostname", {}, arguments); };
    Zeroconf.prototype.register = function (type, domain, name, port, txtRecord) { return cordova(this, "register", {}, arguments); };
    Zeroconf.prototype.unregister = function (type, domain, name) { return cordova(this, "unregister", {}, arguments); };
    Zeroconf.prototype.stop = function () { return cordova(this, "stop", {}, arguments); };
    Zeroconf.prototype.watch = function (type, domain) { return cordova(this, "watch", { "observable": true, "clearFunction": "unwatch", "clearWithArgs": true }, arguments); };
    Zeroconf.prototype.unwatch = function (type, domain) { return cordova(this, "unwatch", {}, arguments); };
    Zeroconf.prototype.close = function () { return cordova(this, "close", {}, arguments); };
    Zeroconf.prototype.reInit = function () { return cordova(this, "reInit", {}, arguments); };
    Zeroconf.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: Zeroconf, deps: null, target: i0.ɵɵFactoryTarget.Injectable });
    Zeroconf.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: Zeroconf });
    Zeroconf.pluginName = "Zeroconf";
    Zeroconf.plugin = "cordova-plugin-zeroconf";
    Zeroconf.pluginRef = "cordova.plugins.zeroconf";
    Zeroconf.repo = "https://github.com/becvert/cordova-plugin-zeroconf";
    Zeroconf.platforms = ["Android", "iOS"];
    Zeroconf = __decorate([], Zeroconf);
    return Zeroconf;
}(AwesomeCordovaNativePlugin));
export { Zeroconf };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: Zeroconf, decorators: [{
            type: Injectable
        }], propDecorators: { getHostname: [], register: [], unregister: [], stop: [], watch: [], unwatch: [], close: [], reInit: [] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvemVyb2NvbmYvbmd4L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sdUNBQStDLE1BQU0sK0JBQStCLENBQUM7QUFDNUYsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQzs7O0lBMkRKLDRCQUEwQjs7OztJQU90RCw4QkFBVztJQWVYLDJCQUFRLGFBQUMsSUFBWSxFQUFFLE1BQWMsRUFBRSxJQUFZLEVBQUUsSUFBWSxFQUFFLFNBQWM7SUFhakYsNkJBQVUsYUFBQyxJQUFZLEVBQUUsTUFBYyxFQUFFLElBQVk7SUFVckQsdUJBQUk7SUFnQkosd0JBQUssYUFBQyxJQUFZLEVBQUUsTUFBYztJQVlsQywwQkFBTyxhQUFDLElBQVksRUFBRSxNQUFjO0lBVXBDLHdCQUFLO0lBVUwseUJBQU07MEdBN0ZLLFFBQVE7OEdBQVIsUUFBUTs7Ozs7O0lBQVIsUUFBUSxrQkFBUixRQUFRO21CQTdEckI7RUE2RDhCLDBCQUEwQjtTQUEzQyxRQUFROzRGQUFSLFFBQVE7a0JBRHBCLFVBQVU7OEJBUVQsV0FBVyxNQWVYLFFBQVEsTUFhUixVQUFVLE1BVVYsSUFBSSxNQWdCSixLQUFLLE1BWUwsT0FBTyxNQVVQLEtBQUssTUFVTCxNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29yZG92YSwgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bhd2Vzb21lLWNvcmRvdmEtcGx1Z2lucy9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuZXhwb3J0IGludGVyZmFjZSBaZXJvY29uZlNlcnZpY2Uge1xuICBkb21haW46IHN0cmluZztcbiAgdHlwZTogc3RyaW5nO1xuICBuYW1lOiBzdHJpbmc7XG4gIHBvcnQ6IG51bWJlcjtcbiAgaG9zdG5hbWU6IHN0cmluZztcbiAgaXB2NEFkZHJlc3Nlczogc3RyaW5nW107XG4gIGlwdjZBZGRyZXNzZXM6IHN0cmluZ1tdO1xuICB0eHRSZWNvcmQ6IGFueTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBaZXJvY29uZlJlc3VsdCB7XG4gIGFjdGlvbjogJ3JlZ2lzdGVyZWQnIHwgJ2FkZGVkJyB8ICdyZW1vdmVkJyB8ICdyZXNvbHZlZCc7XG4gIHNlcnZpY2U6IFplcm9jb25mU2VydmljZTtcbn1cblxuLyoqXG4gKiBAbmFtZSBaZXJvY29uZlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGlzIHBsdWdpbiBhbGxvd3MgeW91IHRvIGJyb3dzZSBhbmQgcHVibGlzaCBaZXJvY29uZi9Cb25qb3VyL21ETlMgc2VydmljZXMuXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IFplcm9jb25mIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3plcm9jb25mL25neCc7XG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSB6ZXJvY29uZjogWmVyb2NvbmYpIHsgfVxuICpcbiAqIC4uLlxuICpcbiAqIC8vIHdhdGNoIGZvciBzZXJ2aWNlcyBvZiBhIHNwZWNpZmllZCB0eXBlXG4gKiB0aGlzLnplcm9jb25mLndhdGNoKCdfaHR0cC5fdGNwLicsICdsb2NhbC4nKS5zdWJzY3JpYmUocmVzdWx0ID0+IHtcbiAqICAgaWYgKHJlc3VsdC5hY3Rpb24gPT0gJ2FkZGVkJykge1xuICogICAgIGNvbnNvbGUubG9nKCdzZXJ2aWNlIGFkZGVkJywgcmVzdWx0LnNlcnZpY2UpO1xuICogICB9IGVsc2Uge1xuICogICAgIGNvbnNvbGUubG9nKCdzZXJ2aWNlIHJlbW92ZWQnLCByZXN1bHQuc2VydmljZSk7XG4gKiAgIH1cbiAqIH0pO1xuICpcbiAqIC8vIHB1Ymxpc2ggYSB6ZXJvY29uZiBzZXJ2aWNlIG9mIHlvdXIgb3duXG4gKiB0aGlzLnplcm9jb25mLnJlZ2lzdGVyKCdfaHR0cC5fdGNwLicsICdsb2NhbC4nLCAnQmVjdmVydFxcJ3MgaVBhZCcsIDgwLCB7XG4gKiAgICdmb28nOiAnYmFyJ1xuICogfSkudGhlbihyZXN1bHQgPT4ge1xuICogICBjb25zb2xlLmxvZygnU2VydmljZSByZWdpc3RlcmVkJywgcmVzdWx0LnNlcnZpY2UpO1xuICogfSk7XG4gKlxuICpcbiAqIC8vIHVucmVnaXN0ZXIgeW91ciBzZXJ2aWNlXG4gKiB0aGlzLnplcm9jb25mLnVucmVnaXN0ZXIoJ19odHRwLl90Y3AuJywgJ2xvY2FsLicsICdCZWN2ZXJ0XFwncyBpUGFkJyk7XG4gKiBgYGBcbiAqL1xuQFBsdWdpbih7XG4gIHBsdWdpbk5hbWU6ICdaZXJvY29uZicsXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLXplcm9jb25mJyxcbiAgcGx1Z2luUmVmOiAnY29yZG92YS5wbHVnaW5zLnplcm9jb25mJyxcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9iZWN2ZXJ0L2NvcmRvdmEtcGx1Z2luLXplcm9jb25mJyxcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJ10sXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFplcm9jb25mIGV4dGVuZHMgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4ge1xuICAvKipcbiAgICogUmV0dXJucyB0aGlzIGRldmljZSdzIGhvc3RuYW1lLlxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxzdHJpbmc+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBnZXRIb3N0bmFtZSgpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBQdWJsaXNoZXMgYSBuZXcgc2VydmljZS5cbiAgICpcbiAgICogQHBhcmFtIHR5cGUge3N0cmluZ30gU2VydmljZSB0eXBlIG5hbWUsIGUuZy4gXCJfaHR0cC5fdGNwXCIuXG4gICAqIEBwYXJhbSBkb21haW4ge3N0cmluZ30gRG9tYWluIHNjb3BlIG9mIHRoZSBzZXJ2aWNlLCB0eXBpY2FsbHkgXCJsb2NhbC5cIi5cbiAgICogQHBhcmFtIG5hbWUge3N0cmluZ30gVW5xdWFsaWZpZWQgc2VydmljZSBpbnN0YW5jZSBuYW1lLlxuICAgKiBAcGFyYW0gcG9ydCB7bnVtYmVyfSBMb2NhbCBwb3J0IG9uIHdoaWNoIHRoZSBzZXJ2aWNlIHJ1bnMuXG4gICAqIEBwYXJhbSB0eHRSZWNvcmQge2FueX0gQXJiaXRyYXJ5IGtleS92YWx1ZSBwYWlycyBkZXNjcmliaW5nIHRoZSBzZXJ2aWNlLlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxaZXJvY29uZlJlc3VsdD59IFJldHVybnMgYSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgcmVnaXN0ZXJlZCBzZXJ2aWNlLlxuICAgKi9cbiAgQENvcmRvdmEoKVxuICByZWdpc3Rlcih0eXBlOiBzdHJpbmcsIGRvbWFpbjogc3RyaW5nLCBuYW1lOiBzdHJpbmcsIHBvcnQ6IG51bWJlciwgdHh0UmVjb3JkOiBhbnkpOiBQcm9taXNlPFplcm9jb25mUmVzdWx0PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFVucmVnaXN0ZXJzIGEgc2VydmljZS5cbiAgICpcbiAgICogQHBhcmFtIHR5cGUge3N0cmluZ30gU2VydmljZSB0eXBlIG5hbWUsIGUuZy4gXCJfaHR0cC5fdGNwXCIuXG4gICAqIEBwYXJhbSBkb21haW4ge3N0cmluZ30gRG9tYWluIHNjb3BlIG9mIHRoZSBzZXJ2aWNlLCB0eXBpY2FsbHkgXCJsb2NhbC5cIi5cbiAgICogQHBhcmFtIG5hbWUge3N0cmluZ30gVW5xdWFsaWZpZWQgc2VydmljZSBpbnN0YW5jZSBuYW1lLlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgdW5yZWdpc3Rlcih0eXBlOiBzdHJpbmcsIGRvbWFpbjogc3RyaW5nLCBuYW1lOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogVW5yZWdpc3RlcnMgYWxsIHB1Ymxpc2hlZCBzZXJ2aWNlcy5cbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2U8dm9pZD59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHN0b3AoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0YXJ0cyB3YXRjaGluZyBmb3Igc2VydmljZXMgb2YgdGhlIHNwZWNpZmllZCB0eXBlLlxuICAgKlxuICAgKiBAcGFyYW0gdHlwZSB7c3RyaW5nfSBTZXJ2aWNlIHR5cGUgbmFtZSwgZS5nLiBcIl9odHRwLl90Y3BcIi5cbiAgICogQHBhcmFtIGRvbWFpbiB7c3RyaW5nfSBEb21haW4gc2NvcGUgb2YgdGhlIHNlcnZpY2UsIHR5cGljYWxseSBcImxvY2FsLlwiLlxuICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZTxaZXJvY29uZlJlc3VsdD59IFJldHVybnMgYW4gT2JzZXJ2YWJsZSB0aGF0IG5vdGlmaWVzIG9mIGVhY2ggc2VydmljZSBhZGRlZCBvciByZW1vdmVkLlxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIG9ic2VydmFibGU6IHRydWUsXG4gICAgY2xlYXJGdW5jdGlvbjogJ3Vud2F0Y2gnLFxuICAgIGNsZWFyV2l0aEFyZ3M6IHRydWUsXG4gIH0pXG4gIHdhdGNoKHR5cGU6IHN0cmluZywgZG9tYWluOiBzdHJpbmcpOiBPYnNlcnZhYmxlPFplcm9jb25mUmVzdWx0PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0b3BzIHdhdGNoaW5nIGZvciBzZXJ2aWNlcyBvZiB0aGUgc3BlY2lmaWVkIHR5cGUuXG4gICAqXG4gICAqIEBwYXJhbSB0eXBlIHtzdHJpbmd9IFNlcnZpY2UgdHlwZSBuYW1lLCBlLmcuIFwiX2h0dHAuX3RjcFwiLlxuICAgKiBAcGFyYW0gZG9tYWluIHtzdHJpbmd9IERvbWFpbiBzY29wZSBvZiB0aGUgc2VydmljZSwgdHlwaWNhbGx5IFwibG9jYWwuXCIuXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICB1bndhdGNoKHR5cGU6IHN0cmluZywgZG9tYWluOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogQ2xvc2VzIHRoZSBzZXJ2aWNlIGJyb3dzZXIgYW5kIHN0b3BzIHdhdGNoaW5nLlxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgY2xvc2UoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlLWluaXRpYWxpemVzIHRoZSBwbHVnaW4gdG8gY2xlYW4gc2VydmljZSAmIGJyb3dzZXIgc3RhdGUuXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICByZUluaXQoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8qKlxuICAgKiBGYW1pbHkgb2YgYWRkcmVzc2VzIHRvIHJlZ2lzdGVyOiBpcHY0LCBpcHY2IG9yIGFueS5cbiAgICovXG4gIHJlZ2lzdGVyQWRkcmVzc0ZhbWlseTogJ2lwdjQnIHwgJ2lwdjYnIHwgJ2FueSc7XG4gIC8qKlxuICAgKiBGYW1pbHkgb2YgYWRkcmVzc2VzIHRvIHdhdGNoIGZvcjogaXB2NCwgaXB2NiBvciBhbnkuXG4gICAqL1xuICB3YXRjaEFkZHJlc3NGYW1pbHk6ICdpcHY0JyB8ICdpcHY2JyB8ICdhbnknO1xufVxuIl19