var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var AllInOneSDK = /** @class */ (function (_super) {
    __extends(AllInOneSDK, _super);
    function AllInOneSDK() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AllInOneSDK.prototype.startTransaction = function (options) { return cordova(this, "startTransaction", {}, arguments); };
    AllInOneSDK.pluginName = "AllInOneSDK";
    AllInOneSDK.plugin = "cordova-paytm-allinonesdk";
    AllInOneSDK.pluginRef = "AllInOneSDK";
    AllInOneSDK.repo = "https://github.com/paytm/paytm-allinonesdk-ionic-cordova.git";
    AllInOneSDK.platforms = ["Android", "iOS"];
    return AllInOneSDK;
}(AwesomeCordovaNativePlugin));
export { AllInOneSDK };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvYWxsLWluLW9uZS1zZGsvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUNBLE9BQU8sdUNBT04sTUFBTSwrQkFBK0IsQ0FBQzs7SUF3Q04sK0JBQTBCOzs7O0lBVXpELHNDQUFnQixhQUFDLE9BQXNEOzs7Ozs7c0JBMUR6RTtFQWdEaUMsMEJBQTBCO1NBQTlDLFdBQVciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBQbHVnaW4sXG4gIENvcmRvdmEsXG4gIENvcmRvdmFQcm9wZXJ0eSxcbiAgQ29yZG92YUluc3RhbmNlLFxuICBJbnN0YW5jZVByb3BlcnR5LFxuICBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbixcbn0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG4vKipcbiAqIEBuYW1lIEFsbEluT25lU0RLXG4gKiBAZGVzY3JpcHRpb25cbiAqIFBheXRtIEFsbC1pbi1PbmUgU0RLIHBsdWdpbiBmb3IgQ29yZG92YS9Jb25pYyBBcHBsaWNhdGlvbnNcbiAqIFBheXRtIEFsbC1pbi1PbmUgU0RLIHByb3ZpZGVzIGEgc3dpZnQsIHNlY3VyZSBhbmQgc2VhbWxlc3MgcGF5bWVudCBleHBlcmllbmNlIHRvIHlvdXIgdXNlcnMgYnkgaW52b2tpbmcgdGhlIFBheXRtIGFwcCAoaWYgaW5zdGFsbGVkIG9uIHlvdXIgdXNlcuKAmXMgc21hcnRwaG9uZSkgdG8gY29tcGxldGUgcGF5bWVudCBmb3IgeW91ciBvcmRlci5cbiAqIFBheXRtIEFsbC1pbi1PbmUgU0RLIGVuYWJsZXMgcGF5bWVudCBhY2NlcHRhbmNlIHZpYSBQYXl0bSB3YWxsZXQsIFBheXRtIFBheW1lbnRzIEJhbmssIHNhdmVkIERlYml0L0NyZWRpdCBjYXJkcywgTmV0IEJhbmtpbmcsIEJISU0gVVBJIGFuZCBFTUkgYXMgYXZhaWxhYmxlIGluIHlvdXIgY3VzdG9tZXLigJlzIFBheXRtIGFjY291bnQuIElmIFBheXRtIGFwcCBpcyBub3QgaW5zdGFsbGVkIG9uIGEgY3VzdG9tZXIncyBkZXZpY2UsIHRoZSB0cmFuc2FjdGlvbiB3aWxsIGJlIHByb2Nlc3NlZCB2aWEgd2ViIHZpZXcgd2l0aGluIHRoZSBBbGwtaW4tT25lIFNESy5cbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uIGFib3V0IFBheXRtIEFsbC1pbi1PbmUgU0RLLCBwbGVhc2UgdmlzaXQgaHR0cHM6Ly9kZXZlbG9wZXIucGF5dG0uY29tL2RvY3MvYWxsLWluLW9uZS1zZGsvaHlicmlkLWFwcHMvY29yZG92YS9cbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgQWxsSW5PbmVTREsgfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvYWxsLWluLW9uZS1zZGsvbmd4JztcbiAqXG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSBhbGxJbk9uZVNESzogQWxsSW5PbmVTREspIHsgfVxuICpcbiAqIC4uLlxuICpcbiAqIEZvciBiZWxvdyBwYXJhbWV0ZXJzIHNlZSBbZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kZXZlbG9wZXIucGF5dG0uY29tL2RvY3MvYWxsLWluLW9uZS1zZGsvaHlicmlkLWFwcHMvY29yZG92YS8pXG4gKiBsZXQgcGF5bWVudEludGVudCA9IHsgbWlkIDogbWVyY2hhbnRJRCwgb3JkZXJJZDogb3JkZXJJZCwgdHhuVG9rZW46IHRyYW5zYWN0aW9uVG9rZW4sIGFtb3VudDogYW1vdW50LCBpc1N0YWdpbmc6IGlzU3RhZ2luZywgY2FsbGJhY2tVcmw6Y2FsbEJhY2tVUkwsICByZXN0cmljdEFwcEludm9rZTpyZXN0cmljdEFwcEludm9rZSAgfVxuICpcbiAqIHRoaXMuYWxsSW5PbmVTREsuc3RhcnRUcmFuc2FjdGlvbihwYXltZW50SW50ZW50KVxuICogICAudGhlbigocmVzOiBhbnkpID0+IGNvbnNvbGUubG9nKHJlcykpXG4gKiAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xuICpcbiAqIGBgYFxuICpcbiAqIEZvciBpT1M6XG4gKiBBZnRlciBhZGRpbmcgdGhlIHBsdWdpbiwgb3BlbiB0aGUgaU9TIHByb2plY3QsIHlvdSBjYW4gZmluZCB0aGUgc2FtZSBhdCA8cHJvamVjdE5hbWU+L3BsYXRmb3Jtcy9pb3MuXG4gKiBJbiBjYXNlIG1lcmNoYW50IGRvbuKAmXQgaGF2ZSBjYWxsYmFjayBVUkwsIEFkZCBhbiBlbnRyeSBpbnRvIEluZm8ucGxpc3QgTFNBcHBsaWNhdGlvblF1ZXJpZXNTY2hlbWVzKEFycmF5KSBJdGVtIDAgKFN0cmluZyktPiBwYXl0bVxuICogQWRkIGEgVVJMIFNjaGVtZSDigJxwYXl0beKAnSvigJ1NSUTigJ1cbiAqL1xuQFBsdWdpbih7XG4gIHBsdWdpbk5hbWU6ICdBbGxJbk9uZVNESycsXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGF5dG0tYWxsaW5vbmVzZGsnLFxuICBwbHVnaW5SZWY6ICdBbGxJbk9uZVNESycsXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vcGF5dG0vcGF5dG0tYWxsaW5vbmVzZGstaW9uaWMtY29yZG92YS5naXQnLFxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXSxcbn0pXG5leHBvcnQgY2xhc3MgQWxsSW5PbmVTREsgZXh0ZW5kcyBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiB7XG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIGNoZWNrcyBpZiBQYXl0bSBBcHBsaWNhdGlvbiBpcyBhdmFpbGFibGUgb24gdGhlIGRldmljZS5cbiAgICogSWYgUGF5dG0gZXhpc3RzIHRoZW4gaXQgaW52b2tlcyBQYXl0bSBBcHBsaWNhdGlvbiB3aXRoIHRoZSBwYXJhbWV0ZXJzIHNlbnQgYW5kIGNyZWF0ZXMgYW4gb3JkZXIuXG4gICAqIElmIHRoZSBQYXl0bSBBcHBsaWNhdGlvbiBpcyBub3QgYXZhaWxhYmxlIHRoZSB0cmFuc2FjdGlvbiBpcyBjb250aW51ZWQgb24gYSB3ZWJWaWV3IHdpdGhpbiBBbGwtaW4tT25lIFNESy5cbiAgICpcbiAgICogQHBhcmFtIG9wdGlvbnMge1BheW1lbnRJbnRlbnRNb2RlbH0gVGhlc2UgcGFyYW1ldGVycyBhcmUgcmVxdWlyZWQgYW5kIHdpbGwgYmUgdXNlZCB0byBjcmVhdGUgYW4gb3JkZXIuXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPFBheXRtUmVzcG9uc2U+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gYSB0cmFuc2FjdGlvbiBjb21wbGV0ZXMoYm90aCBmYWlsZWQgYW5kIHN1Y2Nlc3NmdWwpLlxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBzdGFydFRyYW5zYWN0aW9uKG9wdGlvbnM6IFBheW1lbnRJbnRlbnRNb2RlbCB8IFBheW1lbnRBc3Npc3RJbnRlbnRNb2RlbCk6IFByb21pc2U8UGF5dG1SZXNwb25zZT4ge1xuICAgIHJldHVybjtcbiAgfVxufVxuXG4vKipcbiAqIFRoZSByZXNwb25zZSB0aGF0IHdpbGwgYmUgcmVjaWV2ZWQgd2hlbiBhbnkgdHJhbnNhY3Rpb24gaXMgY29tcGxldGVkXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUGF5dG1SZXNwb25zZSB7XG4gIG1lc3NhZ2U6IHN0cmluZztcbiAgcmVzcG9uc2U6IHN0cmluZzsgLy8gQSBzdHJpbmdpZmllZCByZXNwb25zZSBvZiBhIGhhc2htYXAgcmV0dXJuZWQgZnJvbSBBbGwtaW4tT25lIFNES1xufVxuXG4vKipcbiAqIEZvciBiZWxvdyBwYXJhbWV0ZXJzIHNlZSBbZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kZXZlbG9wZXIucGF5dG0uY29tL2RvY3MvYWxsLWluLW9uZS1zZGsvaHlicmlkLWFwcHMvY29yZG92YS8pXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUGF5bWVudEludGVudE1vZGVsIHtcbiAgbWlkOiBzdHJpbmc7IC8vIE1lcmNoYW50IElEXG4gIG9yZGVySWQ6IHN0cmluZzsgLy8gT3JkZXIgSURcbiAgdHhuVG9rZW46IHN0cmluZzsgLy8gVHJhbnNhY3Rpb24gVG9rZW5cbiAgYW1vdW50OiBzdHJpbmc7IC8vIEFtb3VudFxuICBpc1N0YWdpbmc6IGJvb2xlYW47IC8vIEVudmlyb25tZW50XG4gIGNhbGxiYWNrVXJsOiBzdHJpbmc7IC8vIENhbGxiYWNrIFVSTFxuICByZXN0cmljdEFwcEludm9rZTogYm9vbGVhbjsgLy8gVG8gZW5hYmxlIG9yIGRpc2FibGUgdGhlIHBheXRtIGFwcCBpbnZvY2F0aW9uXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGF5bWVudEFzc2lzdEludGVudE1vZGVsIHtcbiAgbWlkOiBzdHJpbmc7IC8vIE1lcmNoYW50IElEXG4gIG9yZGVySWQ6IHN0cmluZzsgLy8gT3JkZXIgSURcbiAgdHhuVG9rZW46IHN0cmluZzsgLy8gVHJhbnNhY3Rpb24gVG9rZW5cbiAgYW1vdW50OiBzdHJpbmc7IC8vIEFtb3VudFxuICBpc1N0YWdpbmc6IGJvb2xlYW47IC8vIEVudmlyb25tZW50XG4gIGNhbGxiYWNrVXJsOiBzdHJpbmc7IC8vIENhbGxiYWNrIFVSTFxuICByZXN0cmljdEFwcEludm9rZTogYm9vbGVhbjsgLy8gVG8gZW5hYmxlIG9yIGRpc2FibGUgdGhlIHBheXRtIGFwcCBpbnZvY2F0aW9uXG4gIGVuYWJsZUFzc2lzdDogYm9vbGVhbjsgLy8gVG8gZW5hYmxlIG9yIGRpc2FibGUgdGhlIEFzc2lzdCAoT3RwIGF1dG8gcmVhZClcbn1cbiJdfQ==