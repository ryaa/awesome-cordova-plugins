import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import * as i0 from "@angular/core";
export var ErrorCodes;
(function (ErrorCodes) {
    ErrorCodes[ErrorCodes["UnsupportedAction"] = 1] = "UnsupportedAction";
    ErrorCodes[ErrorCodes["WrongJsonObject"] = 2] = "WrongJsonObject";
    ErrorCodes[ErrorCodes["PickerCanceled"] = 3] = "PickerCanceled";
    ErrorCodes[ErrorCodes["UnknownError"] = 10] = "UnknownError";
})(ErrorCodes || (ErrorCodes = {}));
var AdvancedImagePicker = /** @class */ (function (_super) {
    __extends(AdvancedImagePicker, _super);
    function AdvancedImagePicker() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AdvancedImagePicker.prototype.present = function (options) { return cordova(this, "present", {}, arguments); };
    AdvancedImagePicker.prototype.cleanup = function () { return cordova(this, "cleanup", { "platforms": ["iOS"] }, arguments); };
    AdvancedImagePicker.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AdvancedImagePicker, deps: null, target: i0.ɵɵFactoryTarget.Injectable });
    AdvancedImagePicker.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AdvancedImagePicker });
    AdvancedImagePicker.pluginName = "AdvancedImagePicker";
    AdvancedImagePicker.plugin = "cordova-plugin-advanced-imagepicker";
    AdvancedImagePicker.pluginRef = "AdvancedImagePicker";
    AdvancedImagePicker.repo = "https://github.com/EinfachHans/cordova-plugin-advanced-imagepicker";
    AdvancedImagePicker.install = "ionic cordova plugin add cordova-plugin-advanced-imagepicker";
    AdvancedImagePicker.installVariables = ["ANDROID_IMAGE_PICKER_VERSION"];
    AdvancedImagePicker.platforms = ["Android", "iOS"];
    AdvancedImagePicker = __decorate([], AdvancedImagePicker);
    return AdvancedImagePicker;
}(AwesomeCordovaNativePlugin));
export { AdvancedImagePicker };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AdvancedImagePicker, decorators: [{
            type: Injectable
        }], propDecorators: { present: [], cleanup: [] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvYWR2YW5jZWQtaW1hZ2UtcGlja2VyL25neC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLHVDQUErQyxNQUFNLCtCQUErQixDQUFDOztBQTJGNUYsTUFBTSxDQUFOLElBQVksVUFLWDtBQUxELFdBQVksVUFBVTtJQUNwQixxRUFBcUIsQ0FBQTtJQUNyQixpRUFBbUIsQ0FBQTtJQUNuQiwrREFBa0IsQ0FBQTtJQUNsQiw0REFBaUIsQ0FBQTtBQUNuQixDQUFDLEVBTFcsVUFBVSxLQUFWLFVBQVUsUUFLckI7O0lBa0R3Qyx1Q0FBMEI7Ozs7SUFPakUscUNBQU8sYUFBQyxPQUF1QjtJQVEvQixxQ0FBTztxSEFmSSxtQkFBbUI7eUhBQW5CLG1CQUFtQjs7Ozs7Ozs7SUFBbkIsbUJBQW1CLGtCQUFuQixtQkFBbUI7OEJBbkpoQztFQW1KeUMsMEJBQTBCO1NBQXRELG1CQUFtQjs0RkFBbkIsbUJBQW1CO2tCQUQvQixVQUFVOzhCQVFULE9BQU8sTUFRUCxPQUFPIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUGx1Z2luLCBDb3Jkb3ZhLCBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiB9IGZyb20gJ0Bhd2Vzb21lLWNvcmRvdmEtcGx1Z2lucy9jb3JlJztcblxuaW50ZXJmYWNlIFByZXNlbnRPcHRpb25zIHtcbiAgLyoqXG4gICAqIFdoaWNoIE1lZGlhIFR5cGVzIGFyZSBhbGxvd2VkIHRvIGJlIHNlbGVjdGVkXG4gICAqIGRlZmF1bHQ6IFwiSU1BR0VcIlxuICAgKi9cbiAgbWVkaWFUeXBlPzogJ0lNQUdFJyB8ICdWSURFTycgfCAnQUxMJztcbiAgLyoqXG4gICAqIFNob3cgcG9zc2liaWxpdHkgdG8gdGFrZSB2aWEgQ2FtZXJhXG4gICAqIGRlZmF1bHQ6IHRydWVcbiAgICovXG4gIHNob3dDYW1lcmFUaWxlPzogYm9vbGVhbjtcbiAgLyoqXG4gICAqIE9uIHdoaWNoIFNjcmVlbiB0aGUgUGlja2VyIHNob3VsZCBiZSBzdGFydGVkIChpT1Mgb25seSlcbiAgICogZGVmYXVsdDogXCJMSUJSQVJZXCJcbiAgICovXG4gIHN0YXJ0T25TY3JlZW4/OiAnTElCUkFSWScgfCAnSU1BR0UnIHwgJ1ZJREVPJztcbiAgLyoqXG4gICAqIERhdGUgZm9ybWF0IG9mIHRoZSBTY3JvbGwgSW5kaWNhdG9yIChBbmRyb2lkIG9ubHkpXG4gICAqIGRlZmF1bHQ6IFwiWVlZWS5NTVwiXG4gICAqL1xuICBzY3JvbGxJbmRpY2F0b3JEYXRlRm9ybWF0Pzogc3RyaW5nO1xuICAvKipcbiAgICogU2hvdyBUaXRsZSAoQW5kcm9pZCBvbmx5KVxuICAgKiBkZWZhdWx0OiB0cnVlXG4gICAqL1xuICBzaG93VGl0bGU/OiBib29sZWFuO1xuICAvKipcbiAgICogQ3VzdG9taXplIHRoZSBUaXRsZSAoQW5kcm9pZCBvbmx5KVxuICAgKiBkZWZhdWx0OiBcIlNlbGVjdCBJbWFnZVwiXG4gICAqL1xuICB0aXRsZT86IHN0cmluZztcbiAgLyoqXG4gICAqIFNob3cgdGhlIHpvb21JbmRpY2F0b3IgYXQgdGhlIEltYWdlcyAoQW5kcm9pZCBvbmx5KVxuICAgKiBkZWZhdWx0OiB0cnVlXG4gICAqL1xuICB6b29tSW5kaWNhdG9yPzogYm9vbGVhbjtcbiAgLyoqXG4gICAqIE1pbiBDb3VudCBvZiBmaWxlcyB0byBiZSBzZWxlY3RlZFxuICAgKiBkZWZhdWx0OiAwIChhbmRyb2lkKSwgMSAoaU9TKVxuICAgKi9cbiAgbWluPzogbnVtYmVyO1xuICAvKipcbiAgICogTWVzc2FnZSB0byBiZSBzaG93biBpZiBtaW4gQ291bnQgbm90IHJlYWNoZWQgKEFuZHJvaWQgb25seSlcbiAgICogZGVmYXVsdDogXCJZb3UgbmVlZCB0byBzZWxlY3QgYSBtaW5pbXVtIG9mIC4uLiBwaWN0dXJlc1wiKVwiXG4gICAqL1xuICBtaW5Db3VudE1lc3NhZ2U/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBNYXggQ291bnQgb2YgZmlsZXMgY2FuIHNlbGVjdGVkXG4gICAqIGRlZmF1bHQ6IDAgKGFuZHJvaWQpLCAxIChpT1MpXG4gICAqL1xuICBtYXg/OiBudW1iZXI7XG4gIC8qKlxuICAgKiBNZXNzYWdlIHRvIGJlIHNob3duIGlmIG1heCBDb3VudCBpcyByZWFjaGVkXG4gICAqIGRlZmF1bHQ6IFwiWW91IGNhbiBzZWxlY3QgYSBtYXhpbXVtIG9mIC4uLiBwaWN0dXJlc1wiXG4gICAqL1xuICBtYXhDb3VudE1lc3NhZ2U/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBDaGFuZ2UgRG9uZSBCdXR0b24gVGV4dFxuICAgKi9cbiAgYnV0dG9uVGV4dD86IHN0cmluZztcbiAgLyoqXG4gICAqIFNob3cgTGlicmFyeSBhcyBEcm9wZG93biAoQW5kcm9pZCBvbmx5KVxuICAgKiBkZWZhdWx0OiBmYWxzZVxuICAgKi9cbiAgYXNEcm9wZG93bj86IGJvb2xlYW47XG4gIC8qKlxuICAgKiBSZXR1cm4gdGhlIFJlc3VsdCBhcyBiYXNlNjRcbiAgICogZGVmYXVsdDogZmFsc2VcbiAgICovXG4gIGFzQmFzZTY0PzogYm9vbGVhbjtcbiAgLyoqXG4gICAqIFJldHVybiB0aGUgSW1hZ2UgYXMgSlBFR1xuICAgKiBkZWZhdWx0OiBmYWxzZVxuICAgKi9cbiAgYXNKcGVnPzogYm9vbGVhbjtcbiAgLyoqXG4gICAqIFZpZGVvIENvbXByZXNzaW9uIE9wdGlvbiAoaU9TIG9ubHkpXG4gICAqIGF2YWlsYWJsZSBvcHRpb25zOiBodHRwczovL2dpdGh1Yi5jb20vWXVtbXlwZXRzL1lQSW1hZ2VQaWNrZXIvYmxvYi8yMzE1OGUxMzhiZDY0OWI0MDc2MmJmMmU0YWE0YmViMGQ0NjNhMTIxL1NvdXJjZS9Db25maWd1cmF0aW9uL1lQSW1hZ2VQaWNrZXJDb25maWd1cmF0aW9uLnN3aWZ0I0wyMjYtTDI0MFxuICAgKiBkZWZhdWx0OiBBVkFzc2V0RXhwb3J0UHJlc2V0SGlnaGVzdFF1YWxpdHlcbiAgICovXG4gIHZpZGVvQ29tcHJlc3Npb24/OiBzdHJpbmc7XG59XG5cbmludGVyZmFjZSBSZXN1bHQge1xuICB0eXBlOiAnaW1hZ2UnIHwgJ3ZpZGVvJztcbiAgaXNCYXNlNjQ6IGJvb2xlYW47XG4gIHNyYzogc3RyaW5nO1xufVxuXG5leHBvcnQgZW51bSBFcnJvckNvZGVzIHtcbiAgVW5zdXBwb3J0ZWRBY3Rpb24gPSAxLFxuICBXcm9uZ0pzb25PYmplY3QgPSAyLFxuICBQaWNrZXJDYW5jZWxlZCA9IDMsXG4gIFVua25vd25FcnJvciA9IDEwLFxufVxuXG4vKipcbiAqIFVzZWQgZm9yIGV2ZXJ5IFBsdWdpbiBFcnJvciBDYWxsYmFja1xuICovXG5pbnRlcmZhY2UgQWR2YW5jZWRJbWFnZVBpY2tlckVycm9yIHtcbiAgLyoqXG4gICAqIE9uZSBvZiB0aGUgQWR2YW5jZWRJbWFnZVBpY2tlckVycm9yQ29kZXNcbiAgICovXG4gIGNvZGU6IEVycm9yQ29kZXM7XG5cbiAgLyoqXG4gICAqIElmIGF2YWlsYWJsZSBzb21lIG1vcmUgaW5mbyAobW9zdGx5IGV4Y2VwdGlvbiBtZXNzYWdlKVxuICAgKi9cbiAgbWVzc2FnZTogc3RyaW5nO1xufVxuXG4vKipcbiAqIEBuYW1lIEFkdmFuY2VkSW1hZ2VQaWNrZXJcbiAqIEBkZXNjcmlwdGlvblxuICogVGhpcyBDb3Jkb3ZhIFBsdWdpbiBpcyBmb3IgYSBiZXR0ZXIgKG11bHRpcGxlKSBJbWFnZVBpY2tlciB3aXRoIG1vcmUgb3B0aW9ucy5cbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IEFkdmFuY2VkSW1hZ2VQaWNrZXIgfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvYWR2YW5jZWQtaW1hZ2UtcGlja2VyL25weCc7XG4gKlxuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgYWR2YW5jZWRJbWFnZVBpY2tlcjogQWR2YW5jZWRJbWFnZVBpY2tlcikgeyB9XG4gKlxuICogLi4uXG4gKlxuICpcbiAqIHRoaXMuYWR2YW5jZWRJbWFnZVBpY2tlci5wcmVzZW50e1xuICogICAvLyBjb25maWcgaGVyZVxuICogfSlcbiAqICAgLnRoZW4oKHJlczogUmVzdWx0W10pID0+IGNvbnNvbGUubG9nKHJlcykpXG4gKiAgIC5jYXRjaCgoZXJyb3I6IEFkdmFuY2VkSW1hZ2VQaWNrZXJFcnJvcikgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xuICpcbiAqIGBgYFxuICovXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ0FkdmFuY2VkSW1hZ2VQaWNrZXInLFxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1hZHZhbmNlZC1pbWFnZXBpY2tlcicsXG4gIHBsdWdpblJlZjogJ0FkdmFuY2VkSW1hZ2VQaWNrZXInLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL0VpbmZhY2hIYW5zL2NvcmRvdmEtcGx1Z2luLWFkdmFuY2VkLWltYWdlcGlja2VyJyxcbiAgaW5zdGFsbDogJ2lvbmljIGNvcmRvdmEgcGx1Z2luIGFkZCBjb3Jkb3ZhLXBsdWdpbi1hZHZhbmNlZC1pbWFnZXBpY2tlcicsXG4gIGluc3RhbGxWYXJpYWJsZXM6IFsnQU5EUk9JRF9JTUFHRV9QSUNLRVJfVkVSU0lPTiddLFxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXSxcbn0pXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQWR2YW5jZWRJbWFnZVBpY2tlciBleHRlbmRzIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luIHtcbiAgLyoqXG4gICAqIFByZXNlbnQgdGhlIEltYWdlUGlja2VyXG4gICAqIEBwYXJhbSBvcHRpb25zIHtQcmVzZW50T3B0aW9uc30gaHR0cHM6Ly9naXRodWIuY29tL0VpbmZhY2hIYW5zL2NvcmRvdmEtcGx1Z2luLWFkdmFuY2VkLWltYWdlcGlja2VyL3RyZWUvbWFzdGVyI3BhcmFtZXRlcnNcbiAgICogQHJldHVybiB7UHJvbWlzZTxSZXN1bHRbXT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHByZXNlbnQob3B0aW9uczogUHJlc2VudE9wdGlvbnMpOiBQcm9taXNlPFJlc3VsdFtdPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIENsZWFucyBhbGwgdGVtcCBzdG9yZWQgRmlsZXMgdGhhdCB3YXMgY3JlYXRlZCBieSB0aGlzIFBsdWdpbiAoaU9TIG9ubHkpXG4gICAqL1xuICBAQ29yZG92YSh7IHBsYXRmb3JtczogWydpT1MnXSB9KVxuICBjbGVhbnVwKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybjtcbiAgfVxufVxuIl19