var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
export var ErrorCodes;
(function (ErrorCodes) {
    ErrorCodes[ErrorCodes["UnsupportedAction"] = 1] = "UnsupportedAction";
    ErrorCodes[ErrorCodes["WrongJsonObject"] = 2] = "WrongJsonObject";
    ErrorCodes[ErrorCodes["PickerCanceled"] = 3] = "PickerCanceled";
    ErrorCodes[ErrorCodes["UnknownError"] = 10] = "UnknownError";
})(ErrorCodes || (ErrorCodes = {}));
var AdvancedImagePickerOriginal = /** @class */ (function (_super) {
    __extends(AdvancedImagePickerOriginal, _super);
    function AdvancedImagePickerOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AdvancedImagePickerOriginal.prototype.present = function (options) { return cordova(this, "present", {}, arguments); };
    AdvancedImagePickerOriginal.prototype.cleanup = function () { return cordova(this, "cleanup", { "platforms": ["iOS"] }, arguments); };
    AdvancedImagePickerOriginal.pluginName = "AdvancedImagePicker";
    AdvancedImagePickerOriginal.plugin = "cordova-plugin-advanced-imagepicker";
    AdvancedImagePickerOriginal.pluginRef = "AdvancedImagePicker";
    AdvancedImagePickerOriginal.repo = "https://github.com/EinfachHans/cordova-plugin-advanced-imagepicker";
    AdvancedImagePickerOriginal.install = "ionic cordova plugin add cordova-plugin-advanced-imagepicker";
    AdvancedImagePickerOriginal.installVariables = ["ANDROID_IMAGE_PICKER_VERSION"];
    AdvancedImagePickerOriginal.platforms = ["Android", "iOS"];
    return AdvancedImagePickerOriginal;
}(AwesomeCordovaNativePlugin));
var AdvancedImagePicker = new AdvancedImagePickerOriginal();
export { AdvancedImagePicker };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvYWR2YW5jZWQtaW1hZ2UtcGlja2VyL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUNBLE9BQU8sdUNBQStDLE1BQU0sK0JBQStCLENBQUM7QUEyRjVGLE1BQU0sQ0FBTixJQUFZLFVBS1g7QUFMRCxXQUFZLFVBQVU7SUFDcEIscUVBQXFCLENBQUE7SUFDckIsaUVBQW1CLENBQUE7SUFDbkIsK0RBQWtCLENBQUE7SUFDbEIsNERBQWlCLENBQUE7QUFDbkIsQ0FBQyxFQUxXLFVBQVUsS0FBVixVQUFVLFFBS3JCOztJQWtEd0MsdUNBQTBCOzs7O0lBT2pFLHFDQUFPLGFBQUMsT0FBdUI7SUFRL0IscUNBQU87Ozs7Ozs7OzhCQWxLVDtFQW1KeUMsMEJBQTBCO1NBQXRELG1CQUFtQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFBsdWdpbiwgQ29yZG92YSwgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4gfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvY29yZSc7XG5cbmludGVyZmFjZSBQcmVzZW50T3B0aW9ucyB7XG4gIC8qKlxuICAgKiBXaGljaCBNZWRpYSBUeXBlcyBhcmUgYWxsb3dlZCB0byBiZSBzZWxlY3RlZFxuICAgKiBkZWZhdWx0OiBcIklNQUdFXCJcbiAgICovXG4gIG1lZGlhVHlwZT86ICdJTUFHRScgfCAnVklERU8nIHwgJ0FMTCc7XG4gIC8qKlxuICAgKiBTaG93IHBvc3NpYmlsaXR5IHRvIHRha2UgdmlhIENhbWVyYVxuICAgKiBkZWZhdWx0OiB0cnVlXG4gICAqL1xuICBzaG93Q2FtZXJhVGlsZT86IGJvb2xlYW47XG4gIC8qKlxuICAgKiBPbiB3aGljaCBTY3JlZW4gdGhlIFBpY2tlciBzaG91bGQgYmUgc3RhcnRlZCAoaU9TIG9ubHkpXG4gICAqIGRlZmF1bHQ6IFwiTElCUkFSWVwiXG4gICAqL1xuICBzdGFydE9uU2NyZWVuPzogJ0xJQlJBUlknIHwgJ0lNQUdFJyB8ICdWSURFTyc7XG4gIC8qKlxuICAgKiBEYXRlIGZvcm1hdCBvZiB0aGUgU2Nyb2xsIEluZGljYXRvciAoQW5kcm9pZCBvbmx5KVxuICAgKiBkZWZhdWx0OiBcIllZWVkuTU1cIlxuICAgKi9cbiAgc2Nyb2xsSW5kaWNhdG9yRGF0ZUZvcm1hdD86IHN0cmluZztcbiAgLyoqXG4gICAqIFNob3cgVGl0bGUgKEFuZHJvaWQgb25seSlcbiAgICogZGVmYXVsdDogdHJ1ZVxuICAgKi9cbiAgc2hvd1RpdGxlPzogYm9vbGVhbjtcbiAgLyoqXG4gICAqIEN1c3RvbWl6ZSB0aGUgVGl0bGUgKEFuZHJvaWQgb25seSlcbiAgICogZGVmYXVsdDogXCJTZWxlY3QgSW1hZ2VcIlxuICAgKi9cbiAgdGl0bGU/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBTaG93IHRoZSB6b29tSW5kaWNhdG9yIGF0IHRoZSBJbWFnZXMgKEFuZHJvaWQgb25seSlcbiAgICogZGVmYXVsdDogdHJ1ZVxuICAgKi9cbiAgem9vbUluZGljYXRvcj86IGJvb2xlYW47XG4gIC8qKlxuICAgKiBNaW4gQ291bnQgb2YgZmlsZXMgdG8gYmUgc2VsZWN0ZWRcbiAgICogZGVmYXVsdDogMCAoYW5kcm9pZCksIDEgKGlPUylcbiAgICovXG4gIG1pbj86IG51bWJlcjtcbiAgLyoqXG4gICAqIE1lc3NhZ2UgdG8gYmUgc2hvd24gaWYgbWluIENvdW50IG5vdCByZWFjaGVkIChBbmRyb2lkIG9ubHkpXG4gICAqIGRlZmF1bHQ6IFwiWW91IG5lZWQgdG8gc2VsZWN0IGEgbWluaW11bSBvZiAuLi4gcGljdHVyZXNcIilcIlxuICAgKi9cbiAgbWluQ291bnRNZXNzYWdlPzogc3RyaW5nO1xuICAvKipcbiAgICogTWF4IENvdW50IG9mIGZpbGVzIGNhbiBzZWxlY3RlZFxuICAgKiBkZWZhdWx0OiAwIChhbmRyb2lkKSwgMSAoaU9TKVxuICAgKi9cbiAgbWF4PzogbnVtYmVyO1xuICAvKipcbiAgICogTWVzc2FnZSB0byBiZSBzaG93biBpZiBtYXggQ291bnQgaXMgcmVhY2hlZFxuICAgKiBkZWZhdWx0OiBcIllvdSBjYW4gc2VsZWN0IGEgbWF4aW11bSBvZiAuLi4gcGljdHVyZXNcIlxuICAgKi9cbiAgbWF4Q291bnRNZXNzYWdlPzogc3RyaW5nO1xuICAvKipcbiAgICogQ2hhbmdlIERvbmUgQnV0dG9uIFRleHRcbiAgICovXG4gIGJ1dHRvblRleHQ/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBTaG93IExpYnJhcnkgYXMgRHJvcGRvd24gKEFuZHJvaWQgb25seSlcbiAgICogZGVmYXVsdDogZmFsc2VcbiAgICovXG4gIGFzRHJvcGRvd24/OiBib29sZWFuO1xuICAvKipcbiAgICogUmV0dXJuIHRoZSBSZXN1bHQgYXMgYmFzZTY0XG4gICAqIGRlZmF1bHQ6IGZhbHNlXG4gICAqL1xuICBhc0Jhc2U2ND86IGJvb2xlYW47XG4gIC8qKlxuICAgKiBSZXR1cm4gdGhlIEltYWdlIGFzIEpQRUdcbiAgICogZGVmYXVsdDogZmFsc2VcbiAgICovXG4gIGFzSnBlZz86IGJvb2xlYW47XG4gIC8qKlxuICAgKiBWaWRlbyBDb21wcmVzc2lvbiBPcHRpb24gKGlPUyBvbmx5KVxuICAgKiBhdmFpbGFibGUgb3B0aW9uczogaHR0cHM6Ly9naXRodWIuY29tL1l1bW15cGV0cy9ZUEltYWdlUGlja2VyL2Jsb2IvMjMxNThlMTM4YmQ2NDliNDA3NjJiZjJlNGFhNGJlYjBkNDYzYTEyMS9Tb3VyY2UvQ29uZmlndXJhdGlvbi9ZUEltYWdlUGlja2VyQ29uZmlndXJhdGlvbi5zd2lmdCNMMjI2LUwyNDBcbiAgICogZGVmYXVsdDogQVZBc3NldEV4cG9ydFByZXNldEhpZ2hlc3RRdWFsaXR5XG4gICAqL1xuICB2aWRlb0NvbXByZXNzaW9uPzogc3RyaW5nO1xufVxuXG5pbnRlcmZhY2UgUmVzdWx0IHtcbiAgdHlwZTogJ2ltYWdlJyB8ICd2aWRlbyc7XG4gIGlzQmFzZTY0OiBib29sZWFuO1xuICBzcmM6IHN0cmluZztcbn1cblxuZXhwb3J0IGVudW0gRXJyb3JDb2RlcyB7XG4gIFVuc3VwcG9ydGVkQWN0aW9uID0gMSxcbiAgV3JvbmdKc29uT2JqZWN0ID0gMixcbiAgUGlja2VyQ2FuY2VsZWQgPSAzLFxuICBVbmtub3duRXJyb3IgPSAxMCxcbn1cblxuLyoqXG4gKiBVc2VkIGZvciBldmVyeSBQbHVnaW4gRXJyb3IgQ2FsbGJhY2tcbiAqL1xuaW50ZXJmYWNlIEFkdmFuY2VkSW1hZ2VQaWNrZXJFcnJvciB7XG4gIC8qKlxuICAgKiBPbmUgb2YgdGhlIEFkdmFuY2VkSW1hZ2VQaWNrZXJFcnJvckNvZGVzXG4gICAqL1xuICBjb2RlOiBFcnJvckNvZGVzO1xuXG4gIC8qKlxuICAgKiBJZiBhdmFpbGFibGUgc29tZSBtb3JlIGluZm8gKG1vc3RseSBleGNlcHRpb24gbWVzc2FnZSlcbiAgICovXG4gIG1lc3NhZ2U6IHN0cmluZztcbn1cblxuLyoqXG4gKiBAbmFtZSBBZHZhbmNlZEltYWdlUGlja2VyXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoaXMgQ29yZG92YSBQbHVnaW4gaXMgZm9yIGEgYmV0dGVyIChtdWx0aXBsZSkgSW1hZ2VQaWNrZXIgd2l0aCBtb3JlIG9wdGlvbnMuXG4gKlxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBBZHZhbmNlZEltYWdlUGlja2VyIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL2FkdmFuY2VkLWltYWdlLXBpY2tlci9ucHgnO1xuICpcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGFkdmFuY2VkSW1hZ2VQaWNrZXI6IEFkdmFuY2VkSW1hZ2VQaWNrZXIpIHsgfVxuICpcbiAqIC4uLlxuICpcbiAqXG4gKiB0aGlzLmFkdmFuY2VkSW1hZ2VQaWNrZXIucHJlc2VudHtcbiAqICAgLy8gY29uZmlnIGhlcmVcbiAqIH0pXG4gKiAgIC50aGVuKChyZXM6IFJlc3VsdFtdKSA9PiBjb25zb2xlLmxvZyhyZXMpKVxuICogICAuY2F0Y2goKGVycm9yOiBBZHZhbmNlZEltYWdlUGlja2VyRXJyb3IpID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcbiAqXG4gKiBgYGBcbiAqL1xuQFBsdWdpbih7XG4gIHBsdWdpbk5hbWU6ICdBZHZhbmNlZEltYWdlUGlja2VyJyxcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tYWR2YW5jZWQtaW1hZ2VwaWNrZXInLFxuICBwbHVnaW5SZWY6ICdBZHZhbmNlZEltYWdlUGlja2VyJyxcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9FaW5mYWNoSGFucy9jb3Jkb3ZhLXBsdWdpbi1hZHZhbmNlZC1pbWFnZXBpY2tlcicsXG4gIGluc3RhbGw6ICdpb25pYyBjb3Jkb3ZhIHBsdWdpbiBhZGQgY29yZG92YS1wbHVnaW4tYWR2YW5jZWQtaW1hZ2VwaWNrZXInLFxuICBpbnN0YWxsVmFyaWFibGVzOiBbJ0FORFJPSURfSU1BR0VfUElDS0VSX1ZFUlNJT04nXSxcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJ10sXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEFkdmFuY2VkSW1hZ2VQaWNrZXIgZXh0ZW5kcyBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiB7XG4gIC8qKlxuICAgKiBQcmVzZW50IHRoZSBJbWFnZVBpY2tlclxuICAgKiBAcGFyYW0gb3B0aW9ucyB7UHJlc2VudE9wdGlvbnN9IGh0dHBzOi8vZ2l0aHViLmNvbS9FaW5mYWNoSGFucy9jb3Jkb3ZhLXBsdWdpbi1hZHZhbmNlZC1pbWFnZXBpY2tlci90cmVlL21hc3RlciNwYXJhbWV0ZXJzXG4gICAqIEByZXR1cm4ge1Byb21pc2U8UmVzdWx0W10+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBwcmVzZW50KG9wdGlvbnM6IFByZXNlbnRPcHRpb25zKTogUHJvbWlzZTxSZXN1bHRbXT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbGVhbnMgYWxsIHRlbXAgc3RvcmVkIEZpbGVzIHRoYXQgd2FzIGNyZWF0ZWQgYnkgdGhpcyBQbHVnaW4gKGlPUyBvbmx5KVxuICAgKi9cbiAgQENvcmRvdmEoeyBwbGF0Zm9ybXM6IFsnaU9TJ10gfSlcbiAgY2xlYW51cCgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm47XG4gIH1cbn1cbiJdfQ==