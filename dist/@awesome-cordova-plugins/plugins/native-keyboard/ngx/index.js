import { __extends } from "tslib";
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import { Injectable } from '@angular/core';
var NativeKeyboard = /** @class */ (function (_super) {
    __extends(NativeKeyboard, _super);
    function NativeKeyboard() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NativeKeyboard.prototype.showMessenger = function (options) { return cordova(this, "showMessenger", { "sync": true }, arguments); };
    NativeKeyboard.prototype.hideMessenger = function (options) { return cordova(this, "hideMessenger", { "sync": true }, arguments); };
    NativeKeyboard.prototype.showMessengerKeyboard = function () { return cordova(this, "showMessengerKeyboard", {}, arguments); };
    NativeKeyboard.prototype.hideMessengerKeyboard = function () { return cordova(this, "hideMessengerKeyboard", {}, arguments); };
    NativeKeyboard.prototype.updateMessenger = function (options) { return cordova(this, "updateMessenger", {}, arguments); };
    NativeKeyboard.pluginName = "NativeKeyboard";
    NativeKeyboard.plugin = "cordova-plugin-native-keyboard";
    NativeKeyboard.pluginRef = "NativeKeyboard";
    NativeKeyboard.repo = "https://github.com/EddyVerbruggen/cordova-plugin-native-keyboard";
    NativeKeyboard.platforms = ["Android", "iOS"];
    NativeKeyboard.decorators = [
        { type: Injectable }
    ];
    return NativeKeyboard;
}(AwesomeCordovaNativePlugin));
export { NativeKeyboard };
//# sourceMappingURL=data:application/json;base64,