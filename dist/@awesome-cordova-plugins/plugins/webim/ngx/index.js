import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import { Observable } from 'rxjs';
import * as i0 from "@angular/core";
var Webim = /** @class */ (function (_super) {
    __extends(Webim, _super);
    function Webim() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Webim.prototype.init = function (params) { return cordova(this, "init", {}, arguments); };
    Webim.prototype.requestDialog = function () { return cordova(this, "requestDialog", {}, arguments); };
    Webim.prototype.getMessagesHistory = function (limit, offset) { return cordova(this, "getMessagesHistory", {}, arguments); };
    Webim.prototype.typingMessage = function (message) { return cordova(this, "typingMessage", {}, arguments); };
    Webim.prototype.sendMessage = function (message) { return cordova(this, "sendMessage", {}, arguments); };
    Webim.prototype.replyMessage = function (message, repliedMessage) { return cordova(this, "replyMessage", {}, arguments); };
    Webim.prototype.sendFile = function (filePath) { return cordova(this, "sendFile", {}, arguments); };
    Webim.prototype.sendSurveyAnswer = function (surveyAnswer) { return cordova(this, "sendSurveyAnswer", {}, arguments); };
    Webim.prototype.cancelSurvey = function () { return cordova(this, "cancelSurvey", {}, arguments); };
    Webim.prototype.onMessage = function () { return cordova(this, "onMessage", { "observable": true, "clearFunction": "close" }, arguments); };
    Webim.prototype.onDeletedMessage = function () { return cordova(this, "onDeletedMessage", { "observable": true, "clearFunction": "close" }, arguments); };
    Webim.prototype.onFile = function (message) { return cordova(this, "onFile", { "observable": true, "clearFunction": "close" }, arguments); };
    Webim.prototype.onTyping = function () { return cordova(this, "onTyping", { "observable": true, "clearFunction": "close" }, arguments); };
    Webim.prototype.onConfirm = function () { return cordova(this, "onConfirm", { "observable": true, "clearFunction": "close" }, arguments); };
    Webim.prototype.onDialog = function () { return cordova(this, "onDialog", { "observable": true, "clearFunction": "close" }, arguments); };
    Webim.prototype.onBan = function () { return cordova(this, "onBan", { "observable": true, "clearFunction": "close" }, arguments); };
    Webim.prototype.close = function () { return cordova(this, "close", {}, arguments); };
    Webim.prototype.rateOperator = function (id, rating) { return cordova(this, "rateOperator", {}, arguments); };
    Webim.prototype.rateOperatorWithNote = function (id, rating, note) { return cordova(this, "rateOperatorWithNote", {}, arguments); };
    Webim.prototype.sendDialogToEmailAddress = function (emailAddress) { return cordova(this, "sendDialogToEmailAddress", {}, arguments); };
    Webim.prototype.onUnreadByVisitorMessageCount = function () { return cordova(this, "onUnreadByVisitorMessageCount", { "observable": true, "clearFunction": "close" }, arguments); };
    Webim.prototype.onSurvey = function () { return cordova(this, "onSurvey", { "observable": true, "clearFunction": "close" }, arguments); };
    Webim.prototype.onNextQuestion = function () { return cordova(this, "onNextQuestion", { "observable": true, "clearFunction": "close" }, arguments); };
    Webim.prototype.onSurveyCancel = function () { return cordova(this, "onSurveyCancel", { "observable": true, "clearFunction": "close" }, arguments); };
    Webim.prototype.getUnreadByVisitorMessageCount = function () { return cordova(this, "getUnreadByVisitorMessageCount", {}, arguments); };
    Webim.prototype.sendKeyboardRequest = function () { return cordova(this, "sendKeyboardRequest", {}, arguments); };
    Webim.prototype.setChatRead = function () { return cordova(this, "setChatRead", {}, arguments); };
    Webim.prototype.getShowEmailButton = function () { return cordova(this, "getShowEmailButton", {}, arguments); };
    Webim.prototype.showRateOperatorWindow = function () { return cordova(this, "showRateOperatorWindow", {}, arguments); };
    Webim.prototype.onLogging = function () { return cordova(this, "onLogging", { "observable": true, "clearFunction": "close" }, arguments); };
    Webim.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: Webim, deps: null, target: i0.ɵɵFactoryTarget.Injectable });
    Webim.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: Webim });
    Webim.pluginName = "Webim";
    Webim.plugin = "ru.webim.sdk";
    Webim.pluginRef = "webimsdk";
    Webim.repo = "https://github.com/webim/webim-cordova-plugin.git";
    Webim.install = "cordova plugin add https://github.com/webim/webim-cordova-plugin.git";
    Webim.platforms = ["Android", "iOS", "Browser"];
    Webim = __decorate([], Webim);
    return Webim;
}(AwesomeCordovaNativePlugin));
export { Webim };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: Webim, decorators: [{
            type: Injectable
        }], propDecorators: { init: [], requestDialog: [], getMessagesHistory: [], typingMessage: [], sendMessage: [], replyMessage: [], sendFile: [], sendSurveyAnswer: [], cancelSurvey: [], onMessage: [], onDeletedMessage: [], onFile: [], onTyping: [], onConfirm: [], onDialog: [], onBan: [], close: [], rateOperator: [], rateOperatorWithNote: [], sendDialogToEmailAddress: [], onUnreadByVisitorMessageCount: [], onSurvey: [], onNextQuestion: [], onSurveyCancel: [], getUnreadByVisitorMessageCount: [], sendKeyboardRequest: [], setChatRead: [], getShowEmailButton: [], showRateOperatorWindow: [], onLogging: [] } });
//# sourceMappingURL=data:application/json;base64,