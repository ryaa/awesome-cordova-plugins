var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import { Observable } from 'rxjs';
var BLEOriginal = /** @class */ (function (_super) {
    __extends(BLEOriginal, _super);
    function BLEOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BLEOriginal.prototype.scan = function (services, seconds) { return cordova(this, "scan", { "observable": true }, arguments); };
    BLEOriginal.prototype.startScan = function (services) { return cordova(this, "startScan", { "observable": true, "clearFunction": "stopScan", "clearWithArgs": false }, arguments); };
    BLEOriginal.prototype.startScanWithOptions = function (services, options) { return cordova(this, "startScanWithOptions", { "observable": true, "clearFunction": "stopScan", "clearWithArgs": false }, arguments); };
    BLEOriginal.prototype.stopScan = function () { return cordova(this, "stopScan", {}, arguments); };
    BLEOriginal.prototype.setPin = function (pin) { return cordova(this, "setPin", { "observable": true }, arguments); };
    BLEOriginal.prototype.connect = function (deviceId) { return cordova(this, "connect", { "observable": true, "clearFunction": "disconnect", "clearWithArgs": true }, arguments); };
    BLEOriginal.prototype.autoConnect = function (deviceId, connectCallback, disconnectCallback) { return cordova(this, "autoConnect", { "sync": true }, arguments); };
    BLEOriginal.prototype.requestMtu = function (deviceId, mtuSize) { return cordova(this, "requestMtu", {}, arguments); };
    BLEOriginal.prototype.refreshDeviceCache = function (deviceId, timeoutMillis) { return cordova(this, "refreshDeviceCache", {}, arguments); };
    BLEOriginal.prototype.disconnect = function (deviceId) { return cordova(this, "disconnect", {}, arguments); };
    BLEOriginal.prototype.read = function (deviceId, serviceUUID, characteristicUUID) { return cordova(this, "read", {}, arguments); };
    BLEOriginal.prototype.write = function (deviceId, serviceUUID, characteristicUUID, value) { return cordova(this, "write", {}, arguments); };
    BLEOriginal.prototype.writeWithoutResponse = function (deviceId, serviceUUID, characteristicUUID, value) { return cordova(this, "writeWithoutResponse", {}, arguments); };
    BLEOriginal.prototype.startNotification = function (deviceId, serviceUUID, characteristicUUID) { return cordova(this, "startNotification", { "observable": true, "destruct": true, "clearFunction": "stopNotification", "clearWithArgs": true }, arguments); };
    BLEOriginal.prototype.stopNotification = function (deviceId, serviceUUID, characteristicUUID) { return cordova(this, "stopNotification", {}, arguments); };
    BLEOriginal.prototype.isConnected = function (deviceId) { return cordova(this, "isConnected", {}, arguments); };
    BLEOriginal.prototype.isEnabled = function () { return cordova(this, "isEnabled", {}, arguments); };
    BLEOriginal.prototype.startStateNotifications = function () { return cordova(this, "startStateNotifications", { "observable": true, "clearFunction": "stopStateNotifications", "clearWithArgs": false }, arguments); };
    BLEOriginal.prototype.stopStateNotifications = function () { return cordova(this, "stopStateNotifications", {}, arguments); };
    BLEOriginal.prototype.startLocationStateNotifications = function () { return cordova(this, "startLocationStateNotifications", { "observable": true, "clearFunction": "stopLocationStateNotifications", "clearWithArgs": false }, arguments); };
    BLEOriginal.prototype.stopLocationStateNotifications = function () { return cordova(this, "stopLocationStateNotifications", {}, arguments); };
    BLEOriginal.prototype.showBluetoothSettings = function () { return cordova(this, "showBluetoothSettings", {}, arguments); };
    BLEOriginal.prototype.enable = function () { return cordova(this, "enable", {}, arguments); };
    BLEOriginal.prototype.readRSSI = function (deviceId) { return cordova(this, "readRSSI", {}, arguments); };
    BLEOriginal.prototype.connectedPeripheralsWithServices = function (services) { return cordova(this, "connectedPeripheralsWithServices", {}, arguments); };
    BLEOriginal.prototype.peripheralsWithIdentifiers = function (uuids) { return cordova(this, "peripheralsWithIdentifiers", {}, arguments); };
    BLEOriginal.prototype.bondedDevices = function () { return cordova(this, "bondedDevices", {}, arguments); };
    BLEOriginal.prototype.isLocationEnabled = function () { return cordova(this, "isLocationEnabled", {}, arguments); };
    BLEOriginal.pluginName = "BLE";
    BLEOriginal.plugin = "cordova-plugin-ble-central";
    BLEOriginal.pluginRef = "ble";
    BLEOriginal.repo = "https://github.com/don/cordova-plugin-ble-central";
    BLEOriginal.platforms = ["Android", "iOS"];
    return BLEOriginal;
}(AwesomeCordovaNativePlugin));
var BLE = new BLEOriginal();
export { BLE };
//# sourceMappingURL=data:application/json;base64,