import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import { Observable } from 'rxjs';
var BLE = /** @class */ (function (_super) {
    __extends(BLE, _super);
    function BLE() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BLE.prototype.scan = function (services, seconds) { return cordova(this, "scan", { "observable": true }, arguments); };
    BLE.prototype.startScan = function (services) { return cordova(this, "startScan", { "observable": true, "clearFunction": "stopScan", "clearWithArgs": false }, arguments); };
    BLE.prototype.startScanWithOptions = function (services, options) { return cordova(this, "startScanWithOptions", { "observable": true, "clearFunction": "stopScan", "clearWithArgs": false }, arguments); };
    BLE.prototype.stopScan = function () { return cordova(this, "stopScan", {}, arguments); };
    BLE.prototype.setPin = function (pin) { return cordova(this, "setPin", { "observable": true }, arguments); };
    BLE.prototype.connect = function (deviceId) { return cordova(this, "connect", { "observable": true, "clearFunction": "disconnect", "clearWithArgs": true }, arguments); };
    BLE.prototype.autoConnect = function (deviceId, connectCallback, disconnectCallback) { return cordova(this, "autoConnect", { "sync": true }, arguments); };
    BLE.prototype.requestMtu = function (deviceId, mtuSize) { return cordova(this, "requestMtu", {}, arguments); };
    BLE.prototype.refreshDeviceCache = function (deviceId, timeoutMillis) { return cordova(this, "refreshDeviceCache", {}, arguments); };
    BLE.prototype.disconnect = function (deviceId) { return cordova(this, "disconnect", {}, arguments); };
    BLE.prototype.read = function (deviceId, serviceUUID, characteristicUUID) { return cordova(this, "read", {}, arguments); };
    BLE.prototype.write = function (deviceId, serviceUUID, characteristicUUID, value) { return cordova(this, "write", {}, arguments); };
    BLE.prototype.writeWithoutResponse = function (deviceId, serviceUUID, characteristicUUID, value) { return cordova(this, "writeWithoutResponse", {}, arguments); };
    BLE.prototype.startNotification = function (deviceId, serviceUUID, characteristicUUID) { return cordova(this, "startNotification", { "observable": true, "destruct": true, "clearFunction": "stopNotification", "clearWithArgs": true }, arguments); };
    BLE.prototype.stopNotification = function (deviceId, serviceUUID, characteristicUUID) { return cordova(this, "stopNotification", {}, arguments); };
    BLE.prototype.isConnected = function (deviceId) { return cordova(this, "isConnected", {}, arguments); };
    BLE.prototype.isEnabled = function () { return cordova(this, "isEnabled", {}, arguments); };
    BLE.prototype.startStateNotifications = function () { return cordova(this, "startStateNotifications", { "observable": true, "clearFunction": "stopStateNotifications", "clearWithArgs": false }, arguments); };
    BLE.prototype.stopStateNotifications = function () { return cordova(this, "stopStateNotifications", {}, arguments); };
    BLE.prototype.showBluetoothSettings = function () { return cordova(this, "showBluetoothSettings", {}, arguments); };
    BLE.prototype.enable = function () { return cordova(this, "enable", {}, arguments); };
    BLE.prototype.readRSSI = function (deviceId) { return cordova(this, "readRSSI", {}, arguments); };
    BLE.prototype.connectedPeripheralsWithServices = function (services) { return cordova(this, "connectedPeripheralsWithServices", {}, arguments); };
    BLE.prototype.peripheralsWithIdentifiers = function (uuids) { return cordova(this, "peripheralsWithIdentifiers", {}, arguments); };
    BLE.prototype.bondedDevices = function () { return cordova(this, "bondedDevices", {}, arguments); };
    BLE.prototype.isLocationEnabled = function () { return cordova(this, "isLocationEnabled", {}, arguments); };
    BLE.pluginName = "BLE";
    BLE.plugin = "cordova-plugin-ble-central";
    BLE.pluginRef = "ble";
    BLE.repo = "https://github.com/don/cordova-plugin-ble-central";
    BLE.platforms = ["Android", "iOS"];
    BLE.decorators = [
        { type: Injectable }
    ];
    return BLE;
}(AwesomeCordovaNativePlugin));
export { BLE };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvYmxlL25neC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLHVDQUErQyxNQUFNLCtCQUErQixDQUFDO0FBQzVGLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7O0lBcUxULHVCQUEwQjs7OztJQWlCakQsa0JBQUksYUFBQyxRQUFrQixFQUFFLE9BQWU7SUF5QnhDLHVCQUFTLGFBQUMsUUFBa0I7SUFnQjVCLGtDQUFvQixhQUFDLFFBQWtCLEVBQUUsT0FBdUI7SUFtQmhFLHNCQUFRO0lBc0JSLG9CQUFNLGFBQUMsR0FBVztJQXdCbEIscUJBQU8sYUFBQyxRQUFnQjtJQWdDeEIseUJBQVcsYUFBQyxRQUFnQixFQUFFLGVBQW9CLEVBQUUsa0JBQXVCO0lBcUIzRSx3QkFBVSxhQUFDLFFBQWdCLEVBQUUsT0FBZTtJQXVCNUMsZ0NBQWtCLGFBQUMsUUFBZ0IsRUFBRSxhQUFxQjtJQWlCMUQsd0JBQVUsYUFBQyxRQUFnQjtJQWEzQixrQkFBSSxhQUFDLFFBQWdCLEVBQUUsV0FBbUIsRUFBRSxrQkFBMEI7SUFrQ3RFLG1CQUFLLGFBQUMsUUFBZ0IsRUFBRSxXQUFtQixFQUFFLGtCQUEwQixFQUFFLEtBQWtCO0lBYzNGLGtDQUFvQixhQUNsQixRQUFnQixFQUNoQixXQUFtQixFQUNuQixrQkFBMEIsRUFDMUIsS0FBa0I7SUEyQnBCLCtCQUFpQixhQUFDLFFBQWdCLEVBQUUsV0FBbUIsRUFBRSxrQkFBMEI7SUFhbkYsOEJBQWdCLGFBQUMsUUFBZ0IsRUFBRSxXQUFtQixFQUFFLGtCQUEwQjtJQWtCbEYseUJBQVcsYUFBQyxRQUFnQjtJQVU1Qix1QkFBUztJQW9CVCxxQ0FBdUI7SUFVdkIsb0NBQXNCO0lBVXRCLG1DQUFxQjtJQVVyQixvQkFBTTtJQVdOLHNCQUFRLGFBQUMsUUFBZ0I7SUFhekIsOENBQWdDLGFBQUMsUUFBa0I7SUFZbkQsd0NBQTBCLGFBQUMsS0FBZTtJQVcxQywyQkFBYTtJQVdiLCtCQUFpQjs7Ozs7OztnQkExY2xCLFVBQVU7O2NBdExYO0VBdUx5QiwwQkFBMEI7U0FBdEMsR0FBRyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvcmRvdmEsIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQkxFU2Nhbk9wdGlvbnMge1xuICAvKiogdHJ1ZSBpZiBkdXBsaWNhdGUgZGV2aWNlcyBzaG91bGQgYmUgcmVwb3J0ZWQsIGZhbHNlIChkZWZhdWx0KSBpZiBkZXZpY2VzIHNob3VsZCBvbmx5IGJlIHJlcG9ydGVkIG9uY2UuICAqL1xuICByZXBvcnREdXBsaWNhdGVzPzogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBAbmFtZSBCTEVcbiAqIEBkZXNjcmlwdGlvblxuICogVGhpcyBwbHVnaW4gZW5hYmxlcyBjb21tdW5pY2F0aW9uIGJldHdlZW4gYSBwaG9uZSBhbmQgQmx1ZXRvb3RoIExvdyBFbmVyZ3kgKEJMRSkgcGVyaXBoZXJhbHMuXG4gKlxuICogVGhlIHBsdWdpbiBwcm92aWRlcyBhIHNpbXBsZSBKYXZhU2NyaXB0IEFQSSBmb3IgaU9TIGFuZCBBbmRyb2lkLlxuICpcbiAqIC0gU2NhbiBmb3IgcGVyaXBoZXJhbHNcbiAqIC0gQ29ubmVjdCB0byBhIHBlcmlwaGVyYWxcbiAqIC0gUmVhZCB0aGUgdmFsdWUgb2YgYSBjaGFyYWN0ZXJpc3RpY1xuICogLSBXcml0ZSBuZXcgdmFsdWUgdG8gYSBjaGFyYWN0ZXJpc3RpY1xuICogLSBHZXQgbm90aWZpZWQgd2hlbiBjaGFyYWN0ZXJpc3RpYydzIHZhbHVlIGNoYW5nZXNcbiAqXG4gKiBBZHZlcnRpc2luZyBpbmZvcm1hdGlvbiBpcyByZXR1cm5lZCB3aGVuIHNjYW5uaW5nIGZvciBwZXJpcGhlcmFscy4gU2VydmljZSwgY2hhcmFjdGVyaXN0aWMsIGFuZCBwcm9wZXJ0eSBpbmZvIGlzIHJldHVybmVkIHdoZW4gY29ubmVjdGluZyB0byBhIHBlcmlwaGVyYWwuIEFsbCBhY2Nlc3MgaXMgdmlhIHNlcnZpY2UgYW5kIGNoYXJhY3RlcmlzdGljIFVVSURzLiBUaGUgcGx1Z2luIG1hbmFnZXMgaGFuZGxlcyBpbnRlcm5hbGx5LlxuICpcbiAqIFNpbXVsdGFuZW91cyBjb25uZWN0aW9ucyB0byBtdWx0aXBsZSBwZXJpcGhlcmFscyBhcmUgc3VwcG9ydGVkLlxuICogQHVzYWdlXG4gKlxuICogYGBgdHlwZXNjcmlwdFxuICpcbiAqIGltcG9ydCB7IEJMRSB9IGZyb20gJ0Bhd2Vzb21lLWNvcmRvdmEtcGx1Z2lucy9ibGUvbmd4JztcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGJsZTogQkxFKSB7IH1cbiAqXG4gKiBgYGBcbiAqXG4gKiAjIyBQZXJpcGhlcmFsIERhdGFcbiAqXG4gKiBQZXJpcGhlcmFsIERhdGEgaXMgcGFzc2VkIHRvIHRoZSBzdWNjZXNzIGNhbGxiYWNrIHdoZW4gc2Nhbm5pbmcgYW5kIGNvbm5lY3RpbmcuIExpbWl0ZWQgZGF0YSBpcyBwYXNzZWQgd2hlbiBzY2FubmluZy5cbiAqXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiAgIHtcbiAqICAgICAgICduYW1lJzogJ0JhdHRlcnkgRGVtbycsXG4gKiAgICAgICAnaWQnOiAnMjA6RkY6RDA6RkY6RDE6QzAnLFxuICogICAgICAgJ2FkdmVydGlzaW5nJzogWzIsMSw2LDMsMywxNSwyNCw4LDksNjYsOTcsMTE2LDExNiwxMDEsMTE0LDEyMV0sXG4gKiAgICAgICAncnNzaSc6IC01NVxuICogICB9XG4gKiBgYGBcbiAqIEFmdGVyIGNvbm5lY3RpbmcsIHRoZSBwZXJpcGhlcmFsIG9iamVjdCBhbHNvIGluY2x1ZGVzIHNlcnZpY2UsIGNoYXJhY3RlcmlzdGljIGFuZCBkZXNjcmlwdG9yIGluZm9ybWF0aW9uLlxuICpcbiAqIGBgYHR5cGVzY3JpcHRcbiAqICAge1xuICogICAgICAgJ25hbWUnOiAnQmF0dGVyeSBEZW1vJyxcbiAqICAgICAgICdpZCc6ICcyMDpGRjpEMDpGRjpEMTpDMCcsXG4gKiAgICAgICAnYWR2ZXJ0aXNpbmcnOiBbMiwxLDYsMywzLDE1LDI0LDgsOSw2Niw5NywxMTYsMTE2LDEwMSwxMTQsMTIxXSxcbiAqICAgICAgICdyc3NpJzogLTU1LFxuICogICAgICAgJ3NlcnZpY2VzJzogW1xuICogICAgICAgICAgICcxODAwJyxcbiAqICAgICAgICAgICAnMTgwMScsXG4gKiAgICAgICAgICAgJzE4MGYnXG4gKiAgICAgICBdLFxuICogICAgICAgJ2NoYXJhY3RlcmlzdGljcyc6IFtcbiAqICAgICAgICAgICB7XG4gKiAgICAgICAgICAgICAgICdzZXJ2aWNlJzogJzE4MDAnLFxuICogICAgICAgICAgICAgICAnY2hhcmFjdGVyaXN0aWMnOiAnMmEwMCcsXG4gKiAgICAgICAgICAgICAgICdwcm9wZXJ0aWVzJzogW1xuICogICAgICAgICAgICAgICAgICAgJ1JlYWQnXG4gKiAgICAgICAgICAgICAgIF1cbiAqICAgICAgICAgICB9LFxuICogICAgICAgICAgIHtcbiAqICAgICAgICAgICAgICAgJ3NlcnZpY2UnOiAnMTgwMCcsXG4gKiAgICAgICAgICAgICAgICdjaGFyYWN0ZXJpc3RpYyc6ICcyYTAxJyxcbiAqICAgICAgICAgICAgICAgJ3Byb3BlcnRpZXMnOiBbXG4gKiAgICAgICAgICAgICAgICAgICAnUmVhZCdcbiAqICAgICAgICAgICAgICAgXVxuICogICAgICAgICAgIH0sXG4gKiAgICAgICAgICAge1xuICogICAgICAgICAgICAgICAnc2VydmljZSc6ICcxODAxJyxcbiAqICAgICAgICAgICAgICAgJ2NoYXJhY3RlcmlzdGljJzogJzJhMDUnLFxuICogICAgICAgICAgICAgICAncHJvcGVydGllcyc6IFtcbiAqICAgICAgICAgICAgICAgICAgICdSZWFkJ1xuICogICAgICAgICAgICAgICBdXG4gKiAgICAgICAgICAgfSxcbiAqICAgICAgICAgICB7XG4gKiAgICAgICAgICAgICAgICdzZXJ2aWNlJzogJzE4MGYnLFxuICogICAgICAgICAgICAgICAnY2hhcmFjdGVyaXN0aWMnOiAnMmExOScsXG4gKiAgICAgICAgICAgICAgICdwcm9wZXJ0aWVzJzogW1xuICogICAgICAgICAgICAgICAgICAgJ1JlYWQnXG4gKiAgICAgICAgICAgICAgIF0sXG4gKiAgICAgICAgICAgICAgICdkZXNjcmlwdG9ycyc6IFtcbiAqICAgICAgICAgICAgICAgICAgIHtcbiAqICAgICAgICAgICAgICAgICAgICAgICAndXVpZCc6ICcyOTAxJ1xuICogICAgICAgICAgICAgICAgICAgfSxcbiAqICAgICAgICAgICAgICAgICAgIHtcbiAqICAgICAgICAgICAgICAgICAgICAgICAndXVpZCc6ICcyOTA0J1xuICogICAgICAgICAgICAgICAgICAgfVxuICogICAgICAgICAgICAgICBdXG4gKiAgICAgICAgICAgfVxuICogICAgICAgXVxuICogICB9XG4gKiBgYGBcbiAqXG4gKiAjIyBBZHZlcnRpc2luZyBEYXRhXG4gKiBCbHVldG9vdGggYWR2ZXJ0aXNpbmcgZGF0YSBpcyByZXR1cm5lZCBpbiB3aGVuIHNjYW5uaW5nIGZvciBkZXZpY2VzLiBUaGUgZm9ybWF0IHZhcmllcyBkZXBlbmRpbmcgb24geW91ciBwbGF0Zm9ybS4gT24gQW5kcm9pZCBhZHZlcnRpc2luZyBkYXRhIHdpbGwgYmUgdGhlIHJhdyBhZHZlcnRpc2luZyBieXRlcy4gaU9TIGRvZXMgbm90IGFsbG93IGFjY2VzcyB0byByYXcgYWR2ZXJ0aXNpbmcgZGF0YSwgc28gYSBkaWN0aW9uYXJ5IG9mIGRhdGEgaXMgcmV0dXJuZWQuXG4gKlxuICogVGhlIGFkdmVydGlzaW5nIGluZm9ybWF0aW9uIGZvciBib3RoIEFuZHJvaWQgYW5kIGlPUyBhcHBlYXJzIHRvIGJlIGEgY29tYmluYXRpb24gb2YgYWR2ZXJ0aXNpbmcgZGF0YSBhbmQgc2NhbiByZXNwb25zZSBkYXRhLlxuICpcbiAqICMjIyBBbmRyb2lkXG4gKlxuICogYGBgdHlwZXNjcmlwdFxuICogICB7XG4gKiAgICAgICAnbmFtZSc6ICdkZW1vJyxcbiAqICAgICAgICdpZCc6ICcwMDoxQTo3RDpEQTo3MToxMycsXG4gKiAgICAgICAnYWR2ZXJ0aXNpbmcnOiBBcnJheUJ1ZmZlcixcbiAqICAgICAgJ3Jzc2knOiAtMzdcbiAqICB9XG4gKiBgYGBcbiAqXG4gKiBDb252ZXJ0IHRoZSBhZHZlcnRpc2luZyBpbmZvIHRvIGEgVWludDhBcnJheSBmb3IgcHJvY2Vzc2luZy4gYHZhciBhZERhdGEgPSBuZXcgVWludDhBcnJheShwZXJpcGhlcmFsLmFkdmVydGlzaW5nKWBcbiAqXG4gKiAjIyMgaU9TXG4gKlxuICogTm90ZSB0aGF0IGlPUyB1c2VzIHRoZSBzdHJpbmcgdmFsdWUgb2YgdGhlIGNvbnN0YW50cyBmb3IgdGhlIFtBZHZlcnRpc2VtZW50IERhdGEgUmV0cmlldmFsIEtleXNdKGh0dHBzOi8vZGV2ZWxvcGVyLmFwcGxlLmNvbS9saWJyYXJ5L2lvcy9kb2N1bWVudGF0aW9uL0NvcmVCbHVldG9vdGgvUmVmZXJlbmNlL0NCQ2VudHJhbE1hbmFnZXJEZWxlZ2F0ZV9Qcm90b2NvbC9pbmRleC5odG1sIy8vYXBwbGVfcmVmL2RvYy9jb25zdGFudF9ncm91cC9BZHZlcnRpc2VtZW50X0RhdGFfUmV0cmlldmFsX0tleXMpLiBUaGlzIHdpbGwgbGlrZWx5IGNoYW5nZSBpbiB0aGUgZnV0dXJlLlxuICpcbiAqIGBgYHR5cGVzY3JpcHRcbiAqICAge1xuICogICAgICAgJ25hbWUnOiAnZGVtbycsXG4gKiAgICAgICAnaWQnOiAnRDg0NzlBNEYtNzUxNy1CQ0QzLTkxQjUtMzMwMkIyRjgxODAyJyxcbiAqICAgICAgICdhZHZlcnRpc2luZyc6IHtcbiAqICAgICAgICAgICAna0NCQWR2RGF0YUNoYW5uZWwnOiAzNyxcbiAqICAgICAgICAgICAna0NCQWR2RGF0YVNlcnZpY2VEYXRhJzoge1xuICogICAgICAgICAgICAgICAnRkVEOCc6IHtcbiAqICAgICAgICAgICAgICAgICAgICdieXRlTGVuZ3RoJzogNyAvLyBkYXRhIG5vdCBzaG93blxuICogICAgICAgICAgICAgICB9XG4gKiAgICAgICAgICAgfSxcbiAqICAgICAgICAgICAna0NCQWR2RGF0YUxvY2FsTmFtZSc6ICdkZW1vJyxcbiAqICAgICAgICAgICAna0NCQWR2RGF0YVNlcnZpY2VVVUlEcyc6IFsnRkVEOCddLFxuICogICAgICAgICAgICdrQ0JBZHZEYXRhTWFudWZhY3R1cmVyRGF0YSc6IHtcbiAqICAgICAgICAgICAgICAgJ2J5dGVMZW5ndGgnOiA3ICAvLyBkYXRhIG5vdCBzaG93blxuICogICAgICAgICAgIH0sXG4gKiAgICAgICAgICAgJ2tDQkFkdkRhdGFUeFBvd2VyTGV2ZWwnOiAzMixcbiAqICAgICAgICAgICAna0NCQWR2RGF0YUlzQ29ubmVjdGFibGUnOiB0cnVlXG4gKiAgICAgICB9LFxuICogICAgICAgJ3Jzc2knOiAtNTNcbiAqICAgfVxuICogYGBgXG4gKlxuICogIyMgVHlwZWQgQXJyYXlzXG4gKlxuICogVGhpcyBwbHVnaW4gdXNlcyB0eXBlZCBBcnJheXMgb3IgQXJyYXlCdWZmZXJzIGZvciBzZW5kaW5nIGFuZCByZWNlaXZpbmcgZGF0YS5cbiAqXG4gKiBUaGlzIG1lYW5zIHRoYXQgeW91IG5lZWQgY29udmVydCB5b3VyIGRhdGEgdG8gQXJyYXlCdWZmZXJzIGJlZm9yZSBzZW5kaW5nIGFuZCBmcm9tIEFycmF5QnVmZmVycyB3aGVuIHJlY2VpdmluZy5cbiAqXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiAgIC8vIEFTQ0lJIG9ubHlcbiAqICAgZnVuY3Rpb24gc3RyaW5nVG9CeXRlcyhzdHJpbmcpIHtcbiAqICAgICAgdmFyIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoc3RyaW5nLmxlbmd0aCk7XG4gKiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gc3RyaW5nLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICogICAgICAgICAgYXJyYXlbaV0gPSBzdHJpbmcuY2hhckNvZGVBdChpKTtcbiAqICAgICAgIH1cbiAqICAgICAgIHJldHVybiBhcnJheS5idWZmZXI7XG4gKiAgIH1cbiAqXG4gKiAgIC8vIEFTQ0lJIG9ubHlcbiAqICAgZnVuY3Rpb24gYnl0ZXNUb1N0cmluZyhidWZmZXIpIHtcbiAqICAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIG5ldyBVaW50OEFycmF5KGJ1ZmZlcikpO1xuICogICB9XG4gKiBgYGBcbiAqIFlvdSBjYW4gcmVhZCBtb3JlIGFib3V0IHR5cGVkIGFycmF5cyBpbiB0aGVzZSBhcnRpY2xlcyBvbiBbTUROXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1R5cGVkX2FycmF5cykgYW5kIFtIVE1MNSBSb2Nrc10oaHR0cDovL3d3dy5odG1sNXJvY2tzLmNvbS9lbi90dXRvcmlhbHMvd2ViZ2wvdHlwZWRfYXJyYXlzLykuXG4gKlxuICogIyMgVVVJRHNcbiAqXG4gKiBVVUlEcyBhcmUgYWx3YXlzIHN0cmluZ3MgYW5kIG5vdCBudW1iZXJzLiBTb21lIDE2LWJpdCBVVUlEcywgc3VjaCBhcyAnMjIyMCcgbG9vayBsaWtlIGludGVnZXJzLCBidXQgdGhleSdyZSBub3QuIChUaGUgaW50ZWdlciAyMjIwIGlzIDB4OEFDIGluIGhleC4pIFRoaXMgaXNuJ3QgYSBwcm9ibGVtIHdpdGggMTI4IGJpdCBVVUlEcyBzaW5jZSB0aGV5IGxvb2sgbGlrZSBzdHJpbmdzIDgyYjllNmUxLTU5M2EtNDU2Zi1iZTliLTkyMTUxNjBlYmNhYy4gQWxsIDE2LWJpdCBVVUlEcyBzaG91bGQgYWxzbyBiZSBwYXNzZWQgdG8gbWV0aG9kcyBhcyBzdHJpbmdzLlxuICogQGludGVyZmFjZXNcbiAqIEJMRVNjYW5PcHRpb25zXG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnQkxFJyxcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tYmxlLWNlbnRyYWwnLFxuICBwbHVnaW5SZWY6ICdibGUnLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL2Rvbi9jb3Jkb3ZhLXBsdWdpbi1ibGUtY2VudHJhbCcsXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddLFxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBCTEUgZXh0ZW5kcyBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiB7XG4gIC8qKlxuICAgKiBTY2FuIGFuZCBkaXNjb3ZlciBCTEUgcGVyaXBoZXJhbHMgZm9yIHRoZSBzcGVjaWZpZWQgYW1vdW50IG9mIHRpbWUuXG4gICAqXG4gICAqIEB1c2FnZVxuICAgKiBgYGBcbiAgICogQkxFLnNjYW4oW10sIDUpLnN1YnNjcmliZShkZXZpY2UgPT4ge1xuICAgKiAgIGNvbnNvbGUubG9nKEpTT04uc3RyaW5naWZ5KGRldmljZSkpO1xuICAgKiB9KTtcbiAgICogYGBgXG4gICAqIEBwYXJhbSB7c3RyaW5nW119IHNlcnZpY2VzICBMaXN0IG9mIHNlcnZpY2UgVVVJRHMgdG8gZGlzY292ZXIsIG9yIGBbXWAgdG8gZmluZCBhbGwgZGV2aWNlc1xuICAgKiBAcGFyYW0ge251bWJlcn0gc2Vjb25kcyAgTnVtYmVyIG9mIHNlY29uZHMgdG8gcnVuIGRpc2NvdmVyeVxuICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZTxhbnk+fSBSZXR1cm5zIGFuIE9ic2VydmFibGUgdGhhdCBub3RpZmllcyBvZiBlYWNoIHBlcmlwaGVyYWwgdGhhdCBpcyBkaXNjb3ZlcmVkIGR1cmluZyB0aGUgc3BlY2lmaWVkIHRpbWUuXG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgb2JzZXJ2YWJsZTogdHJ1ZSxcbiAgfSlcbiAgc2NhbihzZXJ2aWNlczogc3RyaW5nW10sIHNlY29uZHM6IG51bWJlcik6IE9ic2VydmFibGU8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFNjYW4gYW5kIGRpc2NvdmVyIEJMRSBwZXJpcGhlcmFscyB1bnRpbCBgc3RvcFNjYW5gIGlzIGNhbGxlZC5cbiAgICpcbiAgICogQHVzYWdlXG4gICAqIGBgYFxuICAgKiBCTEUuc3RhcnRTY2FuKFtdKS5zdWJzY3JpYmUoZGV2aWNlID0+IHtcbiAgICogICBjb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeShkZXZpY2UpKTtcbiAgICogfSk7XG4gICAqXG4gICAqIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgKiAgIEJMRS5zdG9wU2NhbigpO1xuICAgKiB9LCA1MDAwKTtcbiAgICogYGBgXG4gICAqIEBwYXJhbSB7c3RyaW5nW119IHNlcnZpY2VzICBMaXN0IG9mIHNlcnZpY2UgVVVJRHMgdG8gZGlzY292ZXIsIG9yIGBbXWAgdG8gZmluZCBhbGwgZGV2aWNlc1xuICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZTxhbnk+fSBSZXR1cm5zIGFuIE9ic2VydmFibGUgdGhhdCBub3RpZmllcyBvZiBlYWNoIHBlcmlwaGVyYWwgZGlzY292ZXJlZC5cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBvYnNlcnZhYmxlOiB0cnVlLFxuICAgIGNsZWFyRnVuY3Rpb246ICdzdG9wU2NhbicsXG4gICAgY2xlYXJXaXRoQXJnczogZmFsc2UsXG4gIH0pXG4gIHN0YXJ0U2NhbihzZXJ2aWNlczogc3RyaW5nW10pOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTY2FucyBmb3IgQkxFIGRldmljZXMuIFRoaXMgZnVuY3Rpb24gb3BlcmF0ZXMgc2ltaWxhcmx5IHRvIHRoZSBgc3RhcnRTY2FuYCBmdW5jdGlvbiwgYnV0IGFsbG93cyB5b3UgdG8gc3BlY2lmeSBleHRyYSBvcHRpb25zIChsaWtlIGFsbG93aW5nIGR1cGxpY2F0ZSBkZXZpY2UgcmVwb3J0cykuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nW119IHNlcnZpY2VzICBMaXN0IG9mIHNlcnZpY2UgVVVJRHMgdG8gZGlzY292ZXIsIG9yIGBbXWAgdG8gZmluZCBhbGwgZGV2aWNlc1xuICAgKiBAcGFyYW0ge0JMRVNjYW5PcHRpb25zfSBvcHRpb25zIE9wdGlvbnNcbiAgICogQHJldHVybnMge09ic2VydmFibGU8YW55Pn0gUmV0dXJucyBhbiBPYnNlcnZhYmxlIHRoYXQgbm90aWZpZXMgb2YgZWFjaCBwZXJpcGhlcmFsIGRpc2NvdmVyZWQuXG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgb2JzZXJ2YWJsZTogdHJ1ZSxcbiAgICBjbGVhckZ1bmN0aW9uOiAnc3RvcFNjYW4nLFxuICAgIGNsZWFyV2l0aEFyZ3M6IGZhbHNlLFxuICB9KVxuICBzdGFydFNjYW5XaXRoT3B0aW9ucyhzZXJ2aWNlczogc3RyaW5nW10sIG9wdGlvbnM6IEJMRVNjYW5PcHRpb25zKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogU3RvcCBhIHNjYW4gc3RhcnRlZCBieSBgc3RhcnRTY2FuYC5cbiAgICpcbiAgICogQHVzYWdlXG4gICAqIGBgYFxuICAgKiBCTEUuc3RhcnRTY2FuKFtdKS5zdWJzY3JpYmUoZGV2aWNlID0+IHtcbiAgICogICBjb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeShkZXZpY2UpKTtcbiAgICogfSk7XG4gICAqIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgKiAgIEJMRS5zdG9wU2NhbigpLnRoZW4oKCkgPT4geyBjb25zb2xlLmxvZygnc2NhbiBzdG9wcGVkJyk7IH0pO1xuICAgKiB9LCA1MDAwKTtcbiAgICogYGBgXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHN0b3BTY2FuKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCBkZXZpY2UgcGluLlxuICAgKlxuICAgKiBAdXNhZ2VcbiAgICogYGBgXG4gICAqICAgQkxFLnNldFBpbihwaW4pLnN1YnNjcmliZShzdWNjZXNzID0+IHtcbiAgICogICAgIGNvbnNvbGUubG9nKHN1Y2Nlc3MpO1xuICAgKiAgIH0sXG4gICAqICAgZmFpbHVyZSA9PiB7XG4gICAqICAgICBjb25zb2xlLmxvZygnZmFpbHVyZScpO1xuICAgKiAgIH0pO1xuICAgKiBgYGBcbiAgICogQHBhcmFtIHtzdHJpbmd9IHBpbiBQaW4gb2YgdGhlIGRldmljZSBhcyBhIHN0cmluZ1xuICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZTxhbnk+fSBSZXR1cm5zIGFuIE9ic2VydmFibGUgdGhhdCBub3RpZmllcyBvZiBzdWNjZXNzL2ZhaWx1cmUuXG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgb2JzZXJ2YWJsZTogdHJ1ZSxcbiAgfSlcbiAgc2V0UGluKHBpbjogc3RyaW5nKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogQ29ubmVjdCB0byBhIHBlcmlwaGVyYWwuXG4gICAqXG4gICAqIEB1c2FnZVxuICAgKiBgYGBcbiAgICogICBCTEUuY29ubmVjdCgnMTI6MzQ6NTY6Nzg6OUE6QkMnKS5zdWJzY3JpYmUocGVyaXBoZXJhbERhdGEgPT4ge1xuICAgKiAgICAgY29uc29sZS5sb2cocGVyaXBoZXJhbERhdGEpO1xuICAgKiAgIH0sXG4gICAqICAgcGVyaXBoZXJhbERhdGEgPT4ge1xuICAgKiAgICAgY29uc29sZS5sb2coJ2Rpc2Nvbm5lY3RlZCcpO1xuICAgKiAgIH0pO1xuICAgKiBgYGBcbiAgICogQHBhcmFtIHtzdHJpbmd9IGRldmljZUlkIFVVSUQgb3IgTUFDIGFkZHJlc3Mgb2YgdGhlIHBlcmlwaGVyYWxcbiAgICogQHJldHVybnMge09ic2VydmFibGU8YW55Pn0gUmV0dXJucyBhbiBPYnNlcnZhYmxlIHRoYXQgbm90aWZpZXMgb2YgY29ubmVjdC9kaXNjb25uZWN0LlxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIG9ic2VydmFibGU6IHRydWUsXG4gICAgY2xlYXJGdW5jdGlvbjogJ2Rpc2Nvbm5lY3QnLFxuICAgIGNsZWFyV2l0aEFyZ3M6IHRydWUsXG4gIH0pXG4gIGNvbm5lY3QoZGV2aWNlSWQ6IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIEVzdGFibGlzaCBhbiBhdXRvbWF0aWMgY29ubmVjdGlvbiB0byBhIHBlcmlwaGVyYWwuIFRoZSBwaG9uZSB3aWxsIGF1dG9tYXRpY2FsbHkgY29ubmVjdCB0byB0aGUgQmx1ZXRvb3RoIHBlcmlwaGVyYWxcbiAgICogd2hlbmV2ZXIgaXQgaXMgaW4gcmFuZ2UuIFRoZSBhdXRvQ29ubmVjdCBmdW5jdGlvbiB1c2VzIGNhbGxiYWNrcyBpbnN0ZWFkIG9mIG9ic2VydmFibGVzIGJlY2F1c2UgY29ubmVjdCBhbmRcbiAgICogZGlzY29ubmVjdCBjYW4gZWFjaCBiZSBjYWxsZWQgbWFueSB0aW1lcyBhcyBhIGRldmljZXMgY29ubmVjdHMgYW5kIGRpc2Nvbm5lY3RzLlxuICAgKlxuICAgKiBPbiBBbmRyb2lkIHlvdSBjYW4gcGFzcyBhIE1BQyBhZGRyZXNzIGRpcmVjdGx5IHRvIGF1dG9Db25uZWN0LiBXaXRoIGlPUywgeW91IG5lZWQgdG8gZ2V0IGEgZGV2aWNlIGlkIGJ5IHNjYW5uaW5nLFxuICAgKiBjYWxsaW5nIGJsZS5wZXJpcGhlcmFsc1dpdGhJZGVudGlmaWVycywgb3IgY2FsbGluZyBibGUuY29ubmVjdGVkUGVyaXBoZXJhbHNXaXRoU2VydmljZXMuXG4gICAqXG4gICAqIEB1c2FnZVxuICAgKiBgYGBcbiAgICogIHNvbWVGdW5jdGlvbigpIHtcbiAgICogICAgdGhpcy5ibGUuYXV0b0Nvbm5lY3QoZGV2aWNlSWQsIG9uQ29ubmVjdGVkLmJpbmQodGhpcyksIG9uRGlzY29ubmVjdGVkLmJpbmQodGhpcykpO1xuICAgKiAgfVxuICAgKlxuICAgKiAgb25Db25uZWN0ZWQocGVyaXBoZXJhbCkge1xuICAgKiAgICBjb25zb2xlLmxvZyhgQ29ubmVjdGVkIHRvICR7cGVyaXBoZXJhbC5pZH1gKWxcbiAgICogIH1cbiAgICpcbiAgICogIG9uRGlzY29ubmVjdGVkKHBlcmlwaGVyYWwpIHtcbiAgICogICAgY29uc29sZS5sb2coYERpc2Nvbm5lY3RlZCBmcm9tICR7cGVyaXBoZXJhbC5pZH1gKWxcbiAgICogIH1cbiAgICpcbiAgICogYGBgXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBkZXZpY2VJZCBVVUlEIG9yIE1BQyBhZGRyZXNzIG9mIHRoZSBwZXJpcGhlcmFsXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbm5lY3RDYWxsYmFjayBmdW5jdGlvbiB0aGF0IGlzIGNhbGxlZCB3aXRoIHBlcmlwaGVyYWwgZGF0YSB3aGVuIHRoZSBkZXZpY2VzIGNvbm5lY3RzXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGRpc2Nvbm5lY3RDYWxsYmFjayAgZnVuY3Rpb24gdGhhdCBpcyBjYWxsZWQgd2l0aCBwZXJpcGhlcmFsIGRhdGEgd2hlbiB0aGUgZGV2aWNlcyBkaXNjb25uZWN0c1xuICAgKi9cbiAgQENvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXG4gIGF1dG9Db25uZWN0KGRldmljZUlkOiBzdHJpbmcsIGNvbm5lY3RDYWxsYmFjazogYW55LCBkaXNjb25uZWN0Q2FsbGJhY2s6IGFueSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXF1ZXN0IE1UVSBzaXplLlxuICAgKiBNYXkgYmUgdXNlZCB0byBmaXggdGhlIEVycm9yIDE0IFwiVW5saWtlbHlcIiBvbiB3cml0ZSByZXF1ZXN0cyB3aXRoIG1vcmUgdGhhbiAyMCBieXRlcy5cbiAgICpcbiAgICogQHVzYWdlXG4gICAqIGBgYFxuICAgKiAgIEJMRS5yZXF1ZXN0TXR1KCcxMjozNDo1Njo3ODo5QTpCQycsIDUxMikudGhlbigoKSA9PiB7XG4gICAqICAgICBjb25zb2xlLmxvZygnTVRVIFNpemUgQWNjZXB0ZWQnKTtcbiAgICogICB9LCBlcnJvciA9PiB7XG4gICAqICAgICBjb25zb2xlLmxvZygnTVRVIFNpemUgRmFpbGVkJyk7XG4gICAqICAgfSk7XG4gICAqIGBgYFxuICAgKiBAcGFyYW0ge3N0cmluZ30gZGV2aWNlSWQgVVVJRCBvciBNQUMgYWRkcmVzcyBvZiB0aGUgcGVyaXBoZXJhbFxuICAgKiBAcGFyYW0ge251bWJlcn0gbXR1U2l6ZSBUaGUgbmV3IE1UVSBzaXplLiAoMjMgLSA1MTcsIGRlZmF1bHQgaXMgdXN1YWxseSAyMy4gTWF4IHJlY29tbWVuZGVkOiA1MTIpXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBQcm9taXNlLlxuICAgKi9cbiAgQENvcmRvdmEoKVxuICByZXF1ZXN0TXR1KGRldmljZUlkOiBzdHJpbmcsIG10dVNpemU6IG51bWJlcik6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlZnJlc2ggRGV2aWNlIENhY2hlXG4gICAqIFRoaXMgbWV0aG9kIG1heSBmaXggYSBpc3N1ZSBvZiBvbGQgY2FjaGVkIHNlcnZpY2VzIGFuZCBjaGFyYWN0ZXJpc3RpY3MuXG4gICAqIE5PVEUgU2luY2UgdGhpcyB1c2VzIGFuIHVuZG9jdW1lbnRlZCBBUEkgaXQncyBub3QgZ3VhcmFudGVlZCB0byB3b3JrLlxuICAgKiBJZiB5b3UgY2hvb3NlIGEgdG9vIGxvdyBkZWxheSB0aW1lICh0aW1lb3V0TWlsbGlzKSB0aGUgbWV0aG9kIGNvdWxkIGZhaWwuXG4gICAqXG4gICAqIEB1c2FnZVxuICAgKiBgYGBcbiAgICogICBCTEUucmVmcmVzaERldmljZUNhY2hlKCcxMjozNDo1Njo3ODo5QTpCQycsIDEwMDAwKS50aGVuKGRpc2NvdmVyZWRTZXJ2aWNlcyA9PiB7XG4gICAqICAgICBjb25zb2xlLmxvZygnVGhlIG5ldyBkaXNjb3ZlcmVkIHNlcnZpY2VzIGFmdGVyIHRoZSBjbGVhbjogJywgZGlzY292ZXJlZFNlcnZpY2VzKTtcbiAgICogICB9LCBlcnJvciA9PiB7XG4gICAqICAgICBjb25zb2xlLmxvZygnUmVmcmVzaCBkZXZpY2UgY2FjaGUgZmFpbGVkLicpO1xuICAgKiAgIH0pO1xuICAgKiBgYGBcbiAgICogQHBhcmFtIHtzdHJpbmd9IGRldmljZUlkIFVVSUQgb3IgTUFDIGFkZHJlc3Mgb2YgdGhlIHBlcmlwaGVyYWxcbiAgICogQHBhcmFtIHtudW1iZXJ9IHRpbWVvdXRNaWxsaXMgRGVsYXkgaW4gbWlsbGlzZWNvbmRzIGFmdGVyIHJlZnJlc2ggYmVmb3JlIGRpc2NvdmVyaW5nIHNlcnZpY2VzLlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgUHJvbWlzZS5cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgcmVmcmVzaERldmljZUNhY2hlKGRldmljZUlkOiBzdHJpbmcsIHRpbWVvdXRNaWxsaXM6IG51bWJlcik6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIERpc2Nvbm5lY3QgZnJvbSBhIHBlcmlwaGVyYWwuXG4gICAqXG4gICAqIEB1c2FnZVxuICAgKiBgYGBcbiAgICogICBCTEUuZGlzY29ubmVjdCgnMTI6MzQ6NTY6Nzg6OUE6QkMnKS50aGVuKCgpID0+IHtcbiAgICogICAgIGNvbnNvbGUubG9nKCdEaXNjb25uZWN0ZWQnKTtcbiAgICogICB9KTtcbiAgICogYGBgXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBkZXZpY2VJZCAgVVVJRCBvciBNQUMgYWRkcmVzcyBvZiB0aGUgcGVyaXBoZXJhbFxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgUHJvbWlzZVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBkaXNjb25uZWN0KGRldmljZUlkOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWFkIHRoZSB2YWx1ZSBvZiBhIGNoYXJhY3RlcmlzdGljLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZGV2aWNlSWQgIFVVSUQgb3IgTUFDIGFkZHJlc3Mgb2YgdGhlIHBlcmlwaGVyYWxcbiAgICogQHBhcmFtIHtzdHJpbmd9IHNlcnZpY2VVVUlEICBVVUlEIG9mIHRoZSBCTEUgc2VydmljZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2hhcmFjdGVyaXN0aWNVVUlEICBVVUlEIG9mIHRoZSBCTEUgY2hhcmFjdGVyaXN0aWNcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIFByb21pc2VcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgcmVhZChkZXZpY2VJZDogc3RyaW5nLCBzZXJ2aWNlVVVJRDogc3RyaW5nLCBjaGFyYWN0ZXJpc3RpY1VVSUQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFdyaXRlIHRoZSB2YWx1ZSBvZiBhIGNoYXJhY3RlcmlzdGljLlxuICAgKlxuICAgKiBAdXNhZ2VcbiAgICogYGBgXG4gICAqIC8vIHNlbmQgMSBieXRlIHRvIHN3aXRjaCBhIGxpZ2h0IG9uXG4gICAqIHZhciBkYXRhID0gbmV3IFVpbnQ4QXJyYXkoMSk7XG4gICAqIGRhdGFbMF0gPSAxO1xuICAgKiBCTEUud3JpdGUoZGV2aWNlX2lkLCAnRkYxMCcsICdGRjExJywgZGF0YS5idWZmZXIpO1xuICAgKlxuICAgKiAvLyBzZW5kIGEgMyBieXRlIHZhbHVlIHdpdGggUkdCIGNvbG9yXG4gICAqIHZhciBkYXRhID0gbmV3IFVpbnQ4QXJyYXkoMyk7XG4gICAqIGRhdGFbMF0gPSAweEZGOyAgLy8gcmVkXG4gICAqIGRhdGFbMF0gPSAweDAwOyAvLyBncmVlblxuICAgKiBkYXRhWzBdID0gMHhGRjsgLy8gYmx1ZVxuICAgKiBCTEUud3JpdGUoZGV2aWNlX2lkLCAnY2NjMCcsICdjY2MxJywgZGF0YS5idWZmZXIpO1xuICAgKlxuICAgKiAvLyBzZW5kIGEgMzIgYml0IGludGVnZXJcbiAgICogdmFyIGRhdGEgPSBuZXcgVWludDMyQXJyYXkoMSk7XG4gICAqIGRhdGFbMF0gPSBjb3VudGVySW5wdXQudmFsdWU7XG4gICAqIEJMRS53cml0ZShkZXZpY2VfaWQsIFNFUlZJQ0UsIENIQVJBQ1RFUklTVElDLCBkYXRhLmJ1ZmZlcik7XG4gICAqXG4gICAqIGBgYFxuICAgKiBAcGFyYW0ge3N0cmluZ30gZGV2aWNlSWQgIFVVSUQgb3IgTUFDIGFkZHJlc3Mgb2YgdGhlIHBlcmlwaGVyYWxcbiAgICogQHBhcmFtIHtzdHJpbmd9IHNlcnZpY2VVVUlEICBVVUlEIG9mIHRoZSBCTEUgc2VydmljZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2hhcmFjdGVyaXN0aWNVVUlEICBVVUlEIG9mIHRoZSBCTEUgY2hhcmFjdGVyaXN0aWNcbiAgICogQHBhcmFtIHtBcnJheUJ1ZmZlcn0gdmFsdWUgIERhdGEgdG8gd3JpdGUgdG8gdGhlIGNoYXJhY3RlcmlzdGljLCBhcyBhbiBBcnJheUJ1ZmZlci5cbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIFByb21pc2VcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgd3JpdGUoZGV2aWNlSWQ6IHN0cmluZywgc2VydmljZVVVSUQ6IHN0cmluZywgY2hhcmFjdGVyaXN0aWNVVUlEOiBzdHJpbmcsIHZhbHVlOiBBcnJheUJ1ZmZlcik6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFdyaXRlIHRoZSB2YWx1ZSBvZiBhIGNoYXJhY3RlcmlzdGljIHdpdGhvdXQgd2FpdGluZyBmb3IgY29uZmlybWF0aW9uIGZyb20gdGhlIHBlcmlwaGVyYWwuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBkZXZpY2VJZCAgVVVJRCBvciBNQUMgYWRkcmVzcyBvZiB0aGUgcGVyaXBoZXJhbFxuICAgKiBAcGFyYW0ge3N0cmluZ30gc2VydmljZVVVSUQgIFVVSUQgb2YgdGhlIEJMRSBzZXJ2aWNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjaGFyYWN0ZXJpc3RpY1VVSUQgIFVVSUQgb2YgdGhlIEJMRSBjaGFyYWN0ZXJpc3RpY1xuICAgKiBAcGFyYW0ge0FycmF5QnVmZmVyfSB2YWx1ZSAgRGF0YSB0byB3cml0ZSB0byB0aGUgY2hhcmFjdGVyaXN0aWMsIGFzIGFuIEFycmF5QnVmZmVyLlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgUHJvbWlzZVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICB3cml0ZVdpdGhvdXRSZXNwb25zZShcbiAgICBkZXZpY2VJZDogc3RyaW5nLFxuICAgIHNlcnZpY2VVVUlEOiBzdHJpbmcsXG4gICAgY2hhcmFjdGVyaXN0aWNVVUlEOiBzdHJpbmcsXG4gICAgdmFsdWU6IEFycmF5QnVmZmVyXG4gICk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVyIHRvIGJlIG5vdGlmaWVkIHdoZW4gdGhlIHZhbHVlIG9mIGEgY2hhcmFjdGVyaXN0aWMgY2hhbmdlcy5cbiAgICpcbiAgICogQHVzYWdlXG4gICAqIGBgYFxuICAgKiBCTEUuc3RhcnROb3RpZmljYXRpb24oZGV2aWNlX2lkLCAnRkYxMCcsICdGRjExJykuc3Vic2NyaWJlKGJ1ZmZlciA9PiB7XG4gICAqICAgY29uc29sZS5sb2coU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBuZXcgVWludDhBcnJheShidWZmZXIpKTtcbiAgICogfSk7XG4gICAqIGBgYFxuICAgKiBAcGFyYW0ge3N0cmluZ30gZGV2aWNlSWQgIFVVSUQgb3IgTUFDIGFkZHJlc3Mgb2YgdGhlIHBlcmlwaGVyYWxcbiAgICogQHBhcmFtIHtzdHJpbmd9IHNlcnZpY2VVVUlEICBVVUlEIG9mIHRoZSBCTEUgc2VydmljZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2hhcmFjdGVyaXN0aWNVVUlEICBVVUlEIG9mIHRoZSBCTEUgY2hhcmFjdGVyaXN0aWNcbiAgICogQHJldHVybnMge09ic2VydmFibGU8YW55Pn0gUmV0dXJucyBhbiBPYnNlcnZhYmxlIHRoYXQgbm90aWZpZXMgb2YgY2hhcmFjdGVyaXN0aWMgY2hhbmdlcy5cbiAgICogVGhlIG9ic2VydmVyIGVtaXQgYW4gYXJyYXkgd2l0aCBkYXRhIGF0IGluZGV4IDAgYW5kIHNlcXVlbmNlIG9yZGVyIGF0IGluZGV4IDEuXG4gICAqIFRoZSBzZXF1ZW5jZSBvcmRlciBpcyBhbHdheXMgdW5kZWZpbmVkIG9uIGlPUy4gT24gYW5kcm9pZCBpdCBsZWF2ZSB0aGUgY2xpZW50IHRvIGNoZWNrIHRoZSBzZXF1ZW5jZSBvcmRlciBhbmQgcmVvcmRlciBpZiBuZWVkZWRcbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBvYnNlcnZhYmxlOiB0cnVlLFxuICAgIGRlc3RydWN0OiB0cnVlLFxuICAgIGNsZWFyRnVuY3Rpb246ICdzdG9wTm90aWZpY2F0aW9uJyxcbiAgICBjbGVhcldpdGhBcmdzOiB0cnVlLFxuICB9KVxuICBzdGFydE5vdGlmaWNhdGlvbihkZXZpY2VJZDogc3RyaW5nLCBzZXJ2aWNlVVVJRDogc3RyaW5nLCBjaGFyYWN0ZXJpc3RpY1VVSUQ6IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0b3AgYmVpbmcgbm90aWZpZWQgd2hlbiB0aGUgdmFsdWUgb2YgYSBjaGFyYWN0ZXJpc3RpYyBjaGFuZ2VzLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZGV2aWNlSWQgIFVVSUQgb3IgTUFDIGFkZHJlc3Mgb2YgdGhlIHBlcmlwaGVyYWxcbiAgICogQHBhcmFtIHtzdHJpbmd9IHNlcnZpY2VVVUlEICBVVUlEIG9mIHRoZSBCTEUgc2VydmljZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2hhcmFjdGVyaXN0aWNVVUlEICBVVUlEIG9mIHRoZSBCTEUgY2hhcmFjdGVyaXN0aWNcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgc3RvcE5vdGlmaWNhdGlvbihkZXZpY2VJZDogc3RyaW5nLCBzZXJ2aWNlVVVJRDogc3RyaW5nLCBjaGFyYWN0ZXJpc3RpY1VVSUQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlcG9ydCB0aGUgY29ubmVjdGlvbiBzdGF0dXMuXG4gICAqXG4gICAqIEB1c2FnZVxuICAgKiBgYGBcbiAgICogQkxFLmlzQ29ubmVjdGVkKCdGRkNBMEIwOS1DQjFELTREQzAtQTFFRi0zMUFGRDNFREZCNTMnKS50aGVuKFxuICAgKiAgICgpID0+IHsgY29uc29sZS5sb2coJ2Nvbm5lY3RlZCcpOyB9LFxuICAgKiAgICgpID0+IHsgY29uc29sZS5sb2coJ25vdCBjb25uZWN0ZWQnKTsgfVxuICAgKiApO1xuICAgKiBgYGBcbiAgICogQHBhcmFtIHtzdHJpbmd9IGRldmljZUlkICBVVUlEIG9yIE1BQyBhZGRyZXNzIG9mIHRoZSBwZXJpcGhlcmFsXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGlzQ29ubmVjdGVkKGRldmljZUlkOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXBvcnQgaWYgYmx1ZXRvb3RoIGlzIGVuYWJsZWQuXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fSBSZXR1cm5zIGEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIGlmIEJsdWV0b290aCBpcyBlbmFibGVkLCBhbmQgcmVqZWN0cyBpZiBkaXNhYmxlZC5cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgaXNFbmFibGVkKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWdpc3RlciB0byBiZSBub3RpZmllZCB3aGVuIEJsdWV0b290aCBzdGF0ZSBjaGFuZ2VzIG9uIHRoZSBkZXZpY2UuXG4gICAqXG4gICAqIEB1c2FnZVxuICAgKiBgYGBcbiAgICogQkxFLnN0YXJ0U3RhdGVOb3RpZmljYXRpb25zKCkuc3Vic2NyaWJlKHN0YXRlID0+IHtcbiAgICogICBjb25zb2xlLmxvZyhcIkJsdWV0b290aCBpcyBcIiArIHN0YXRlKTtcbiAgICogfSk7XG4gICAqIGBgYFxuICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZTxhbnk+fSBSZXR1cm5zIGFuIE9ic2VydmFibGUgdGhhdCBub3RpZmllcyB3aGVuIHRoZSBCbHVldG9vdGggaXMgZW5hYmxlZCBvciBkaXNhYmxlZCBvbiB0aGUgZGV2aWNlLlxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIG9ic2VydmFibGU6IHRydWUsXG4gICAgY2xlYXJGdW5jdGlvbjogJ3N0b3BTdGF0ZU5vdGlmaWNhdGlvbnMnLFxuICAgIGNsZWFyV2l0aEFyZ3M6IGZhbHNlLFxuICB9KVxuICBzdGFydFN0YXRlTm90aWZpY2F0aW9ucygpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdG9wIHN0YXRlIG5vdGlmaWNhdGlvbnMuXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHN0b3BTdGF0ZU5vdGlmaWNhdGlvbnMoKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogT3BlbiBTeXN0ZW0gQmx1ZXRvb3RoIHNldHRpbmdzIChBbmRyb2lkIG9ubHkpLlxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBzaG93Qmx1ZXRvb3RoU2V0dGluZ3MoKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogRW5hYmxlIEJsdWV0b290aCBvbiB0aGUgZGV2aWNlIChBbmRyb2lkIG9ubHkpLlxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBlbmFibGUoKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogUmVhZCB0aGUgUlNTSSB2YWx1ZSBvbiB0aGUgZGV2aWNlIGNvbm5lY3Rpb24uXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBkZXZpY2VJZCAgVVVJRCBvciBNQUMgYWRkcmVzcyBvZiB0aGUgcGVyaXBoZXJhbFxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICByZWFkUlNTSShkZXZpY2VJZDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogUmV0cmlldmVzIGEgbGlzdCBvZiB0aGUgcGVyaXBoZXJhbHMgKGNvbnRhaW5pbmcgYW55IG9mIHRoZSBzcGVjaWZpZWQgc2VydmljZXMpXG4gICAqIGN1cnJlbnRseSBjb25uZWN0ZWQgdG8gdGhlIHN5c3RlbS4gVGhlIHBlcmlwaGVyYWwgbGlzdCBpcyBzZW50IHRvIHRoZSBzdWNjZXNzIGNhbGxiYWNrLlxuICAgKiBpT1Mgb25seVxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBzZXJ2aWNlcyBMaXN0IG9mIHNlcnZpY2VzIHRvIGRpc2NvdmVyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlIHdpdGggYSBsaXN0IG9mIHBlcmlwaGVyYWwgb2JqZWN0c1xuICAgKi9cbiAgQENvcmRvdmEoKVxuICBjb25uZWN0ZWRQZXJpcGhlcmFsc1dpdGhTZXJ2aWNlcyhzZXJ2aWNlczogc3RyaW5nW10pOiBQcm9taXNlPGFueVtdPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpbmQgdGhlIGNvbm5lY3RlZCBwZXJpcGhlcmFscyBvZmZlcmluZyB0aGUgbGlzdGVkIHNlcnZpY2UgVVVJRHMuXG4gICAqIGlPUyBvbmx5XG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nW119IHV1aWRzIExpc3Qgb2YgcGVyaXBoZXJhbCBVVUlEc1xuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZSB3aXRoIGEgbGlzdCBvZiBwZXJpcGhlcmFsIG9iamVjdHNcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgcGVyaXBoZXJhbHNXaXRoSWRlbnRpZmllcnModXVpZHM6IHN0cmluZ1tdKTogUHJvbWlzZTxhbnlbXT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaW5kIHRoZSBib25kZWQgZGV2aWNlc1xuICAgKiBBbmRyb2lkIG9ubHlcbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2Ugd2l0aCBhIGxpc3Qgb2YgcGVyaXBoZXJhbCBvYmplY3RzXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGJvbmRlZERldmljZXMoKTogUHJvbWlzZTxhbnlbXT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXBvcnRzIGlmIGxvY2F0aW9uIHNlcnZpY2VzIGFyZSBlbmFibGVkLlxuICAgKiBBbmRyb2lkIG9ubHlcbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2U8dm9pZD59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGlzTG9jYXRpb25FbmFibGVkKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybjtcbiAgfVxufVxuIl19