import { __extends } from "tslib";
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import { Injectable } from '@angular/core';
var DocumentViewer = /** @class */ (function (_super) {
    __extends(DocumentViewer, _super);
    function DocumentViewer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DocumentViewer.prototype.getSupportInfo = function () { return cordova(this, "getSupportInfo", {}, arguments); };
    DocumentViewer.prototype.canViewDocument = function (url, contentType, options, onPossible, onMissingApp, onImpossible, onError) { return cordova(this, "canViewDocument", { "sync": true }, arguments); };
    DocumentViewer.prototype.viewDocument = function (url, contentType, options, onShow, onClose, onMissingApp, onError) { return cordova(this, "viewDocument", { "sync": true }, arguments); };
    DocumentViewer.pluginName = "Document Viewer";
    DocumentViewer.plugin = "cordova-plugin-document-viewer";
    DocumentViewer.pluginRef = "SitewaertsDocumentViewer";
    DocumentViewer.repo = "https://github.com/sitewaerts/cordova-plugin-document-viewer";
    DocumentViewer.platforms = ["Android", "iOS", "Windows"];
    DocumentViewer.decorators = [
        { type: Injectable }
    ];
    return DocumentViewer;
}(AwesomeCordovaNativePlugin));
export { DocumentViewer };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvZG9jdW1lbnQtdmlld2VyL25neC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyx1Q0FBK0MsTUFBTSwrQkFBK0IsQ0FBQztBQUM1RixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOztJQTREUCxrQ0FBMEI7Ozs7SUFPNUQsdUNBQWM7SUFnQmQsd0NBQWUsYUFDYixHQUFXLEVBQ1gsV0FBbUIsRUFDbkIsT0FBOEIsRUFDOUIsVUFBcUIsRUFDckIsWUFBdUIsRUFDdkIsWUFBdUIsRUFDdkIsT0FBa0I7SUFlcEIscUNBQVksYUFDVixHQUFXLEVBQ1gsV0FBbUIsRUFDbkIsT0FBOEIsRUFDOUIsTUFBaUIsRUFDakIsT0FBa0IsRUFDbEIsWUFBdUIsRUFDdkIsT0FBa0I7Ozs7Ozs7Z0JBckRyQixVQUFVOzt5QkE1RFg7RUE2RG9DLDBCQUEwQjtTQUFqRCxjQUFjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29yZG92YSwgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bhd2Vzb21lLWNvcmRvdmEtcGx1Z2lucy9jb3JlJztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuZXhwb3J0IGludGVyZmFjZSBEb2N1bWVudFZpZXdlck9wdGlvbnMge1xuICB0aXRsZT86IHN0cmluZztcbiAgZG9jdW1lbnRWaWV3Pzoge1xuICAgIGNsb3NlTGFiZWw6IHN0cmluZztcbiAgfTtcbiAgbmF2aWdhdGlvblZpZXc/OiB7XG4gICAgY2xvc2VMYWJlbDogc3RyaW5nO1xuICB9O1xuICBlbWFpbD86IHtcbiAgICBlbmFibGVkOiBib29sZWFuO1xuICB9O1xuICBwcmludD86IHtcbiAgICBlbmFibGVkOiBib29sZWFuO1xuICB9O1xuICBvcGVuV2l0aD86IHtcbiAgICBlbmFibGVkOiBib29sZWFuO1xuICB9O1xuICBib29rbWFya3M/OiB7XG4gICAgZW5hYmxlZDogYm9vbGVhbjtcbiAgfTtcbiAgc2VhcmNoPzoge1xuICAgIGVuYWJsZWQ6IGJvb2xlYW47XG4gIH07XG4gIGF1dG9DbG9zZT86IHtcbiAgICBvblBhdXNlOiBib29sZWFuO1xuICB9O1xufVxuXG4vKipcbiAqIEBuYW1lIERvY3VtZW50IFZpZXdlclxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGlzIHBsdWdpbiBvZmZlcnMgYSBzbGltIEFQSSB0byB2aWV3IFBERiBmaWxlcyB3aGljaCBhcmUgZWl0aGVyIHN0b3JlZCBpbiB0aGUgYXBwcyBhc3NldHMgZm9sZGVyICgvd3d3LyopIG9yIGluIGFueSBvdGhlciBmaWxlIHN5c3RlbSBkaXJlY3RvcnkgYXZhaWxhYmxlIHZpYSB0aGUgY29yZG92YSBmaWxlIHBsdWdpbi5cbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgRG9jdW1lbnRWaWV3ZXIgfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvZG9jdW1lbnQtdmlld2VyL25neCc7XG4gKlxuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgZG9jdW1lbnQ6IERvY3VtZW50Vmlld2VyKSB7IH1cbiAqXG4gKiAuLi5cbiAqIGNvbnN0IG9wdGlvbnM6IERvY3VtZW50Vmlld2VyT3B0aW9ucyA9IHtcbiAqICAgdGl0bGU6ICdNeSBQREYnXG4gKiB9XG4gKlxuICogdGhpcy5kb2N1bWVudC52aWV3RG9jdW1lbnQoJ2Fzc2V0cy9teUZpbGUucGRmJywgJ2FwcGxpY2F0aW9uL3BkZicsIG9wdGlvbnMpXG4gKlxuICogYGBgXG4gKiBAaW50ZXJmYWNlc1xuICogRG9jdW1lbnRWaWV3ZXJPcHRpb25zXG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnRG9jdW1lbnQgVmlld2VyJyxcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tZG9jdW1lbnQtdmlld2VyJyxcbiAgcGx1Z2luUmVmOiAnU2l0ZXdhZXJ0c0RvY3VtZW50Vmlld2VyJyxcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9zaXRld2FlcnRzL2NvcmRvdmEtcGx1Z2luLWRvY3VtZW50LXZpZXdlcicsXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUycsICdXaW5kb3dzJ10sXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIERvY3VtZW50Vmlld2VyIGV4dGVuZHMgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4ge1xuICAvKipcbiAgICogRGlzcGxheXMgdGhlIGVtYWlsIGNvbXBvc2VyIHByZS1maWxsZWQgd2l0aCBkYXRhLlxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSBSZXNvbHZlcyBwcm9taXNlIHdoZW4gdGhlIEVtYWlsQ29tcG9zZXIgaGFzIGJlZW4gb3BlbmVkXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGdldFN1cHBvcnRJbmZvKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIHRoZSBkb2N1bWVudCBjYW4gYmUgc2hvd25cbiAgICpcbiAgICogQHBhcmFtIHVybCB7c3RyaW5nfSBVcmwgdG8gdGhlIGZpbGVcbiAgICogQHBhcmFtIGNvbnRlbnRUeXBlIHtzdHJpbmd9IENvbnRlbnQgdHlwZSBvZiB0aGUgZmlsZVxuICAgKiBAcGFyYW0gb3B0aW9ucyB7RG9jdW1lbnRWaWV3ZXJPcHRpb25zfSBvcHRpb25zXG4gICAqIEBwYXJhbSBbb25Qb3NzaWJsZV0ge0Z1bmN0aW9ufVxuICAgKiBAcGFyYW0gW29uTWlzc2luZ0FwcF0ge0Z1bmN0aW9ufVxuICAgKiBAcGFyYW0gW29uSW1wb3NzaWJsZV0ge0Z1bmN0aW9ufVxuICAgKiBAcGFyYW0gW29uRXJyb3JdIHtGdW5jdGlvbn1cbiAgICovXG4gIEBDb3Jkb3ZhKHsgc3luYzogdHJ1ZSB9KVxuICBjYW5WaWV3RG9jdW1lbnQoXG4gICAgdXJsOiBzdHJpbmcsXG4gICAgY29udGVudFR5cGU6IHN0cmluZyxcbiAgICBvcHRpb25zOiBEb2N1bWVudFZpZXdlck9wdGlvbnMsXG4gICAgb25Qb3NzaWJsZT86IEZ1bmN0aW9uLFxuICAgIG9uTWlzc2luZ0FwcD86IEZ1bmN0aW9uLFxuICAgIG9uSW1wb3NzaWJsZT86IEZ1bmN0aW9uLFxuICAgIG9uRXJyb3I/OiBGdW5jdGlvblxuICApOiB2b2lkIHt9XG5cbiAgLyoqXG4gICAqIE9wZW5zIHRoZSBmaWxlXG4gICAqXG4gICAqIEBwYXJhbSB1cmwge3N0cmluZ30gVXJsIHRvIHRoZSBmaWxlXG4gICAqIEBwYXJhbSBjb250ZW50VHlwZSB7c3RyaW5nfSBDb250ZW50IHR5cGUgb2YgdGhlIGZpbGVcbiAgICogQHBhcmFtIG9wdGlvbnMge0RvY3VtZW50Vmlld2VyT3B0aW9uc30gb3B0aW9uc1xuICAgKiBAcGFyYW0gW29uU2hvd10ge0Z1bmN0aW9ufVxuICAgKiBAcGFyYW0gW29uQ2xvc2VdIHtGdW5jdGlvbn1cbiAgICogQHBhcmFtIFtvbk1pc3NpbmdBcHBdIHtGdW5jdGlvbn1cbiAgICogQHBhcmFtIFtvbkVycm9yXSB7RnVuY3Rpb259XG4gICAqL1xuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcbiAgdmlld0RvY3VtZW50KFxuICAgIHVybDogc3RyaW5nLFxuICAgIGNvbnRlbnRUeXBlOiBzdHJpbmcsXG4gICAgb3B0aW9uczogRG9jdW1lbnRWaWV3ZXJPcHRpb25zLFxuICAgIG9uU2hvdz86IEZ1bmN0aW9uLFxuICAgIG9uQ2xvc2U/OiBGdW5jdGlvbixcbiAgICBvbk1pc3NpbmdBcHA/OiBGdW5jdGlvbixcbiAgICBvbkVycm9yPzogRnVuY3Rpb25cbiAgKTogdm9pZCB7fVxufVxuIl19