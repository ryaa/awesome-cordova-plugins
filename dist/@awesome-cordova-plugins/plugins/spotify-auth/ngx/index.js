import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var SpotifyAuth = /** @class */ (function (_super) {
    __extends(SpotifyAuth, _super);
    function SpotifyAuth() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SpotifyAuth.prototype.authorize = function (cfg) { return cordova(this, "authorize", { "sync": false }, arguments); };
    SpotifyAuth.prototype.forget = function () { return cordova(this, "forget", { "sync": true }, arguments); };
    SpotifyAuth.pluginName = "SpotifyAuth";
    SpotifyAuth.plugin = "cordova-spotify-oauth";
    SpotifyAuth.pluginRef = "cordova.plugins.spotifyAuth";
    SpotifyAuth.repo = "https://github.com/Festify/cordova-spotify-oauth";
    SpotifyAuth.install = "ionic cordova plugin add cordova-spotify-oauth --variable LOCAL_STORAGE_KEY=\"SpotifyOAuthData\"";
    SpotifyAuth.installVariables = ["LOCAL_STORAGE_KEY"];
    SpotifyAuth.platforms = ["Android", "iOS"];
    SpotifyAuth.decorators = [
        { type: Injectable }
    ];
    return SpotifyAuth;
}(AwesomeCordovaNativePlugin));
export { SpotifyAuth };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvc3BvdGlmeS1hdXRoL25neC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLHVDQUErQyxNQUFNLCtCQUErQixDQUFDOztJQWlHM0QsK0JBQTBCOzs7O0lBdUJ6RCwrQkFBUyxhQUFDLEdBQVc7SUFlckIsNEJBQU07Ozs7Ozs7OztnQkF2Q1AsVUFBVTs7c0JBakdYO0VBa0dpQywwQkFBMEI7U0FBOUMsV0FBVyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFBsdWdpbiwgQ29yZG92YSwgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4gfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvY29yZSc7XG5cbi8qKlxuICogT0F1dGggY29uZmlndXJhdGlvbiBkYXRhLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIENvbmZpZyB7XG4gIC8qKiBUaGUgY2xpZW50IElEIGFzIHBlciB0aGUgU3BvdGlmeSBkZXYgY29uc29sZS4gKi9cbiAgY2xpZW50SWQ6IHN0cmluZztcblxuICAvKiogVGhlIHJlZGlyZWN0IFVSSSBhcyBlbnRlcmVkIGluIHRoZSBTcG90aWZ5IGRldiBjb25zb2xlLiAqL1xuICByZWRpcmVjdFVybDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBTYWZldHkgbWFyZ2luIHRpbWUgKGluIG1pbGxpc2Vjb25kcykgZm9yIHRoZSB0b2tlbiByZWZyZXNoLlxuICAgKlxuICAgKiBUaGUgcGx1Z2luIGFwcGxpZXMgYSBzYWZldHkgbWFyZ2luIHRvIHRoZSB0b2tlbiBsaWZldGltZSBpbiBvcmRlclxuICAgKiB0byBnaXZlIHRoZSB0b2tlbiB1c2VyIGVub3VnaCB0aW1lIHRvIHBlcmZvcm0gYWxsIG9wZXJhdGlvbnMgbmVlZGVkLlxuICAgKlxuICAgKiBPdGhlcndpc2UgdGhlIHBsdWdpbiBtaWdodCBoYW5kIG91dCBhIHRva2VuIHRoYXQgaXMgYWxyZWFkeSBleHBpcmVkXG4gICAqIGJlZm9yZSBpdCBjb3VsZCBldmVyIGJlIHVzZWQuXG4gICAqXG4gICAqIFRoZSBzYWZldHkgbWFyZ2luIGRlZmF1bHRzIHRvIDMwcy5cbiAgICovXG4gIHJlZnJlc2hTYWZldHlNYXJnaW4/OiBudW1iZXI7XG5cbiAgLyoqIFJlcXVlc3RlZCBPQXV0aCBzY29wZXMuICovXG4gIHNjb3Blczogc3RyaW5nW107XG5cbiAgLyoqIFRoZSB0b2tlbiBleGNoYW5nZSBVUkwuICovXG4gIHRva2VuRXhjaGFuZ2VVcmw6IHN0cmluZztcblxuICAvKiogVGhlIHRva2VuIHJlZnJlc2ggVVJMLiAqL1xuICB0b2tlblJlZnJlc2hVcmw6IHN0cmluZztcbn1cblxuLyoqXG4gKiBUaGUgYXV0aG9yaXphdGlvbiBkYXRhLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEF1dGhvcml6YXRpb25EYXRhIHtcbiAgLyoqIEEgdmFsaWQgYWNjZXNzIHRva2VuLiAqL1xuICBhY2Nlc3NUb2tlbjogc3RyaW5nO1xuXG4gIC8qKiBUaGUgZW5jcnlwdGVkIHJlZnJlc2ggdG9rZW4uICovXG4gIGVuY3J5cHRlZFJlZnJlc2hUb2tlbjogc3RyaW5nO1xuXG4gIC8qKiBUaGUgZGF0ZSAoZnJvbSBVVEMsIGluIG1pbGxpc2Vjb25kcykgd2hlbiB0aGUgZ2l2ZW4gYWNjZXNzIHRva2VuIGV4cGlyZXMuICovXG4gIGV4cGlyZXNBdDogbnVtYmVyO1xufVxuXG4vKipcbiAqIEBuYW1lIFNwb3RpZnkgQXV0aFxuICogQGRlc2NyaXB0aW9uXG4gKiBDb3Jkb3ZhIHBsdWdpbiBmb3IgYXV0aGVudGljYXRpbmcgd2l0aCBTcG90aWZ5XG4gKiA+IGh0dHBzOi8vZ2l0aHViLmNvbS9GZXN0aWZ5L2NvcmRvdmEtc3BvdGlmeS1vYXV0aFxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBTcG90aWZ5QXV0aCB9IGZyb20gJ0Bhd2Vzb21lLWNvcmRvdmEtcGx1Z2lucy9zcG90aWZ5LWF1dGgvbmd4JztcbiAqXG4gKiAvLyBbLi4uXVxuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgc3BvdGlmeUF1dGg6IFNwb3RpZnlBdXRoKSB7IH1cbiAqXG4gKiAvLyBbLi4uXVxuICpcbiAqIGNvbnN0IGNvbmZpZyA9IHtcbiAqICAgY2xpZW50SWQ6IFwiPFNQT1RJRlkgQ0xJRU5UIElEPlwiLFxuICogICByZWRpcmVjdFVybDogXCI8UkVESVJFQ1QgVVJMLCBNVVNUIE1BVENIIFdJVEggQVVUSCBFTkRQT0lOVCBBTkQgU1BPVElGWSBERVYgQ09OU09MRT5cIixcbiAqICAgc2NvcGVzOiBbXCJzdHJlYW1pbmdcIl0sIC8vIHNlZSBTcG90aWZ5IERldiBjb25zb2xlIGZvciBhbGwgc2NvcGVzXG4gKiAgIHRva2VuRXhjaGFuZ2VVcmw6IFwiPFVSTCBPRiBUT0tFTiBFWENIQU5HRSBIVFRQIEVORFBPSU5UPlwiLFxuICogICB0b2tlblJlZnJlc2hVcmw6IFwiPFVSTCBPRiBUT0tFTiBSRUZSRVNIIEhUVFAgRU5EUE9JTlQ+XCIsXG4gKiB9O1xuICpcbiAqIC4uLlxuICpcbiAqIHRoaXMuc3BvdGlmeUF1dGguYXV0aG9yaXplKGNvbmZpZylcbiAqICAgLnRoZW4oKHsgYWNjZXNzVG9rZW4sIGV4cGlyZXNBdCB9KSA9PiB7XG4gKiAgICAgY29uc29sZS5sb2coYEdvdCBhbiBhY2Nlc3MgdG9rZW4sIGl0cyAke2FjY2Vzc1Rva2VufSFgKTtcbiAqICAgICBjb25zb2xlLmxvZyhgSXRzIGdvaW5nIHRvIGV4cGlyZSBpbiAke2V4cGlyZXNBdCAtIERhdGUubm93KCl9bXMuYCk7XG4gKiAgIH0pO1xuICpcbiAqIC8vIFsuLi5dXG4gKlxuICogdGhpcy5zcG90aWZ5QXV0aC5mb3JnZXQoKTtcbiAqXG4gKiAvLyBbLi4uXVxuICogYGBgXG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnU3BvdGlmeUF1dGgnLFxuICBwbHVnaW46ICdjb3Jkb3ZhLXNwb3RpZnktb2F1dGgnLFxuICBwbHVnaW5SZWY6ICdjb3Jkb3ZhLnBsdWdpbnMuc3BvdGlmeUF1dGgnLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL0Zlc3RpZnkvY29yZG92YS1zcG90aWZ5LW9hdXRoJyxcbiAgaW5zdGFsbDogJ2lvbmljIGNvcmRvdmEgcGx1Z2luIGFkZCBjb3Jkb3ZhLXNwb3RpZnktb2F1dGggLS12YXJpYWJsZSBMT0NBTF9TVE9SQUdFX0tFWT1cIlNwb3RpZnlPQXV0aERhdGFcIicsXG4gIGluc3RhbGxWYXJpYWJsZXM6IFsnTE9DQUxfU1RPUkFHRV9LRVknXSxcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJ10sXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFNwb3RpZnlBdXRoIGV4dGVuZHMgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4ge1xuICAvKipcbiAgICogT2J0YWlucyB2YWxpZCBhdXRob3JpemF0aW9uIGRhdGEuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIHBlcmZvcm1zIHRoZSBuZWNlc3Nhcnkgc3RlcHMgaW4gb3JkZXIgdG8gb2J0YWluIGEgdmFsaWRcbiAgICogYWNjZXNzIHRva2VuLiBJdCBwZXJmb3JtcyB0aGUgT0F1dGggZGFuY2UgcHJvbXB0aW5nIHRoZSB1c2VyIHRvIGxvZyBpbixcbiAgICogZXhjaGFuZ2VzIHRoZSBvYnRhaW5lZCBhdXRob3JpemF0aW9uIGNvZGUgZm9yIGFuIGFjY2VzcyBhbmQgYSByZWZyZXNoXG4gICAqIHRva2VuLCBjYWNoZXMgdGhvc2UsIGFuZCByZXR1cm5zIGJvdGggdG8gdGhlIGRldmVsb3Blci5cbiAgICpcbiAgICogV2hlbiBpdCBpcyBpbnZva2VkIGFnYWluLCBpdCB3aWxsIGZpcnN0IGNoZWNrIHdoZXRoZXIgdGhlIGNhY2hlZCBhY2Nlc3NcbiAgICogdG9rZW4gaXMgc3RpbGwgdmFsaWQgKGluY2x1ZGluZyBhIGNvbmZpZ3VyYWJsZSBzYWZldHkgbWFyZ2luKSBhbmQgdGhlXG4gICAqIHNjb3BlcyBlcXVhbCwgYW5kIHJldHVybiB0aGUgdG9rZW4gZGlyZWN0bHkgaWYgdGhhdCBpcyB0aGUgY2FzZS4gT3RoZXJ3aXNlLFxuICAgKiB0aGUgbWV0aG9kIHdpbGwgdHJhbnNwYXJlbnRseSByZWZyZXNoIHRoZSB0b2tlbiAob3Igb2J0YWluIGEgbmV3IG9uZSBpZlxuICAgKiB0aGUgc2NvcGVzIGNoYW5nZWQpIGFuZCByZXR1cm4gdGhhdC5cbiAgICpcbiAgICogQm90dG9tIGxpbmUgLSBhbHdheXMgY2FsbCB0aGlzIGlmIHlvdSBuZWVkIGEgdmFsaWQgYWNjZXNzIHRva2VuIGluIHlvdXIgY29kZS5cbiAgICpcbiAgICogQHBhcmFtIGNmZyB7Q29uZmlnfSBjb25maWd1cmF0aW9uXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPEF1dGhvcml6YXRpb25EYXRhPn1cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBzeW5jOiBmYWxzZSxcbiAgfSlcbiAgYXV0aG9yaXplKGNmZzogQ29uZmlnKTogUHJvbWlzZTxBdXRob3JpemF0aW9uRGF0YT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGFsbCBjYWNoZWQgZGF0YSBzbyB0aGF0IGBhdXRob3JpemVgIHBlcmZvcm1zIHRoZSBmdWxsXG4gICAqIG9hdXRoIGRhbmNlIGFnYWluLlxuICAgKlxuICAgKiBUaGlzIGlzIGFraW4gdG8gYSBcImxvZ291dFwiLlxuICAgKlxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBzeW5jOiB0cnVlLFxuICB9KVxuICBmb3JnZXQoKTogdm9pZCB7fVxufVxuIl19