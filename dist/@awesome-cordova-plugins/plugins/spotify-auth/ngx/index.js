import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import * as i0 from "@angular/core";
var SpotifyAuth = /** @class */ (function (_super) {
    __extends(SpotifyAuth, _super);
    function SpotifyAuth() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SpotifyAuth.prototype.authorize = function (cfg) { return cordova(this, "authorize", { "sync": false }, arguments); };
    SpotifyAuth.prototype.forget = function () { return cordova(this, "forget", { "sync": true }, arguments); };
    SpotifyAuth.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SpotifyAuth, deps: null, target: i0.ɵɵFactoryTarget.Injectable });
    SpotifyAuth.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SpotifyAuth });
    SpotifyAuth.pluginName = "SpotifyAuth";
    SpotifyAuth.plugin = "cordova-spotify-oauth";
    SpotifyAuth.pluginRef = "cordova.plugins.spotifyAuth";
    SpotifyAuth.repo = "https://github.com/Festify/cordova-spotify-oauth";
    SpotifyAuth.install = "ionic cordova plugin add cordova-spotify-oauth --variable LOCAL_STORAGE_KEY=\"SpotifyOAuthData\"";
    SpotifyAuth.installVariables = ["LOCAL_STORAGE_KEY"];
    SpotifyAuth.platforms = ["Android", "iOS"];
    SpotifyAuth = __decorate([], SpotifyAuth);
    return SpotifyAuth;
}(AwesomeCordovaNativePlugin));
export { SpotifyAuth };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SpotifyAuth, decorators: [{
            type: Injectable
        }], propDecorators: { authorize: [], forget: [] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvc3BvdGlmeS1hdXRoL25neC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLHVDQUErQyxNQUFNLCtCQUErQixDQUFDOzs7SUFpRzNELCtCQUEwQjs7OztJQXVCekQsK0JBQVMsYUFBQyxHQUFXO0lBZXJCLDRCQUFNOzZHQXRDSyxXQUFXO2lIQUFYLFdBQVc7Ozs7Ozs7O0lBQVgsV0FBVyxrQkFBWCxXQUFXO3NCQWxHeEI7RUFrR2lDLDBCQUEwQjtTQUE5QyxXQUFXOzRGQUFYLFdBQVc7a0JBRHZCLFVBQVU7OEJBd0JULFNBQVMsTUFlVCxNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUGx1Z2luLCBDb3Jkb3ZhLCBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiB9IGZyb20gJ0Bhd2Vzb21lLWNvcmRvdmEtcGx1Z2lucy9jb3JlJztcblxuLyoqXG4gKiBPQXV0aCBjb25maWd1cmF0aW9uIGRhdGEuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ29uZmlnIHtcbiAgLyoqIFRoZSBjbGllbnQgSUQgYXMgcGVyIHRoZSBTcG90aWZ5IGRldiBjb25zb2xlLiAqL1xuICBjbGllbnRJZDogc3RyaW5nO1xuXG4gIC8qKiBUaGUgcmVkaXJlY3QgVVJJIGFzIGVudGVyZWQgaW4gdGhlIFNwb3RpZnkgZGV2IGNvbnNvbGUuICovXG4gIHJlZGlyZWN0VXJsOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFNhZmV0eSBtYXJnaW4gdGltZSAoaW4gbWlsbGlzZWNvbmRzKSBmb3IgdGhlIHRva2VuIHJlZnJlc2guXG4gICAqXG4gICAqIFRoZSBwbHVnaW4gYXBwbGllcyBhIHNhZmV0eSBtYXJnaW4gdG8gdGhlIHRva2VuIGxpZmV0aW1lIGluIG9yZGVyXG4gICAqIHRvIGdpdmUgdGhlIHRva2VuIHVzZXIgZW5vdWdoIHRpbWUgdG8gcGVyZm9ybSBhbGwgb3BlcmF0aW9ucyBuZWVkZWQuXG4gICAqXG4gICAqIE90aGVyd2lzZSB0aGUgcGx1Z2luIG1pZ2h0IGhhbmQgb3V0IGEgdG9rZW4gdGhhdCBpcyBhbHJlYWR5IGV4cGlyZWRcbiAgICogYmVmb3JlIGl0IGNvdWxkIGV2ZXIgYmUgdXNlZC5cbiAgICpcbiAgICogVGhlIHNhZmV0eSBtYXJnaW4gZGVmYXVsdHMgdG8gMzBzLlxuICAgKi9cbiAgcmVmcmVzaFNhZmV0eU1hcmdpbj86IG51bWJlcjtcblxuICAvKiogUmVxdWVzdGVkIE9BdXRoIHNjb3Blcy4gKi9cbiAgc2NvcGVzOiBzdHJpbmdbXTtcblxuICAvKiogVGhlIHRva2VuIGV4Y2hhbmdlIFVSTC4gKi9cbiAgdG9rZW5FeGNoYW5nZVVybDogc3RyaW5nO1xuXG4gIC8qKiBUaGUgdG9rZW4gcmVmcmVzaCBVUkwuICovXG4gIHRva2VuUmVmcmVzaFVybDogc3RyaW5nO1xufVxuXG4vKipcbiAqIFRoZSBhdXRob3JpemF0aW9uIGRhdGEuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQXV0aG9yaXphdGlvbkRhdGEge1xuICAvKiogQSB2YWxpZCBhY2Nlc3MgdG9rZW4uICovXG4gIGFjY2Vzc1Rva2VuOiBzdHJpbmc7XG5cbiAgLyoqIFRoZSBlbmNyeXB0ZWQgcmVmcmVzaCB0b2tlbi4gKi9cbiAgZW5jcnlwdGVkUmVmcmVzaFRva2VuOiBzdHJpbmc7XG5cbiAgLyoqIFRoZSBkYXRlIChmcm9tIFVUQywgaW4gbWlsbGlzZWNvbmRzKSB3aGVuIHRoZSBnaXZlbiBhY2Nlc3MgdG9rZW4gZXhwaXJlcy4gKi9cbiAgZXhwaXJlc0F0OiBudW1iZXI7XG59XG5cbi8qKlxuICogQG5hbWUgU3BvdGlmeSBBdXRoXG4gKiBAZGVzY3JpcHRpb25cbiAqIENvcmRvdmEgcGx1Z2luIGZvciBhdXRoZW50aWNhdGluZyB3aXRoIFNwb3RpZnlcbiAqID4gaHR0cHM6Ly9naXRodWIuY29tL0Zlc3RpZnkvY29yZG92YS1zcG90aWZ5LW9hdXRoXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IFNwb3RpZnlBdXRoIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3Nwb3RpZnktYXV0aC9uZ3gnO1xuICpcbiAqIC8vIFsuLi5dXG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSBzcG90aWZ5QXV0aDogU3BvdGlmeUF1dGgpIHsgfVxuICpcbiAqIC8vIFsuLi5dXG4gKlxuICogY29uc3QgY29uZmlnID0ge1xuICogICBjbGllbnRJZDogXCI8U1BPVElGWSBDTElFTlQgSUQ+XCIsXG4gKiAgIHJlZGlyZWN0VXJsOiBcIjxSRURJUkVDVCBVUkwsIE1VU1QgTUFUQ0ggV0lUSCBBVVRIIEVORFBPSU5UIEFORCBTUE9USUZZIERFViBDT05TT0xFPlwiLFxuICogICBzY29wZXM6IFtcInN0cmVhbWluZ1wiXSwgLy8gc2VlIFNwb3RpZnkgRGV2IGNvbnNvbGUgZm9yIGFsbCBzY29wZXNcbiAqICAgdG9rZW5FeGNoYW5nZVVybDogXCI8VVJMIE9GIFRPS0VOIEVYQ0hBTkdFIEhUVFAgRU5EUE9JTlQ+XCIsXG4gKiAgIHRva2VuUmVmcmVzaFVybDogXCI8VVJMIE9GIFRPS0VOIFJFRlJFU0ggSFRUUCBFTkRQT0lOVD5cIixcbiAqIH07XG4gKlxuICogLi4uXG4gKlxuICogdGhpcy5zcG90aWZ5QXV0aC5hdXRob3JpemUoY29uZmlnKVxuICogICAudGhlbigoeyBhY2Nlc3NUb2tlbiwgZXhwaXJlc0F0IH0pID0+IHtcbiAqICAgICBjb25zb2xlLmxvZyhgR290IGFuIGFjY2VzcyB0b2tlbiwgaXRzICR7YWNjZXNzVG9rZW59IWApO1xuICogICAgIGNvbnNvbGUubG9nKGBJdHMgZ29pbmcgdG8gZXhwaXJlIGluICR7ZXhwaXJlc0F0IC0gRGF0ZS5ub3coKX1tcy5gKTtcbiAqICAgfSk7XG4gKlxuICogLy8gWy4uLl1cbiAqXG4gKiB0aGlzLnNwb3RpZnlBdXRoLmZvcmdldCgpO1xuICpcbiAqIC8vIFsuLi5dXG4gKiBgYGBcbiAqL1xuQFBsdWdpbih7XG4gIHBsdWdpbk5hbWU6ICdTcG90aWZ5QXV0aCcsXG4gIHBsdWdpbjogJ2NvcmRvdmEtc3BvdGlmeS1vYXV0aCcsXG4gIHBsdWdpblJlZjogJ2NvcmRvdmEucGx1Z2lucy5zcG90aWZ5QXV0aCcsXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vRmVzdGlmeS9jb3Jkb3ZhLXNwb3RpZnktb2F1dGgnLFxuICBpbnN0YWxsOiAnaW9uaWMgY29yZG92YSBwbHVnaW4gYWRkIGNvcmRvdmEtc3BvdGlmeS1vYXV0aCAtLXZhcmlhYmxlIExPQ0FMX1NUT1JBR0VfS0VZPVwiU3BvdGlmeU9BdXRoRGF0YVwiJyxcbiAgaW5zdGFsbFZhcmlhYmxlczogWydMT0NBTF9TVE9SQUdFX0tFWSddLFxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXSxcbn0pXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgU3BvdGlmeUF1dGggZXh0ZW5kcyBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiB7XG4gIC8qKlxuICAgKiBPYnRhaW5zIHZhbGlkIGF1dGhvcml6YXRpb24gZGF0YS5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgcGVyZm9ybXMgdGhlIG5lY2Vzc2FyeSBzdGVwcyBpbiBvcmRlciB0byBvYnRhaW4gYSB2YWxpZFxuICAgKiBhY2Nlc3MgdG9rZW4uIEl0IHBlcmZvcm1zIHRoZSBPQXV0aCBkYW5jZSBwcm9tcHRpbmcgdGhlIHVzZXIgdG8gbG9nIGluLFxuICAgKiBleGNoYW5nZXMgdGhlIG9idGFpbmVkIGF1dGhvcml6YXRpb24gY29kZSBmb3IgYW4gYWNjZXNzIGFuZCBhIHJlZnJlc2hcbiAgICogdG9rZW4sIGNhY2hlcyB0aG9zZSwgYW5kIHJldHVybnMgYm90aCB0byB0aGUgZGV2ZWxvcGVyLlxuICAgKlxuICAgKiBXaGVuIGl0IGlzIGludm9rZWQgYWdhaW4sIGl0IHdpbGwgZmlyc3QgY2hlY2sgd2hldGhlciB0aGUgY2FjaGVkIGFjY2Vzc1xuICAgKiB0b2tlbiBpcyBzdGlsbCB2YWxpZCAoaW5jbHVkaW5nIGEgY29uZmlndXJhYmxlIHNhZmV0eSBtYXJnaW4pIGFuZCB0aGVcbiAgICogc2NvcGVzIGVxdWFsLCBhbmQgcmV0dXJuIHRoZSB0b2tlbiBkaXJlY3RseSBpZiB0aGF0IGlzIHRoZSBjYXNlLiBPdGhlcndpc2UsXG4gICAqIHRoZSBtZXRob2Qgd2lsbCB0cmFuc3BhcmVudGx5IHJlZnJlc2ggdGhlIHRva2VuIChvciBvYnRhaW4gYSBuZXcgb25lIGlmXG4gICAqIHRoZSBzY29wZXMgY2hhbmdlZCkgYW5kIHJldHVybiB0aGF0LlxuICAgKlxuICAgKiBCb3R0b20gbGluZSAtIGFsd2F5cyBjYWxsIHRoaXMgaWYgeW91IG5lZWQgYSB2YWxpZCBhY2Nlc3MgdG9rZW4gaW4geW91ciBjb2RlLlxuICAgKlxuICAgKiBAcGFyYW0gY2ZnIHtDb25maWd9IGNvbmZpZ3VyYXRpb25cbiAgICogQHJldHVybnMge1Byb21pc2U8QXV0aG9yaXphdGlvbkRhdGE+fVxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIHN5bmM6IGZhbHNlLFxuICB9KVxuICBhdXRob3JpemUoY2ZnOiBDb25maWcpOiBQcm9taXNlPEF1dGhvcml6YXRpb25EYXRhPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgYWxsIGNhY2hlZCBkYXRhIHNvIHRoYXQgYGF1dGhvcml6ZWAgcGVyZm9ybXMgdGhlIGZ1bGxcbiAgICogb2F1dGggZGFuY2UgYWdhaW4uXG4gICAqXG4gICAqIFRoaXMgaXMgYWtpbiB0byBhIFwibG9nb3V0XCIuXG4gICAqXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIHN5bmM6IHRydWUsXG4gIH0pXG4gIGZvcmdldCgpOiB2b2lkIHt9XG59XG4iXX0=