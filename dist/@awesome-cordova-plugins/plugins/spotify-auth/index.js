var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var SpotifyAuthOriginal = /** @class */ (function (_super) {
    __extends(SpotifyAuthOriginal, _super);
    function SpotifyAuthOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SpotifyAuthOriginal.prototype.authorize = function (cfg) { return cordova(this, "authorize", { "sync": false }, arguments); };
    SpotifyAuthOriginal.prototype.forget = function () { return cordova(this, "forget", { "sync": true }, arguments); };
    SpotifyAuthOriginal.pluginName = "SpotifyAuth";
    SpotifyAuthOriginal.plugin = "cordova-spotify-oauth";
    SpotifyAuthOriginal.pluginRef = "cordova.plugins.spotifyAuth";
    SpotifyAuthOriginal.repo = "https://github.com/Festify/cordova-spotify-oauth";
    SpotifyAuthOriginal.install = "ionic cordova plugin add cordova-spotify-oauth --variable LOCAL_STORAGE_KEY=\"SpotifyOAuthData\"";
    SpotifyAuthOriginal.installVariables = ["LOCAL_STORAGE_KEY"];
    SpotifyAuthOriginal.platforms = ["Android", "iOS"];
    return SpotifyAuthOriginal;
}(AwesomeCordovaNativePlugin));
var SpotifyAuth = new SpotifyAuthOriginal();
export { SpotifyAuth };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvc3BvdGlmeS1hdXRoL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFDQSxPQUFPLHVDQUErQyxNQUFNLCtCQUErQixDQUFDOztJQWlHM0QsK0JBQTBCOzs7O0lBdUJ6RCwrQkFBUyxhQUFDLEdBQVc7SUFlckIsNEJBQU07Ozs7Ozs7O3NCQXhJUjtFQWtHaUMsMEJBQTBCO1NBQTlDLFdBQVciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQbHVnaW4sIENvcmRvdmEsIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL2NvcmUnO1xuXG4vKipcbiAqIE9BdXRoIGNvbmZpZ3VyYXRpb24gZGF0YS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDb25maWcge1xuICAvKiogVGhlIGNsaWVudCBJRCBhcyBwZXIgdGhlIFNwb3RpZnkgZGV2IGNvbnNvbGUuICovXG4gIGNsaWVudElkOiBzdHJpbmc7XG5cbiAgLyoqIFRoZSByZWRpcmVjdCBVUkkgYXMgZW50ZXJlZCBpbiB0aGUgU3BvdGlmeSBkZXYgY29uc29sZS4gKi9cbiAgcmVkaXJlY3RVcmw6IHN0cmluZztcblxuICAvKipcbiAgICogU2FmZXR5IG1hcmdpbiB0aW1lIChpbiBtaWxsaXNlY29uZHMpIGZvciB0aGUgdG9rZW4gcmVmcmVzaC5cbiAgICpcbiAgICogVGhlIHBsdWdpbiBhcHBsaWVzIGEgc2FmZXR5IG1hcmdpbiB0byB0aGUgdG9rZW4gbGlmZXRpbWUgaW4gb3JkZXJcbiAgICogdG8gZ2l2ZSB0aGUgdG9rZW4gdXNlciBlbm91Z2ggdGltZSB0byBwZXJmb3JtIGFsbCBvcGVyYXRpb25zIG5lZWRlZC5cbiAgICpcbiAgICogT3RoZXJ3aXNlIHRoZSBwbHVnaW4gbWlnaHQgaGFuZCBvdXQgYSB0b2tlbiB0aGF0IGlzIGFscmVhZHkgZXhwaXJlZFxuICAgKiBiZWZvcmUgaXQgY291bGQgZXZlciBiZSB1c2VkLlxuICAgKlxuICAgKiBUaGUgc2FmZXR5IG1hcmdpbiBkZWZhdWx0cyB0byAzMHMuXG4gICAqL1xuICByZWZyZXNoU2FmZXR5TWFyZ2luPzogbnVtYmVyO1xuXG4gIC8qKiBSZXF1ZXN0ZWQgT0F1dGggc2NvcGVzLiAqL1xuICBzY29wZXM6IHN0cmluZ1tdO1xuXG4gIC8qKiBUaGUgdG9rZW4gZXhjaGFuZ2UgVVJMLiAqL1xuICB0b2tlbkV4Y2hhbmdlVXJsOiBzdHJpbmc7XG5cbiAgLyoqIFRoZSB0b2tlbiByZWZyZXNoIFVSTC4gKi9cbiAgdG9rZW5SZWZyZXNoVXJsOiBzdHJpbmc7XG59XG5cbi8qKlxuICogVGhlIGF1dGhvcml6YXRpb24gZGF0YS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBBdXRob3JpemF0aW9uRGF0YSB7XG4gIC8qKiBBIHZhbGlkIGFjY2VzcyB0b2tlbi4gKi9cbiAgYWNjZXNzVG9rZW46IHN0cmluZztcblxuICAvKiogVGhlIGVuY3J5cHRlZCByZWZyZXNoIHRva2VuLiAqL1xuICBlbmNyeXB0ZWRSZWZyZXNoVG9rZW46IHN0cmluZztcblxuICAvKiogVGhlIGRhdGUgKGZyb20gVVRDLCBpbiBtaWxsaXNlY29uZHMpIHdoZW4gdGhlIGdpdmVuIGFjY2VzcyB0b2tlbiBleHBpcmVzLiAqL1xuICBleHBpcmVzQXQ6IG51bWJlcjtcbn1cblxuLyoqXG4gKiBAbmFtZSBTcG90aWZ5IEF1dGhcbiAqIEBkZXNjcmlwdGlvblxuICogQ29yZG92YSBwbHVnaW4gZm9yIGF1dGhlbnRpY2F0aW5nIHdpdGggU3BvdGlmeVxuICogPiBodHRwczovL2dpdGh1Yi5jb20vRmVzdGlmeS9jb3Jkb3ZhLXNwb3RpZnktb2F1dGhcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgU3BvdGlmeUF1dGggfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvc3BvdGlmeS1hdXRoL25neCc7XG4gKlxuICogLy8gWy4uLl1cbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIHNwb3RpZnlBdXRoOiBTcG90aWZ5QXV0aCkgeyB9XG4gKlxuICogLy8gWy4uLl1cbiAqXG4gKiBjb25zdCBjb25maWcgPSB7XG4gKiAgIGNsaWVudElkOiBcIjxTUE9USUZZIENMSUVOVCBJRD5cIixcbiAqICAgcmVkaXJlY3RVcmw6IFwiPFJFRElSRUNUIFVSTCwgTVVTVCBNQVRDSCBXSVRIIEFVVEggRU5EUE9JTlQgQU5EIFNQT1RJRlkgREVWIENPTlNPTEU+XCIsXG4gKiAgIHNjb3BlczogW1wic3RyZWFtaW5nXCJdLCAvLyBzZWUgU3BvdGlmeSBEZXYgY29uc29sZSBmb3IgYWxsIHNjb3Blc1xuICogICB0b2tlbkV4Y2hhbmdlVXJsOiBcIjxVUkwgT0YgVE9LRU4gRVhDSEFOR0UgSFRUUCBFTkRQT0lOVD5cIixcbiAqICAgdG9rZW5SZWZyZXNoVXJsOiBcIjxVUkwgT0YgVE9LRU4gUkVGUkVTSCBIVFRQIEVORFBPSU5UPlwiLFxuICogfTtcbiAqXG4gKiAuLi5cbiAqXG4gKiB0aGlzLnNwb3RpZnlBdXRoLmF1dGhvcml6ZShjb25maWcpXG4gKiAgIC50aGVuKCh7IGFjY2Vzc1Rva2VuLCBleHBpcmVzQXQgfSkgPT4ge1xuICogICAgIGNvbnNvbGUubG9nKGBHb3QgYW4gYWNjZXNzIHRva2VuLCBpdHMgJHthY2Nlc3NUb2tlbn0hYCk7XG4gKiAgICAgY29uc29sZS5sb2coYEl0cyBnb2luZyB0byBleHBpcmUgaW4gJHtleHBpcmVzQXQgLSBEYXRlLm5vdygpfW1zLmApO1xuICogICB9KTtcbiAqXG4gKiAvLyBbLi4uXVxuICpcbiAqIHRoaXMuc3BvdGlmeUF1dGguZm9yZ2V0KCk7XG4gKlxuICogLy8gWy4uLl1cbiAqIGBgYFxuICovXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ1Nwb3RpZnlBdXRoJyxcbiAgcGx1Z2luOiAnY29yZG92YS1zcG90aWZ5LW9hdXRoJyxcbiAgcGx1Z2luUmVmOiAnY29yZG92YS5wbHVnaW5zLnNwb3RpZnlBdXRoJyxcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9GZXN0aWZ5L2NvcmRvdmEtc3BvdGlmeS1vYXV0aCcsXG4gIGluc3RhbGw6ICdpb25pYyBjb3Jkb3ZhIHBsdWdpbiBhZGQgY29yZG92YS1zcG90aWZ5LW9hdXRoIC0tdmFyaWFibGUgTE9DQUxfU1RPUkFHRV9LRVk9XCJTcG90aWZ5T0F1dGhEYXRhXCInLFxuICBpbnN0YWxsVmFyaWFibGVzOiBbJ0xPQ0FMX1NUT1JBR0VfS0VZJ10sXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddLFxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBTcG90aWZ5QXV0aCBleHRlbmRzIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luIHtcbiAgLyoqXG4gICAqIE9idGFpbnMgdmFsaWQgYXV0aG9yaXphdGlvbiBkYXRhLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBwZXJmb3JtcyB0aGUgbmVjZXNzYXJ5IHN0ZXBzIGluIG9yZGVyIHRvIG9idGFpbiBhIHZhbGlkXG4gICAqIGFjY2VzcyB0b2tlbi4gSXQgcGVyZm9ybXMgdGhlIE9BdXRoIGRhbmNlIHByb21wdGluZyB0aGUgdXNlciB0byBsb2cgaW4sXG4gICAqIGV4Y2hhbmdlcyB0aGUgb2J0YWluZWQgYXV0aG9yaXphdGlvbiBjb2RlIGZvciBhbiBhY2Nlc3MgYW5kIGEgcmVmcmVzaFxuICAgKiB0b2tlbiwgY2FjaGVzIHRob3NlLCBhbmQgcmV0dXJucyBib3RoIHRvIHRoZSBkZXZlbG9wZXIuXG4gICAqXG4gICAqIFdoZW4gaXQgaXMgaW52b2tlZCBhZ2FpbiwgaXQgd2lsbCBmaXJzdCBjaGVjayB3aGV0aGVyIHRoZSBjYWNoZWQgYWNjZXNzXG4gICAqIHRva2VuIGlzIHN0aWxsIHZhbGlkIChpbmNsdWRpbmcgYSBjb25maWd1cmFibGUgc2FmZXR5IG1hcmdpbikgYW5kIHRoZVxuICAgKiBzY29wZXMgZXF1YWwsIGFuZCByZXR1cm4gdGhlIHRva2VuIGRpcmVjdGx5IGlmIHRoYXQgaXMgdGhlIGNhc2UuIE90aGVyd2lzZSxcbiAgICogdGhlIG1ldGhvZCB3aWxsIHRyYW5zcGFyZW50bHkgcmVmcmVzaCB0aGUgdG9rZW4gKG9yIG9idGFpbiBhIG5ldyBvbmUgaWZcbiAgICogdGhlIHNjb3BlcyBjaGFuZ2VkKSBhbmQgcmV0dXJuIHRoYXQuXG4gICAqXG4gICAqIEJvdHRvbSBsaW5lIC0gYWx3YXlzIGNhbGwgdGhpcyBpZiB5b3UgbmVlZCBhIHZhbGlkIGFjY2VzcyB0b2tlbiBpbiB5b3VyIGNvZGUuXG4gICAqXG4gICAqIEBwYXJhbSBjZmcge0NvbmZpZ30gY29uZmlndXJhdGlvblxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxBdXRob3JpemF0aW9uRGF0YT59XG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgc3luYzogZmFsc2UsXG4gIH0pXG4gIGF1dGhvcml6ZShjZmc6IENvbmZpZyk6IFByb21pc2U8QXV0aG9yaXphdGlvbkRhdGE+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBhbGwgY2FjaGVkIGRhdGEgc28gdGhhdCBgYXV0aG9yaXplYCBwZXJmb3JtcyB0aGUgZnVsbFxuICAgKiBvYXV0aCBkYW5jZSBhZ2Fpbi5cbiAgICpcbiAgICogVGhpcyBpcyBha2luIHRvIGEgXCJsb2dvdXRcIi5cbiAgICpcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgc3luYzogdHJ1ZSxcbiAgfSlcbiAgZm9yZ2V0KCk6IHZvaWQge31cbn1cbiJdfQ==