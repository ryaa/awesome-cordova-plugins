var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import { Observable } from 'rxjs';
/**
 * Enum for notification types.
 *
 * @readonly
 * @enum {number}
 */
export var NotificationType;
(function (NotificationType) {
    NotificationType[NotificationType["none"] = 0] = "none";
    NotificationType[NotificationType["badge"] = 1] = "badge";
    NotificationType[NotificationType["sound"] = 2] = "sound";
    NotificationType[NotificationType["alert"] = 4] = "alert";
})(NotificationType || (NotificationType = {}));
/**
 * Enum for presentation options.
 *
 * @readonly
 * @enum {number}
 */
export var PresentationOptions;
(function (PresentationOptions) {
    PresentationOptions[PresentationOptions["none"] = 0] = "none";
    PresentationOptions[PresentationOptions["badge"] = 1] = "badge";
    PresentationOptions[PresentationOptions["sound"] = 2] = "sound";
    PresentationOptions[PresentationOptions["alert"] = 4] = "alert";
})(PresentationOptions || (PresentationOptions = {}));
var UrbanAirShipOriginal = /** @class */ (function (_super) {
    __extends(UrbanAirShipOriginal, _super);
    function UrbanAirShipOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UrbanAirShipOriginal.prototype.onDeepLink = function () { return cordova(this, "onDeepLink", { "eventObservable": true, "event": "urbanairship.deep_link", "element": "document" }, arguments); };
    UrbanAirShipOriginal.prototype.onRegistration = function () { return cordova(this, "onRegistration", { "eventObservable": true, "event": "urbanairship.registration", "element": "document" }, arguments); };
    UrbanAirShipOriginal.prototype.onInboxUpdated = function () { return cordova(this, "onInboxUpdated", { "eventObservable": true, "event": "urbanairship.inbox_updated", "element": "document" }, arguments); };
    UrbanAirShipOriginal.prototype.onShowInbox = function () { return cordova(this, "onShowInbox", { "eventObservable": true, "event": "urbanairship.show_inbox", "element": "document" }, arguments); };
    UrbanAirShipOriginal.prototype.onPushReceived = function () { return cordova(this, "onPushReceived", { "eventObservable": true, "event": "urbanairship.push", "element": "document" }, arguments); };
    UrbanAirShipOriginal.prototype.onNotificationOpened = function () { return cordova(this, "onNotificationOpened", { "eventObservable": true, "event": "urbanairship.notification_opened", "element": "document" }, arguments); };
    UrbanAirShipOriginal.prototype.onNotificationOptInStatus = function () { return cordova(this, "onNotificationOptInStatus", { "eventObservable": true, "event": "urbanairship.notification_opt_in_status", "element": "document" }, arguments); };
    UrbanAirShipOriginal.prototype.reattach = function () { return cordova(this, "reattach", { "sync": true }, arguments); };
    UrbanAirShipOriginal.prototype.takeOff = function (config) { return cordova(this, "takeOff", {}, arguments); };
    UrbanAirShipOriginal.prototype.setAndroidNotificationConfig = function (config) { return cordova(this, "setAndroidNotificationConfig", {}, arguments); };
    UrbanAirShipOriginal.prototype.setAutoLaunchDefaultMessageCenter = function (enabled) { return cordova(this, "setAutoLaunchDefaultMessageCenter", {}, arguments); };
    UrbanAirShipOriginal.prototype.setUserNotificationsEnabled = function (enabled) { return cordova(this, "setUserNotificationsEnabled", {}, arguments); };
    UrbanAirShipOriginal.prototype.isUserNotificationsEnabled = function () { return cordova(this, "isUserNotificationsEnabled", {}, arguments); };
    UrbanAirShipOriginal.prototype.isAppNotificationsEnabled = function () { return cordova(this, "isAppNotificationsEnabled", {}, arguments); };
    UrbanAirShipOriginal.prototype.getChannelID = function () { return cordova(this, "getChannelID", {}, arguments); };
    UrbanAirShipOriginal.prototype.getLaunchNotification = function (clear) { return cordova(this, "getLaunchNotification", {}, arguments); };
    UrbanAirShipOriginal.prototype.getDeepLink = function (clear) { return cordova(this, "getDeepLink", {}, arguments); };
    UrbanAirShipOriginal.prototype.getTags = function () { return cordova(this, "getTags", {}, arguments); };
    UrbanAirShipOriginal.prototype.setTags = function (tags) { return cordova(this, "setTags", {}, arguments); };
    UrbanAirShipOriginal.prototype.getAlias = function () { return cordova(this, "getAlias", {}, arguments); };
    UrbanAirShipOriginal.prototype.setAlias = function (alias) { return cordova(this, "setAlias", {}, arguments); };
    UrbanAirShipOriginal.prototype.isQuietTimeEnabled = function () { return cordova(this, "isQuietTimeEnabled", {}, arguments); };
    UrbanAirShipOriginal.prototype.setQuietTimeEnabled = function (enabled) { return cordova(this, "setQuietTimeEnabled", {}, arguments); };
    UrbanAirShipOriginal.prototype.isInQuietTime = function () { return cordova(this, "isInQuietTime", {}, arguments); };
    UrbanAirShipOriginal.prototype.getQuietTime = function () { return cordova(this, "getQuietTime", {}, arguments); };
    UrbanAirShipOriginal.prototype.setQuietTime = function (startHour, startMinute, endHour, endMinute) { return cordova(this, "setQuietTime", {}, arguments); };
    UrbanAirShipOriginal.prototype.setAnalyticsEnabled = function (enabled) { return cordova(this, "setAnalyticsEnabled", {}, arguments); };
    UrbanAirShipOriginal.prototype.isAnalyticsEnabled = function () { return cordova(this, "isAnalyticsEnabled", {}, arguments); };
    UrbanAirShipOriginal.prototype.getNamedUser = function () { return cordova(this, "getNamedUser", {}, arguments); };
    UrbanAirShipOriginal.prototype.setNamedUser = function (namedUser) { return cordova(this, "setNamedUser", {}, arguments); };
    UrbanAirShipOriginal.prototype.runAction = function (actionName, actionValue) { return cordova(this, "runAction", {}, arguments); };
    UrbanAirShipOriginal.prototype.editNamedUserTagGroups = function () { return cordova(this, "editNamedUserTagGroups", { "sync": true }, arguments); };
    UrbanAirShipOriginal.prototype.editChannelTagGroups = function () { return cordova(this, "editChannelTagGroups", { "sync": true }, arguments); };
    UrbanAirShipOriginal.prototype.editChannelAttributes = function () { return cordova(this, "editChannelAttributes", { "sync": true }, arguments); };
    UrbanAirShipOriginal.prototype.editNamedUserAttributes = function () { return cordova(this, "editNamedUserAttributes", { "sync": true }, arguments); };
    UrbanAirShipOriginal.prototype.editChannelSubscriptionLists = function () { return cordova(this, "editChannelSubscriptionLists", { "sync": true }, arguments); };
    UrbanAirShipOriginal.prototype.editContactSubscriptionLists = function () { return cordova(this, "editContactSubscriptionLists", { "sync": true }, arguments); };
    UrbanAirShipOriginal.prototype.getChannelSubscriptionLists = function () { return cordova(this, "getChannelSubscriptionLists", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    UrbanAirShipOriginal.prototype.getContactSubscriptionLists = function () { return cordova(this, "getContactSubscriptionLists", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    UrbanAirShipOriginal.prototype.setAssociatedIdentifier = function (key, identifier) { return cordova(this, "setAssociatedIdentifier", {}, arguments); };
    UrbanAirShipOriginal.prototype.setLocationEnabled = function (enabled) { return cordova(this, "setLocationEnabled", {}, arguments); };
    UrbanAirShipOriginal.prototype.isLocationEnabled = function () { return cordova(this, "isLocationEnabled", {}, arguments); };
    UrbanAirShipOriginal.prototype.setBackgroundLocationEnabled = function (enabled) { return cordova(this, "setBackgroundLocationEnabled", {}, arguments); };
    UrbanAirShipOriginal.prototype.isBackgroundLocationEnabled = function () { return cordova(this, "isBackgroundLocationEnabled", {}, arguments); };
    UrbanAirShipOriginal.prototype.displayMessageCenter = function () { return cordova(this, "displayMessageCenter", {}, arguments); };
    UrbanAirShipOriginal.prototype.dismissMessageCenter = function () { return cordova(this, "dismissMessageCenter", {}, arguments); };
    UrbanAirShipOriginal.prototype.dismissInboxMessage = function () { return cordova(this, "dismissInboxMessage", {}, arguments); };
    UrbanAirShipOriginal.prototype.dismissOverlayInboxMessage = function () { return cordova(this, "dismissOverlayInboxMessage", {}, arguments); };
    UrbanAirShipOriginal.prototype.getInboxMessages = function () { return cordova(this, "getInboxMessages", {}, arguments); };
    UrbanAirShipOriginal.prototype.markInboxMessageRead = function (messageId) { return cordova(this, "markInboxMessageRead", {}, arguments); };
    UrbanAirShipOriginal.prototype.deleteInboxMessage = function (messageId) { return cordova(this, "deleteInboxMessage", {}, arguments); };
    UrbanAirShipOriginal.prototype.displayInboxMessage = function (messageId) { return cordova(this, "displayInboxMessage", {}, arguments); };
    UrbanAirShipOriginal.prototype.refreshInbox = function () { return cordova(this, "refreshInbox", {}, arguments); };
    UrbanAirShipOriginal.prototype.overlayInboxMessage = function (messageId) { return cordova(this, "overlayInboxMessage", {}, arguments); };
    UrbanAirShipOriginal.prototype.clearNotification = function (identifier) { return cordova(this, "clearNotification", {}, arguments); };
    UrbanAirShipOriginal.prototype.clearNotifications = function () { return cordova(this, "clearNotifications", {}, arguments); };
    UrbanAirShipOriginal.prototype.getActiveNotifications = function () { return cordova(this, "getActiveNotifications", {}, arguments); };
    UrbanAirShipOriginal.prototype.setAutobadgeEnabled = function (enabled) { return cordova(this, "setAutobadgeEnabled", {}, arguments); };
    UrbanAirShipOriginal.prototype.setBadgeNumber = function (count) { return cordova(this, "setBadgeNumber", {}, arguments); };
    UrbanAirShipOriginal.prototype.getBadgeNumber = function () { return cordova(this, "getBadgeNumber", {}, arguments); };
    UrbanAirShipOriginal.prototype.resetBadge = function () { return cordova(this, "resetBadge", {}, arguments); };
    UrbanAirShipOriginal.prototype.setNotificationTypes = function (types) { return cordova(this, "setNotificationTypes", {}, arguments); };
    UrbanAirShipOriginal.prototype.setPresentationOptions = function (options) { return cordova(this, "setPresentationOptions", {}, arguments); };
    UrbanAirShipOriginal.prototype.isSoundEnabled = function () { return cordova(this, "isSoundEnabled", {}, arguments); };
    UrbanAirShipOriginal.prototype.setSoundEnabled = function (enabled) { return cordova(this, "setSoundEnabled", {}, arguments); };
    UrbanAirShipOriginal.prototype.isVibrateEnabled = function () { return cordova(this, "isVibrateEnabled", {}, arguments); };
    UrbanAirShipOriginal.prototype.setVibrateEnabled = function (enabled) { return cordova(this, "setVibrateEnabled", {}, arguments); };
    UrbanAirShipOriginal.prototype.addCustomEvent = function (event) { return cordova(this, "addCustomEvent", {}, arguments); };
    UrbanAirShipOriginal.prototype.trackScreen = function (screen) { return cordova(this, "trackScreen", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    UrbanAirShipOriginal.prototype.enableFeature = function (features) { return cordova(this, "enableFeature", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    UrbanAirShipOriginal.prototype.disableFeature = function (features) { return cordova(this, "disableFeature", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    /**
     * Sets the current enabled features, replacing any currently enabled features with the given set.
     *
     * @param {Array<string>} features The features to set as enabled.
     * @param {Function} [success] Success callback.
     * @param {function(message)} [failure] Failure callback.
     * @param {string} failure.message The error message.
     * @since 13.0.0
     */
    UrbanAirShipOriginal.prototype.setEnabledFeatures = function (features) {
        return;
    };
    UrbanAirShipOriginal.prototype.getEnabledFeatures = function () { return cordova(this, "getEnabledFeatures", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    UrbanAirShipOriginal.prototype.isFeatureEnabled = function (features) { return cordova(this, "isFeatureEnabled", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    UrbanAirShipOriginal.prototype.getPreferenceCenterConfig = function (preferenceCenterId) { return cordova(this, "getPreferenceCenterConfig", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    UrbanAirShipOriginal.prototype.openPreferenceCenter = function (prenferenceCenterId) { return cordova(this, "openPreferenceCenter", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    UrbanAirShipOriginal.pluginName = "UrbanAirShip";
    UrbanAirShipOriginal.plugin = "urbanairship-cordova";
    UrbanAirShipOriginal.pluginRef = "window.UAirship";
    UrbanAirShipOriginal.repo = "https://www.npmjs.com/package/urbanairship-cordova";
    UrbanAirShipOriginal.install = "ionic cordova plugin add urbanairship-cordova";
    UrbanAirShipOriginal.platforms = ["Android", "iOS"];
    return UrbanAirShipOriginal;
}(AwesomeCordovaNativePlugin));
var UrbanAirShip = new UrbanAirShipOriginal();
export { UrbanAirShip };
//# sourceMappingURL=data:application/json;base64,