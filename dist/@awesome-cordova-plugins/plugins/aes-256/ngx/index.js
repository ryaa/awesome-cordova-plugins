import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import * as i0 from "@angular/core";
var AES256 = /** @class */ (function (_super) {
    __extends(AES256, _super);
    function AES256() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AES256.prototype.encrypt = function (secureKey, secureIV, data) { return cordova(this, "encrypt", {}, arguments); };
    AES256.prototype.decrypt = function (secureKey, secureIV, data) { return cordova(this, "decrypt", {}, arguments); };
    AES256.prototype.generateSecureKey = function (password) { return cordova(this, "generateSecureKey", {}, arguments); };
    AES256.prototype.generateSecureIV = function (password) { return cordova(this, "generateSecureIV", {}, arguments); };
    AES256.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AES256, deps: null, target: i0.ɵɵFactoryTarget.Injectable });
    AES256.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AES256 });
    AES256.pluginName = "AES256";
    AES256.plugin = "cordova-plugin-aes256-encryption";
    AES256.pluginRef = "cordova.plugins.AES256";
    AES256.repo = "https://github.com/Ideas2IT/cordova-aes256";
    AES256.platforms = ["Android", "iOS"];
    AES256.install = "ionic cordova plugin add cordova-plugin-aes256-encryption";
    AES256 = __decorate([], AES256);
    return AES256;
}(AwesomeCordovaNativePlugin));
export { AES256 };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AES256, decorators: [{
            type: Injectable
        }], propDecorators: { encrypt: [], decrypt: [], generateSecureKey: [], generateSecureIV: [] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvYWVzLTI1Ni9uZ3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyx1Q0FBK0MsTUFBTSwrQkFBK0IsQ0FBQzs7O0lBdURoRSwwQkFBMEI7Ozs7SUFVcEQsd0JBQU8sYUFBQyxTQUFpQixFQUFFLFFBQWdCLEVBQUUsSUFBWTtJQWF6RCx3QkFBTyxhQUFDLFNBQWlCLEVBQUUsUUFBZ0IsRUFBRSxJQUFZO0lBWXpELGtDQUFpQixhQUFDLFFBQWdCO0lBWWxDLGlDQUFnQixhQUFDLFFBQWdCO3dHQS9DdEIsTUFBTTs0R0FBTixNQUFNOzs7Ozs7O0lBQU4sTUFBTSxrQkFBTixNQUFNO2lCQXhEbkI7RUF3RDRCLDBCQUEwQjtTQUF6QyxNQUFNOzRGQUFOLE1BQU07a0JBRGxCLFVBQVU7OEJBV1QsT0FBTyxNQWFQLE9BQU8sTUFZUCxpQkFBaUIsTUFZakIsZ0JBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29yZG92YSwgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bhd2Vzb21lLWNvcmRvdmEtcGx1Z2lucy9jb3JlJztcblxuLyoqXG4gKiBAbmFtZSBBRVMyNTZcbiAqIEBkZXNjcmlwdGlvblxuICogVGhpcyBjb3Jkb3ZhIGlvbmljIHBsdWdpbiBhbGxvd3MgeW91IHRvIHBlcmZvcm0gQUVTIDI1NiBlbmNyeXB0aW9uIGFuZCBkZWNyeXB0aW9uIG9uIHRoZSBwbGFpbiB0ZXh0LlxuICogSXQncyBhIGNyb3NzLXBsYXRmb3JtIHBsdWdpbiB3aGljaCBzdXBwb3J0cyBib3RoIEFuZHJvaWQgYW5kIGlPUy5cbiAqIFRoZSBlbmNyeXB0aW9uIGFuZCBkZWNyeXB0aW9uIGFyZSBwZXJmb3JtZWQgb24gdGhlIGRldmljZSBuYXRpdmUgbGF5ZXIgc28gdGhhdCB0aGUgcGVyZm9ybWFuY2UgaXMgbXVjaCBmYXN0ZXIuXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IEFFUzI1NiB9IGZyb20gJ0Bhd2Vzb21lLWNvcmRvdmEtcGx1Z2lucy9hZXMtMjU2L25neCc7XG4gKlxuICogcHJpdmF0ZSBzZWN1cmVLZXk6IHN0cmluZztcbiAqIHByaXZhdGUgc2VjdXJlSVY6IHN0cmluZztcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGFlczI1NjogQUVTMjU2KSB7XG4gKiAgICB0aGlzLmdlbmVyYXRlU2VjdXJlS2V5QW5kSVYoKTsgLy8gVG8gZ2VuZXJhdGUgdGhlIHJhbmRvbSBzZWN1cmVLZXkgYW5kIHNlY3VyZUlWXG4gKiB9XG4gKlxuICogLi4uXG4gKlxuICogYXN5bmMgZ2VuZXJhdGVTZWN1cmVLZXlBbmRJVigpIHtcbiAqICAgIHRoaXMuc2VjdXJlS2V5ID0gYXdhaXQgdGhpcy5hZXMyNTYuZ2VuZXJhdGVTZWN1cmVLZXkoJ3JhbmRvbSBwYXNzd29yZCAxMjM0NScpOyAvLyBSZXR1cm5zIGEgMzIgYnl0ZXMgc3RyaW5nXG4gKiAgICB0aGlzLnNlY3VyZUlWID0gYXdhaXQgdGhpcy5hZXMyNTYuZ2VuZXJhdGVTZWN1cmVJVigncmFuZG9tIHBhc3N3b3JkIDEyMzQ1Jyk7IC8vIFJldHVybnMgYSAxNiBieXRlcyBzdHJpbmdcbiAqIH1cbiAqXG4gKiB0aGlzLmFlczI1Ni5lbmNyeXB0KHRoaXMuc2VjdXJlS2V5LCB0aGlzLnNlY3VyZUlWLCAndGVzdGRhdGEnKVxuICogICAudGhlbihyZXMgPT4gY29uc29sZS5sb2coJ0VuY3J5cHRlZCBEYXRhOiAnLHJlcykpXG4gKiAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xuICpcbiAqIHRoaXMuYWVzMjU2LmRlY3J5cHQodGhpcy5zZWN1cmVLZXksIHRoaXMuc2VjdXJlSVYsICdlbmNyeXB0ZWREYXRhJylcbiAqICAgLnRoZW4ocmVzID0+IGNvbnNvbGUubG9nKCdEZWNyeXB0ZWQgRGF0YSA6ICcscmVzKSlcbiAqICAgLmNhdGNoKChlcnJvcjogYW55KSA9PiBjb25zb2xlLmVycm9yKGVycm9yKSk7XG4gKlxuICpcbiAqIHRoaXMuYWVzMjU2LmdlbmVyYXRlU2VjdXJlS2V5KCdyYW5kb20gcGFzc3dvcmQgMTIzNDUnKVxuICogICAudGhlbihyZXMgPT4gY29uc29sZS5sb2coJ1NlY3VyZSBLZXkgOiAnLHJlcykpXG4gKiAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xuICpcbiAqXG4gKiB0aGlzLmFlczI1Ni5nZW5lcmF0ZVNlY3VyZUlWKCdyYW5kb20gcGFzc3dvcmQgMTIzNDUnKVxuICogICAudGhlbihyZXMgPT4gY29uc29sZS5sb2coJ1NlY3VyZSBJViA6ICcscmVzKSlcbiAqICAgLmNhdGNoKChlcnJvcjogYW55KSA9PiBjb25zb2xlLmVycm9yKGVycm9yKSk7XG4gKlxuICogYGBgXG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnQUVTMjU2JyxcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tYWVzMjU2LWVuY3J5cHRpb24nLFxuICBwbHVnaW5SZWY6ICdjb3Jkb3ZhLnBsdWdpbnMuQUVTMjU2JyxcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9JZGVhczJJVC9jb3Jkb3ZhLWFlczI1NicsXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddLFxuICBpbnN0YWxsOiAnaW9uaWMgY29yZG92YSBwbHVnaW4gYWRkIGNvcmRvdmEtcGx1Z2luLWFlczI1Ni1lbmNyeXB0aW9uJyxcbn0pXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQUVTMjU2IGV4dGVuZHMgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4ge1xuICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiB1c2VkIHRvIHBlcmZvcm0gdGhlIGFlczI1NiBlbmNyeXB0aW9uXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzZWN1cmVLZXkgQSAzMiBieXRlcyBzdHJpbmcsIHdoaWNoIHdpbGwgdXNlZCBhcyBpbnB1dCBrZXkgZm9yIEFFUzI1NiBlbmNyeXB0aW9uLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gc2VjdXJlSVYgQSAxNiBieXRlcyBzdHJpbmcsIHdoaWNoIHdpbGwgdXNlZCBhcyBpbml0aWFsIHZlY3RvciBmb3IgQUVTMjU2IGVuY3J5cHRpb24uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBkYXRhIEEgc3RyaW5nIHdoaWNoIHdpbGwgYmUgZW5jcnlwdGVkXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHN0cmluZz59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiBlbmNyeXB0aW9uIGhhcHBlbnMuIFRoZSBzdWNjZXNzIHJlc3BvbnNlIHdpbGwgcmV0dXJucyBlbmNyeXB0ZWQgZGF0YS5cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgZW5jcnlwdChzZWN1cmVLZXk6IHN0cmluZywgc2VjdXJlSVY6IHN0cmluZywgZGF0YTogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiB1c2VkIHRvIHBlcmZvcm0gdGhlIGFlczI1NiBkZWNyeXB0aW9uXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzZWN1cmVLZXkgQSAzMiBieXRlcyBzdHJpbmcsIHdoaWNoIHdpbGwgdXNlZCBhcyBpbnB1dCBrZXkgZm9yIEFFUzI1NiBkZWNyeXB0aW9uLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gc2VjdXJlSVYgQSAxNiBieXRlcyBzdHJpbmcsIHdoaWNoIHdpbGwgdXNlZCBhcyBpbml0aWFsIHZlY3RvciBmb3IgQUVTMjU2IGRlY3J5cHRpb24uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBkYXRhIEFuIEFFUzI1NiBlbmNyeXB0ZWQgZGF0YSB3aGljaCB3aWxsIGJlIGRlY3J5cHRlZC5cbiAgICogQHJldHVybnMge1Byb21pc2U8c3RyaW5nPn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIGRlY3J5cHRpb24gaGFwcGVucy4gVGhlIHN1Y2Nlc3MgcmVzcG9uc2Ugd2lsbCByZXR1cm5zIGRlY3J5cHRlZCBkYXRhLlxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBkZWNyeXB0KHNlY3VyZUtleTogc3RyaW5nLCBzZWN1cmVJVjogc3RyaW5nLCBkYXRhOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIHVzZWQgdG8gZ2VuZXJhdGUgYSBzZWN1cmUga2V5IGJhc2VkIG9uIGFuIHBhc3N3b3JkLiBQZXJmZWN0IGlmIHlvdSB3YW50IHRvIGRlbGVnYXRlIHRoZSBrZXkgZ2VuZXJhdGlvbiBmb3IgZW5jcnlwdGlvbiB0byB0aGUgcGx1Z2luLlxuICAgKiBNYWtlIHN1cmUgdG8gc2F2ZSB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoaXMgZnVuY3Rpb24gc29tZXdoZXJlIHNvIHlvdXIgZW5jcnlwdGVkIGRhdGEgY2FuIGJlIGRlY3J5cHRlZCBpbiB0aGUgZnV0dXJlLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcGFzc3dvcmQgQSByYW5kb20gc3RyaW5nLCB3aGljaCB3aWxsIGJlIHVzZWQgYXMgaW5wdXQgZm9yIGEgUEJLREYyIGZ1bmN0aW9uXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHN0cmluZz59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiBrZXkgaXMgZ2VuZXJhdGVkLlxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBnZW5lcmF0ZVNlY3VyZUtleShwYXNzd29yZDogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiB1c2VkIHRvIGdlbmVyYXRlIGEgc2VjdXJlIElWIGJhc2VkIG9uIGFuIHBhc3N3b3JkLiBQZXJmZWN0IGlmIHlvdSB3YW50IHRvIGRlbGVnYXRlIHRoZSBJViBnZW5lcmF0aW9uIGZvciBlbmNyeXB0aW9uIHRvIHRoZSBwbHVnaW4uXG4gICAqIE1ha2Ugc3VyZSB0byBzYXZlIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhpcyBmdW5jdGlvbiBzb21ld2hlcmUgc28geW91ciBlbmNyeXB0ZWQgZGF0YSBjYW4gYmUgZGVjcnlwdGVkIGluIHRoZSBmdXR1cmUuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwYXNzd29yZCBBIHJhbmRvbSBzdHJpbmcsIHdoaWNoIHdpbGwgYmUgdXNlZCBhcyBpbnB1dCBmb3IgYSBQQktERjIgZnVuY3Rpb25cbiAgICogQHJldHVybnMge1Byb21pc2U8c3RyaW5nPn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIElWIGlzIGdlbmVyYXRlZC5cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgZ2VuZXJhdGVTZWN1cmVJVihwYXNzd29yZDogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICByZXR1cm47XG4gIH1cbn1cbiJdfQ==