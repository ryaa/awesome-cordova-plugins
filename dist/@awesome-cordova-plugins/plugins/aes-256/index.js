var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var AES256Original = /** @class */ (function (_super) {
    __extends(AES256Original, _super);
    function AES256Original() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AES256Original.prototype.encrypt = function (secureKey, secureIV, data) { return cordova(this, "encrypt", {}, arguments); };
    AES256Original.prototype.decrypt = function (secureKey, secureIV, data) { return cordova(this, "decrypt", {}, arguments); };
    AES256Original.prototype.generateSecureKey = function (password) { return cordova(this, "generateSecureKey", {}, arguments); };
    AES256Original.prototype.generateSecureIV = function (password) { return cordova(this, "generateSecureIV", {}, arguments); };
    AES256Original.pluginName = "AES256";
    AES256Original.plugin = "cordova-plugin-aes256-encryption";
    AES256Original.pluginRef = "cordova.plugins.AES256";
    AES256Original.repo = "https://github.com/Ideas2IT/cordova-aes256";
    AES256Original.platforms = ["Android", "iOS"];
    AES256Original.install = "ionic cordova plugin add cordova-plugin-aes256-encryption";
    return AES256Original;
}(AwesomeCordovaNativePlugin));
var AES256 = new AES256Original();
export { AES256 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvYWVzLTI1Ni9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQ0EsT0FBTyx1Q0FBK0MsTUFBTSwrQkFBK0IsQ0FBQzs7SUF1RGhFLDBCQUEwQjs7OztJQVVwRCx3QkFBTyxhQUFDLFNBQWlCLEVBQUUsUUFBZ0IsRUFBRSxJQUFZO0lBYXpELHdCQUFPLGFBQUMsU0FBaUIsRUFBRSxRQUFnQixFQUFFLElBQVk7SUFZekQsa0NBQWlCLGFBQUMsUUFBZ0I7SUFZbEMsaUNBQWdCLGFBQUMsUUFBZ0I7Ozs7Ozs7aUJBdkduQztFQXdENEIsMEJBQTBCO1NBQXpDLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb3Jkb3ZhLCBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL2NvcmUnO1xuXG4vKipcbiAqIEBuYW1lIEFFUzI1NlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGlzIGNvcmRvdmEgaW9uaWMgcGx1Z2luIGFsbG93cyB5b3UgdG8gcGVyZm9ybSBBRVMgMjU2IGVuY3J5cHRpb24gYW5kIGRlY3J5cHRpb24gb24gdGhlIHBsYWluIHRleHQuXG4gKiBJdCdzIGEgY3Jvc3MtcGxhdGZvcm0gcGx1Z2luIHdoaWNoIHN1cHBvcnRzIGJvdGggQW5kcm9pZCBhbmQgaU9TLlxuICogVGhlIGVuY3J5cHRpb24gYW5kIGRlY3J5cHRpb24gYXJlIHBlcmZvcm1lZCBvbiB0aGUgZGV2aWNlIG5hdGl2ZSBsYXllciBzbyB0aGF0IHRoZSBwZXJmb3JtYW5jZSBpcyBtdWNoIGZhc3Rlci5cbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgQUVTMjU2IH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL2Flcy0yNTYvbmd4JztcbiAqXG4gKiBwcml2YXRlIHNlY3VyZUtleTogc3RyaW5nO1xuICogcHJpdmF0ZSBzZWN1cmVJVjogc3RyaW5nO1xuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgYWVzMjU2OiBBRVMyNTYpIHtcbiAqICAgIHRoaXMuZ2VuZXJhdGVTZWN1cmVLZXlBbmRJVigpOyAvLyBUbyBnZW5lcmF0ZSB0aGUgcmFuZG9tIHNlY3VyZUtleSBhbmQgc2VjdXJlSVZcbiAqIH1cbiAqXG4gKiAuLi5cbiAqXG4gKiBhc3luYyBnZW5lcmF0ZVNlY3VyZUtleUFuZElWKCkge1xuICogICAgdGhpcy5zZWN1cmVLZXkgPSBhd2FpdCB0aGlzLmFlczI1Ni5nZW5lcmF0ZVNlY3VyZUtleSgncmFuZG9tIHBhc3N3b3JkIDEyMzQ1Jyk7IC8vIFJldHVybnMgYSAzMiBieXRlcyBzdHJpbmdcbiAqICAgIHRoaXMuc2VjdXJlSVYgPSBhd2FpdCB0aGlzLmFlczI1Ni5nZW5lcmF0ZVNlY3VyZUlWKCdyYW5kb20gcGFzc3dvcmQgMTIzNDUnKTsgLy8gUmV0dXJucyBhIDE2IGJ5dGVzIHN0cmluZ1xuICogfVxuICpcbiAqIHRoaXMuYWVzMjU2LmVuY3J5cHQodGhpcy5zZWN1cmVLZXksIHRoaXMuc2VjdXJlSVYsICd0ZXN0ZGF0YScpXG4gKiAgIC50aGVuKHJlcyA9PiBjb25zb2xlLmxvZygnRW5jcnlwdGVkIERhdGE6ICcscmVzKSlcbiAqICAgLmNhdGNoKChlcnJvcjogYW55KSA9PiBjb25zb2xlLmVycm9yKGVycm9yKSk7XG4gKlxuICogdGhpcy5hZXMyNTYuZGVjcnlwdCh0aGlzLnNlY3VyZUtleSwgdGhpcy5zZWN1cmVJViwgJ2VuY3J5cHRlZERhdGEnKVxuICogICAudGhlbihyZXMgPT4gY29uc29sZS5sb2coJ0RlY3J5cHRlZCBEYXRhIDogJyxyZXMpKVxuICogICAuY2F0Y2goKGVycm9yOiBhbnkpID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcbiAqXG4gKlxuICogdGhpcy5hZXMyNTYuZ2VuZXJhdGVTZWN1cmVLZXkoJ3JhbmRvbSBwYXNzd29yZCAxMjM0NScpXG4gKiAgIC50aGVuKHJlcyA9PiBjb25zb2xlLmxvZygnU2VjdXJlIEtleSA6ICcscmVzKSlcbiAqICAgLmNhdGNoKChlcnJvcjogYW55KSA9PiBjb25zb2xlLmVycm9yKGVycm9yKSk7XG4gKlxuICpcbiAqIHRoaXMuYWVzMjU2LmdlbmVyYXRlU2VjdXJlSVYoJ3JhbmRvbSBwYXNzd29yZCAxMjM0NScpXG4gKiAgIC50aGVuKHJlcyA9PiBjb25zb2xlLmxvZygnU2VjdXJlIElWIDogJyxyZXMpKVxuICogICAuY2F0Y2goKGVycm9yOiBhbnkpID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcbiAqXG4gKiBgYGBcbiAqL1xuQFBsdWdpbih7XG4gIHBsdWdpbk5hbWU6ICdBRVMyNTYnLFxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1hZXMyNTYtZW5jcnlwdGlvbicsXG4gIHBsdWdpblJlZjogJ2NvcmRvdmEucGx1Z2lucy5BRVMyNTYnLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL0lkZWFzMklUL2NvcmRvdmEtYWVzMjU2JyxcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJ10sXG4gIGluc3RhbGw6ICdpb25pYyBjb3Jkb3ZhIHBsdWdpbiBhZGQgY29yZG92YS1wbHVnaW4tYWVzMjU2LWVuY3J5cHRpb24nLFxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBBRVMyNTYgZXh0ZW5kcyBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiB7XG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIHVzZWQgdG8gcGVyZm9ybSB0aGUgYWVzMjU2IGVuY3J5cHRpb25cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHNlY3VyZUtleSBBIDMyIGJ5dGVzIHN0cmluZywgd2hpY2ggd2lsbCB1c2VkIGFzIGlucHV0IGtleSBmb3IgQUVTMjU2IGVuY3J5cHRpb24uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzZWN1cmVJViBBIDE2IGJ5dGVzIHN0cmluZywgd2hpY2ggd2lsbCB1c2VkIGFzIGluaXRpYWwgdmVjdG9yIGZvciBBRVMyNTYgZW5jcnlwdGlvbi5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGRhdGEgQSBzdHJpbmcgd2hpY2ggd2lsbCBiZSBlbmNyeXB0ZWRcbiAgICogQHJldHVybnMge1Byb21pc2U8c3RyaW5nPn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIGVuY3J5cHRpb24gaGFwcGVucy4gVGhlIHN1Y2Nlc3MgcmVzcG9uc2Ugd2lsbCByZXR1cm5zIGVuY3J5cHRlZCBkYXRhLlxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBlbmNyeXB0KHNlY3VyZUtleTogc3RyaW5nLCBzZWN1cmVJVjogc3RyaW5nLCBkYXRhOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIHVzZWQgdG8gcGVyZm9ybSB0aGUgYWVzMjU2IGRlY3J5cHRpb25cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHNlY3VyZUtleSBBIDMyIGJ5dGVzIHN0cmluZywgd2hpY2ggd2lsbCB1c2VkIGFzIGlucHV0IGtleSBmb3IgQUVTMjU2IGRlY3J5cHRpb24uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzZWN1cmVJViBBIDE2IGJ5dGVzIHN0cmluZywgd2hpY2ggd2lsbCB1c2VkIGFzIGluaXRpYWwgdmVjdG9yIGZvciBBRVMyNTYgZGVjcnlwdGlvbi5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGRhdGEgQW4gQUVTMjU2IGVuY3J5cHRlZCBkYXRhIHdoaWNoIHdpbGwgYmUgZGVjcnlwdGVkLlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxzdHJpbmc+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gZGVjcnlwdGlvbiBoYXBwZW5zLiBUaGUgc3VjY2VzcyByZXNwb25zZSB3aWxsIHJldHVybnMgZGVjcnlwdGVkIGRhdGEuXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGRlY3J5cHQoc2VjdXJlS2V5OiBzdHJpbmcsIHNlY3VyZUlWOiBzdHJpbmcsIGRhdGE6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gdXNlZCB0byBnZW5lcmF0ZSBhIHNlY3VyZSBrZXkgYmFzZWQgb24gYW4gcGFzc3dvcmQuIFBlcmZlY3QgaWYgeW91IHdhbnQgdG8gZGVsZWdhdGUgdGhlIGtleSBnZW5lcmF0aW9uIGZvciBlbmNyeXB0aW9uIHRvIHRoZSBwbHVnaW4uXG4gICAqIE1ha2Ugc3VyZSB0byBzYXZlIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhpcyBmdW5jdGlvbiBzb21ld2hlcmUgc28geW91ciBlbmNyeXB0ZWQgZGF0YSBjYW4gYmUgZGVjcnlwdGVkIGluIHRoZSBmdXR1cmUuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwYXNzd29yZCBBIHJhbmRvbSBzdHJpbmcsIHdoaWNoIHdpbGwgYmUgdXNlZCBhcyBpbnB1dCBmb3IgYSBQQktERjIgZnVuY3Rpb25cbiAgICogQHJldHVybnMge1Byb21pc2U8c3RyaW5nPn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIGtleSBpcyBnZW5lcmF0ZWQuXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGdlbmVyYXRlU2VjdXJlS2V5KHBhc3N3b3JkOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIHVzZWQgdG8gZ2VuZXJhdGUgYSBzZWN1cmUgSVYgYmFzZWQgb24gYW4gcGFzc3dvcmQuIFBlcmZlY3QgaWYgeW91IHdhbnQgdG8gZGVsZWdhdGUgdGhlIElWIGdlbmVyYXRpb24gZm9yIGVuY3J5cHRpb24gdG8gdGhlIHBsdWdpbi5cbiAgICogTWFrZSBzdXJlIHRvIHNhdmUgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGlzIGZ1bmN0aW9uIHNvbWV3aGVyZSBzbyB5b3VyIGVuY3J5cHRlZCBkYXRhIGNhbiBiZSBkZWNyeXB0ZWQgaW4gdGhlIGZ1dHVyZS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHBhc3N3b3JkIEEgcmFuZG9tIHN0cmluZywgd2hpY2ggd2lsbCBiZSB1c2VkIGFzIGlucHV0IGZvciBhIFBCS0RGMiBmdW5jdGlvblxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxzdHJpbmc+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gSVYgaXMgZ2VuZXJhdGVkLlxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBnZW5lcmF0ZVNlY3VyZUlWKHBhc3N3b3JkOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHJldHVybjtcbiAgfVxufVxuIl19