import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import { Observable } from 'rxjs';
var Firebase = /** @class */ (function (_super) {
    __extends(Firebase, _super);
    function Firebase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Firebase.prototype.getToken = function () { return cordova(this, "getToken", {}, arguments); };
    Firebase.prototype.onTokenRefresh = function () { return cordova(this, "onTokenRefresh", { "observable": true }, arguments); };
    Firebase.prototype.onNotificationOpen = function () { return cordova(this, "onNotificationOpen", { "observable": true }, arguments); };
    Firebase.prototype.grantPermission = function () { return cordova(this, "grantPermission", { "platforms": ["iOS"] }, arguments); };
    Firebase.prototype.hasPermission = function () { return cordova(this, "hasPermission", {}, arguments); };
    Firebase.prototype.setBadgeNumber = function (badgeNumber) { return cordova(this, "setBadgeNumber", {}, arguments); };
    Firebase.prototype.getBadgeNumber = function () { return cordova(this, "getBadgeNumber", {}, arguments); };
    Firebase.prototype.subscribe = function (topic) { return cordova(this, "subscribe", {}, arguments); };
    Firebase.prototype.unsubscribe = function (topic) { return cordova(this, "unsubscribe", {}, arguments); };
    Firebase.prototype.unregister = function () { return cordova(this, "unregister", {}, arguments); };
    Firebase.prototype.logEvent = function (type, data) { return cordova(this, "logEvent", {}, arguments); };
    Firebase.prototype.logError = function (message) { return cordova(this, "logError", {}, arguments); };
    Firebase.prototype.setScreenName = function (name) { return cordova(this, "setScreenName", {}, arguments); };
    Firebase.prototype.setUserId = function (userId) { return cordova(this, "setUserId", {}, arguments); };
    Firebase.prototype.setUserProperty = function (name, value) { return cordova(this, "setUserProperty", {}, arguments); };
    Firebase.prototype.fetch = function (cacheExpirationSeconds) { return cordova(this, "fetch", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    Firebase.prototype.activateFetched = function () { return cordova(this, "activateFetched", {}, arguments); };
    Firebase.prototype.getValue = function (key, namespace) { return cordova(this, "getValue", { "successIndex": 2, "errorIndex": 3 }, arguments); };
    Firebase.prototype.getByteArray = function (key, namespace) { return cordova(this, "getByteArray", { "platforms": ["Android"] }, arguments); };
    Firebase.prototype.getInfo = function () { return cordova(this, "getInfo", { "platforms": ["Android"] }, arguments); };
    Firebase.prototype.setConfigSettings = function (settings) { return cordova(this, "setConfigSettings", { "platforms": ["Android"] }, arguments); };
    Firebase.prototype.setDefaults = function (defaults, namespace) { return cordova(this, "setDefaults", { "platforms": ["Android"] }, arguments); };
    Firebase.prototype.startTrace = function (trace) { return cordova(this, "startTrace", {}, arguments); };
    Firebase.prototype.incrementCounter = function (trace, counter) { return cordova(this, "incrementCounter", {}, arguments); };
    Firebase.prototype.stopTrace = function (trace) { return cordova(this, "stopTrace", {}, arguments); };
    Firebase.prototype.setAnalyticsCollectionEnabled = function (enabled) { return cordova(this, "setAnalyticsCollectionEnabled", {}, arguments); };
    Firebase.prototype.setCrashlyticsUserId = function (userId) { return cordova(this, "setCrashlyticsUserId", {}, arguments); };
    Firebase.prototype.verifyPhoneNumber = function (phoneNumber, timeoutDuration) {
        if (timeoutDuration === void 0) { timeoutDuration = 0; }
        return cordova(this, "verifyPhoneNumber", { "platforms": ["Android", "iOS"], "successIndex": 2, "errorIndex": 3 }, arguments);
    };
    Firebase.prototype.clearAllNotifications = function () { return cordova(this, "clearAllNotifications", { "platforms": ["Android"] }, arguments); };
    Firebase.pluginName = "Firebase";
    Firebase.plugin = "cordova-plugin-firebase";
    Firebase.pluginRef = "FirebasePlugin";
    Firebase.repo = "https://github.com/arnesson/cordova-plugin-firebase";
    Firebase.platforms = ["Android", "iOS"];
    Firebase.decorators = [
        { type: Injectable }
    ];
    return Firebase;
}(AwesomeCordovaNativePlugin));
export { Firebase };
//# sourceMappingURL=data:application/json;base64,