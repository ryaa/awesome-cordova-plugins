import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import * as i0 from "@angular/core";
var ActionSheet = /** @class */ (function (_super) {
    __extends(ActionSheet, _super);
    function ActionSheet() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * Convenience property to select an Android theme value
         */
        _this.ANDROID_THEMES = {
            THEME_TRADITIONAL: 1,
            THEME_HOLO_DARK: 2,
            THEME_HOLO_LIGHT: 3,
            THEME_DEVICE_DEFAULT_DARK: 4,
            THEME_DEVICE_DEFAULT_LIGHT: 5,
        };
        return _this;
    }
    ActionSheet.prototype.show = function (options) { return cordova(this, "show", {}, arguments); };
    ActionSheet.prototype.hide = function (options) { return cordova(this, "hide", {}, arguments); };
    ActionSheet.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ActionSheet, deps: null, target: i0.ɵɵFactoryTarget.Injectable });
    ActionSheet.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ActionSheet });
    ActionSheet.pluginName = "ActionSheet";
    ActionSheet.plugin = "cordova-plugin-actionsheet";
    ActionSheet.pluginRef = "plugins.actionsheet";
    ActionSheet.repo = "https://github.com/EddyVerbruggen/cordova-plugin-actionsheet";
    ActionSheet.platforms = ["Android", "Browser", "iOS", "Windows", "Windows Phone 8"];
    ActionSheet = __decorate([], ActionSheet);
    return ActionSheet;
}(AwesomeCordovaNativePlugin));
export { ActionSheet };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ActionSheet, decorators: [{
            type: Injectable
        }], propDecorators: { show: [], hide: [] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvYWN0aW9uLXNoZWV0L25neC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLHVDQUErQyxNQUFNLCtCQUErQixDQUFDOzs7SUFnRzNELCtCQUEwQjs7O1FBQ3pEOztXQUVHO1FBQ0gsb0JBQWMsR0FNVjtZQUNGLGlCQUFpQixFQUFFLENBQUM7WUFDcEIsZUFBZSxFQUFFLENBQUM7WUFDbEIsZ0JBQWdCLEVBQUUsQ0FBQztZQUNuQix5QkFBeUIsRUFBRSxDQUFDO1lBQzVCLDBCQUEwQixFQUFFLENBQUM7U0FDOUIsQ0FBQzs7O0lBVUYsMEJBQUksYUFBQyxPQUE0QjtJQVdqQywwQkFBSSxhQUFDLE9BQTRCOzZHQXJDdEIsV0FBVztpSEFBWCxXQUFXOzs7Ozs7SUFBWCxXQUFXLGtCQUFYLFdBQVc7c0JBakd4QjtFQWlHaUMsMEJBQTBCO1NBQTlDLFdBQVc7NEZBQVgsV0FBVztrQkFEdkIsVUFBVTs4QkEyQlQsSUFBSSxNQVdKLElBQUkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb3Jkb3ZhLCBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL2NvcmUnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEFjdGlvblNoZWV0T3B0aW9ucyB7XG4gIC8qKlxuICAgKiBUaGUgbGFiZWxzIGZvciB0aGUgYnV0dG9ucy4gVXNlcyB0aGUgaW5kZXggeFxuICAgKi9cbiAgYnV0dG9uTGFiZWxzOiBzdHJpbmdbXTtcblxuICAvKipcbiAgICogVGhlIHRpdGxlIGZvciB0aGUgYWN0aW9uc2hlZXRcbiAgICovXG4gIHRpdGxlPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgc3VidGl0bGUgZm9yIHRoZSBhY3Rpb25zaGVldCAoSU9TIG9ubHkpXG4gICAqL1xuICBzdWJ0aXRsZT86IHN0cmluZztcblxuICAvKipcbiAgICogVGhlbWUgdG8gYmUgdXNlZCBvbiBBbmRyb2lkXG4gICAqL1xuICBhbmRyb2lkVGhlbWU/OiAxIHwgMiB8IDMgfCA0IHwgNTtcblxuICAvKipcbiAgICogRW5hYmxlIGEgY2FuY2VsIG9uIEFuZHJvaWRcbiAgICovXG4gIGFuZHJvaWRFbmFibGVDYW5jZWxCdXR0b24/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBFbmFibGUgYSBjYW5jZWwgb24gV2luZG93cyBQaG9uZVxuICAgKi9cbiAgd2lucGhvbmVFbmFibGVDYW5jZWxCdXR0b24/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBBZGQgYSBjYW5jZWwgYnV0dG9uIHdpdGggdGV4dFxuICAgKi9cbiAgYWRkQ2FuY2VsQnV0dG9uV2l0aExhYmVsPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBBZGQgYSBkZXN0cnVjdGl2ZSBidXR0b24gd2l0aCB0ZXh0XG4gICAqL1xuICBhZGREZXN0cnVjdGl2ZUJ1dHRvbldpdGhMYWJlbD86IHN0cmluZztcblxuICAvKipcbiAgICogT24gYW4gaVBhZCwgc2V0IHRoZSBYLFkgcG9zaXRpb25cbiAgICovXG4gIHBvc2l0aW9uPzogW251bWJlciwgbnVtYmVyXTtcblxuICAvKipcbiAgICogQ2hvb3NlIGlmIGRlc3RydWN0aXZlIGJ1dHRvbiB3aWxsIGJlIHRoZSBsYXN0XG4gICAqL1xuICBkZXN0cnVjdGl2ZUJ1dHRvbkxhc3Q/OiBib29sZWFuO1xufVxuXG4vKipcbiAqIEBuYW1lIEFjdGlvbiBTaGVldFxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgQWN0aW9uU2hlZXQgcGx1Z2luIHNob3dzIGEgbmF0aXZlIGxpc3Qgb2Ygb3B0aW9ucyB0aGUgdXNlciBjYW4gY2hvb3NlIGZyb20uXG4gKlxuICogUmVxdWlyZXMgQ29yZG92YSBwbHVnaW46IGBjb3Jkb3ZhLXBsdWdpbi1hY3Rpb25zaGVldGAuIEZvciBtb3JlIGluZm8sIHBsZWFzZSBzZWUgdGhlIFtBY3Rpb25TaGVldCBwbHVnaW4gZG9jc10oaHR0cHM6Ly9naXRodWIuY29tL0VkZHlWZXJicnVnZ2VuL2NvcmRvdmEtcGx1Z2luLWFjdGlvbnNoZWV0KS5cbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgQWN0aW9uU2hlZXQsIEFjdGlvblNoZWV0T3B0aW9ucyB9IGZyb20gJ0Bhd2Vzb21lLWNvcmRvdmEtcGx1Z2lucy9hY3Rpb24tc2hlZXQvbmd4JztcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGFjdGlvblNoZWV0OiBBY3Rpb25TaGVldCkgeyB9XG4gKlxuICogLi4uXG4gKlxuICpcbiAqIGxldCBidXR0b25MYWJlbHMgPSBbJ1NoYXJlIHZpYSBGYWNlYm9vaycsICdTaGFyZSB2aWEgVHdpdHRlciddO1xuICpcbiAqIGNvbnN0IG9wdGlvbnM6IEFjdGlvblNoZWV0T3B0aW9ucyA9IHtcbiAqICAgdGl0bGU6ICdXaGF0IGRvIHlvdSB3YW50IHdpdGggdGhpcyBpbWFnZT8nLFxuICogICBzdWJ0aXRsZTogJ0Nob29zZSBhbiBhY3Rpb24nLFxuICogICBidXR0b25MYWJlbHM6IGJ1dHRvbkxhYmVscyxcbiAqICAgYWRkQ2FuY2VsQnV0dG9uV2l0aExhYmVsOiAnQ2FuY2VsJyxcbiAqICAgYWRkRGVzdHJ1Y3RpdmVCdXR0b25XaXRoTGFiZWw6ICdEZWxldGUnLFxuICogICBhbmRyb2lkVGhlbWU6IHRoaXMuYWN0aW9uU2hlZXQuQU5EUk9JRF9USEVNRVMuVEhFTUVfSE9MT19EQVJLLFxuICogICBkZXN0cnVjdGl2ZUJ1dHRvbkxhc3Q6IHRydWVcbiAqIH1cbiAqXG4gKiB0aGlzLmFjdGlvblNoZWV0LnNob3cob3B0aW9ucykudGhlbigoYnV0dG9uSW5kZXg6IG51bWJlcikgPT4ge1xuICogICBjb25zb2xlLmxvZygnQnV0dG9uIHByZXNzZWQ6ICcgKyBidXR0b25JbmRleCk7XG4gKiB9KTtcbiAqIGBgYFxuICogQGludGVyZmFjZXNcbiAqIEFjdGlvblNoZWV0T3B0aW9uc1xuICovXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ0FjdGlvblNoZWV0JyxcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tYWN0aW9uc2hlZXQnLFxuICBwbHVnaW5SZWY6ICdwbHVnaW5zLmFjdGlvbnNoZWV0JyxcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9FZGR5VmVyYnJ1Z2dlbi9jb3Jkb3ZhLXBsdWdpbi1hY3Rpb25zaGVldCcsXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ0Jyb3dzZXInLCAnaU9TJywgJ1dpbmRvd3MnLCAnV2luZG93cyBQaG9uZSA4J10sXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEFjdGlvblNoZWV0IGV4dGVuZHMgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4ge1xuICAvKipcbiAgICogQ29udmVuaWVuY2UgcHJvcGVydHkgdG8gc2VsZWN0IGFuIEFuZHJvaWQgdGhlbWUgdmFsdWVcbiAgICovXG4gIEFORFJPSURfVEhFTUVTOiB7XG4gICAgVEhFTUVfVFJBRElUSU9OQUw6IG51bWJlcjtcbiAgICBUSEVNRV9IT0xPX0RBUks6IG51bWJlcjtcbiAgICBUSEVNRV9IT0xPX0xJR0hUOiBudW1iZXI7XG4gICAgVEhFTUVfREVWSUNFX0RFRkFVTFRfREFSSzogbnVtYmVyO1xuICAgIFRIRU1FX0RFVklDRV9ERUZBVUxUX0xJR0hUOiBudW1iZXI7XG4gIH0gPSB7XG4gICAgVEhFTUVfVFJBRElUSU9OQUw6IDEsXG4gICAgVEhFTUVfSE9MT19EQVJLOiAyLFxuICAgIFRIRU1FX0hPTE9fTElHSFQ6IDMsXG4gICAgVEhFTUVfREVWSUNFX0RFRkFVTFRfREFSSzogNCxcbiAgICBUSEVNRV9ERVZJQ0VfREVGQVVMVF9MSUdIVDogNSxcbiAgfTtcblxuICAvKipcbiAgICogU2hvdyBhIG5hdGl2ZSBBY3Rpb25TaGVldCBjb21wb25lbnQuIFNlZSBiZWxvdyBmb3Igb3B0aW9ucy5cbiAgICpcbiAgICogQHBhcmFtIHtBY3Rpb25TaGVldE9wdGlvbnN9IFtvcHRpb25zXSBPcHRpb25zIFNlZSB0YWJsZSBiZWxvd1xuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdGhlIGluZGV4IG9mIHRoZVxuICAgKiAgIGJ1dHRvbiBwcmVzc2VkICgxIGJhc2VkLCBzbyAxLCAyLCAzLCBldGMuKVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBzaG93KG9wdGlvbnM/OiBBY3Rpb25TaGVldE9wdGlvbnMpOiBQcm9taXNlPG51bWJlcj4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBQcm9ncmFtbWF0aWNhbGx5IGhpZGUgdGhlIG5hdGl2ZSBBY3Rpb25TaGVldFxuICAgKlxuICAgKiBAcGFyYW0gIHtBY3Rpb25TaGVldE9wdGlvbnN9IFtvcHRpb25zXSBPcHRpb25zIFNlZSB0YWJsZSBiZWxvd1xuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gdGhlIGFjdGlvbnNoZWV0IGlzIGNsb3NlZFxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBoaWRlKG9wdGlvbnM/OiBBY3Rpb25TaGVldE9wdGlvbnMpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxufVxuIl19