var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordovaInstance, cordova, checkAvailability } from '@awesome-cordova-plugins/core';
import { Observable } from 'rxjs';
var PushapePushOriginal = /** @class */ (function (_super) {
    __extends(PushapePushOriginal, _super);
    function PushapePushOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Init push notifications
     *
     * @param options {PushapeOptions}
     * @returns {PushObject}
     */
    PushapePushOriginal.prototype.init = function (options) {
        return new PushObject(options);
    };
    PushapePushOriginal.prototype.hasPermission = function () { return cordova(this, "hasPermission", {}, arguments); };
    PushapePushOriginal.prototype.createChannel = function (channel) { return cordova(this, "createChannel", { "callbackOrder": "reverse" }, arguments); };
    PushapePushOriginal.prototype.deleteChannel = function (id) { return cordova(this, "deleteChannel", { "callbackOrder": "reverse" }, arguments); };
    PushapePushOriginal.prototype.listChannels = function () { return cordova(this, "listChannels", {}, arguments); };
    PushapePushOriginal.pluginName = "PushapePush";
    PushapePushOriginal.plugin = "pushape-cordova-push";
    PushapePushOriginal.pluginRef = "PushNotification";
    PushapePushOriginal.repo = "https://github.com/gluelabs/pushape-cordova-push";
    PushapePushOriginal.install = "ionic cordova plugin add pushape-cordova-push";
    PushapePushOriginal.platforms = ["Android", "Browser", "iOS"];
    return PushapePushOriginal;
}(AwesomeCordovaNativePlugin));
var PushapePush = new PushapePushOriginal();
export { PushapePush };
var PushObject = /** @class */ (function () {
    function PushObject(options) {
        if (checkAvailability('PushNotification', 'init', 'PushNotification') === true) {
            if (typeof window !== 'undefined') {
                this._objectInstance = window.PushNotification.init(options);
            }
        }
    }
    PushObject.prototype.on = function (event) { return cordovaInstance(this, "on", { "observable": true, "clearFunction": "off", "clearWithArgs": true }, arguments); };
    PushObject.prototype.unregister = function () { return cordovaInstance(this, "unregister", {}, arguments); };
    PushObject.prototype.setApplicationIconBadgeNumber = function (count) { return cordovaInstance(this, "setApplicationIconBadgeNumber", { "callbackOrder": "reverse" }, arguments); };
    PushObject.prototype.getApplicationIconBadgeNumber = function () { return cordovaInstance(this, "getApplicationIconBadgeNumber", {}, arguments); };
    PushObject.prototype.finish = function (id) { return cordovaInstance(this, "finish", { "callbackOrder": "reverse" }, arguments); };
    PushObject.prototype.clearAllNotifications = function () { return cordovaInstance(this, "clearAllNotifications", {}, arguments); };
    PushObject.prototype.subscribe = function (topic) { return cordovaInstance(this, "subscribe", {}, arguments); };
    PushObject.prototype.unsubscribe = function (topic) { return cordovaInstance(this, "unsubscribe", {}, arguments); };
    PushObject.pluginName = "PushapePush";
    PushObject.plugin = "pushape-cordova-push";
    PushObject.pluginRef = "PushNotification";
    return PushObject;
}());
export { PushObject };
//# sourceMappingURL=data:application/json;base64,