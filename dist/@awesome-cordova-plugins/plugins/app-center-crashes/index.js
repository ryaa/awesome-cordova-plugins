var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var AppCenterCrashesOriginal = /** @class */ (function (_super) {
    __extends(AppCenterCrashesOriginal, _super);
    function AppCenterCrashesOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AppCenterCrashesOriginal.prototype.generateTestCrash = function () { return cordova(this, "generateTestCrash", {}, arguments); };
    AppCenterCrashesOriginal.prototype.hasCrashedInLastSession = function () { return cordova(this, "hasCrashedInLastSession", {}, arguments); };
    AppCenterCrashesOriginal.prototype.lastSessionCrashReport = function () { return cordova(this, "lastSessionCrashReport", {}, arguments); };
    AppCenterCrashesOriginal.prototype.isEnabled = function () { return cordova(this, "isEnabled", {}, arguments); };
    AppCenterCrashesOriginal.prototype.setEnabled = function (shouldEnable) { return cordova(this, "setEnabled", {}, arguments); };
    AppCenterCrashesOriginal.pluginName = "AppCenterCrashes";
    AppCenterCrashesOriginal.plugin = "cordova-plugin-appcenter-crashes";
    AppCenterCrashesOriginal.pluginRef = "AppCenter.Crashes";
    AppCenterCrashesOriginal.repo = "https://github.com/Microsoft/appcenter-sdk-cordova/tree/master/cordova-plugin-appcenter-crashes";
    AppCenterCrashesOriginal.platforms = ["Android", "iOS"];
    return AppCenterCrashesOriginal;
}(AwesomeCordovaNativePlugin));
var AppCenterCrashes = new AppCenterCrashesOriginal();
export { AppCenterCrashes };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvYXBwLWNlbnRlci1jcmFzaGVzL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFDQSxPQUFPLHVDQUErQyxNQUFNLCtCQUErQixDQUFDOztJQWtFdEQsb0NBQTBCOzs7O0lBUTlELDRDQUFpQjtJQVFqQixrREFBdUI7SUFVdkIsaURBQXNCO0lBVXRCLG9DQUFTO0lBV1QscUNBQVUsYUFBQyxZQUFxQjs7Ozs7OzJCQWxIbEM7RUFtRXNDLDBCQUEwQjtTQUFuRCxnQkFBZ0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb3Jkb3ZhLCBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL2NvcmUnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEFwcENlbnRlckNyYXNoUmVwb3J0IHtcbiAgaWQ6IHN0cmluZztcbiAgZGV2aWNlOiBBcHBDZW50ZXJDcmFzaFJlcG9ydERldmljZTtcbiAgYXBwU3RhcnRUaW1lOiBudW1iZXI7XG4gIGFwcEVycm9yVGltZTogbnVtYmVyO1xuICBzaWduYWw6IHN0cmluZztcbiAgYXBwUHJvY2Vzc0lkZW50aWZpZXI6IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBcHBDZW50ZXJDcmFzaFJlcG9ydERldmljZSB7XG4gIG9lbV9uYW1lOiBzdHJpbmc7XG4gIG9zX25hbWU6IHN0cmluZztcbiAgYXBwX3ZlcnNpb246IHN0cmluZztcbiAgdGltZV96b25lX29mZnNldDogbnVtYmVyO1xuICBjYXJyaWVyX25hbWU6IHN0cmluZztcbiAgc2NyZWVuX3NpemU6IHN0cmluZztcbiAgbG9jYWxlOiBzdHJpbmc7XG4gIHNka192ZXJzaW9uOiBzdHJpbmc7XG4gIGNhcnJpZXJfY291bnRyeTogc3RyaW5nO1xuICBvc19idWlsZDogc3RyaW5nO1xuICBhcHBfbmFtZXNwYWNlOiBzdHJpbmc7XG4gIG9zX3ZlcnNpb246IHN0cmluZztcbiAgc2RrX25hbWU6IHN0cmluZztcbiAgbW9kZWw6IHN0cmluZztcbiAgYXBwX2J1aWxkOiBzdHJpbmc7XG59XG5cbi8qKlxuICogQG5hbWUgQXBwIENlbnRlciBDcmFzaGVzXG4gKiBAZGVzY3JpcHRpb25cbiAqIEFwcCBDZW50ZXIgQW5hbHl0aWNzIGhlbHBzIHlvdSB1bmRlcnN0YW5kIHVzZXIgYmVoYXZpb3IgYW5kIGN1c3RvbWVyIGVuZ2FnZW1lbnQgdG8gaW1wcm92ZSB5b3VyIGFwcC5cbiAqIFRoZSBTREsgYXV0b21hdGljYWxseSBjYXB0dXJlcyBzZXNzaW9uIGNvdW50IGFuZCBkZXZpY2UgcHJvcGVydGllcyBsaWtlIG1vZGVsLCBPUyB2ZXJzaW9uLCBldGMuXG4gKiBZb3UgY2FuIGRlZmluZSB5b3VyIG93biBjdXN0b20gZXZlbnRzIHRvIG1lYXN1cmUgdGhpbmdzIHRoYXQgbWF0dGVyIHRvIHlvdS5cbiAqIEFsbCB0aGUgaW5mb3JtYXRpb24gY2FwdHVyZWQgaXMgYXZhaWxhYmxlIGluIHRoZSBBcHAgQ2VudGVyIHBvcnRhbCBmb3IgeW91IHRvIGFuYWx5emUgdGhlIGRhdGEuXG4gKlxuICogRm9yIG1vcmUgaW5mbywgcGxlYXNlIHNlZSBodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9lbi11cy9hcHBjZW50ZXIvc2RrL2NyYXNoZXMvY29yZG92YVxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBBcHBDZW50ZXJDcmFzaGVzIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL2FwcC1jZW50ZXItY3Jhc2hlcy9uZ3gnO1xuICpcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIEFwcENlbnRlckNyYXNoZXM6IEFwcENlbnRlckNyYXNoZXMpIHsgfVxuICpcbiAqIC4uLlxuICpcbiAqIHRoaXMuQXBwQ2VudGVyQ3Jhc2hlcy5zZXRFbmFibGVkKHRydWUpLnRoZW4oKCkgPT4ge1xuICogICAgdGhpcy5BcHBDZW50ZXJDcmFzaGVzLmxhc3RTZXNzaW9uQ3Jhc2hSZXBvcnQoKS50aGVuKHJlcG9ydCA9PiB7XG4gKiAgICAgICAgY29uc29sZS5sb2coJ0NyYXNoIHJlcG9ydCcsIHJlcG9ydCk7XG4gKiAgICB9KTtcbiAqIH0pO1xuICpcbiAqIGBgYFxuICogQGludGVyZmFjZXNcbiAqIEFwcENlbnRlckNyYXNoUmVwb3J0XG4gKiBBcHBDZW50ZXJDcmFzaFJlcG9ydERldmljZVxuICovXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ0FwcENlbnRlckNyYXNoZXMnLFxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1hcHBjZW50ZXItY3Jhc2hlcycsXG4gIHBsdWdpblJlZjogJ0FwcENlbnRlci5DcmFzaGVzJyxcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9NaWNyb3NvZnQvYXBwY2VudGVyLXNkay1jb3Jkb3ZhL3RyZWUvbWFzdGVyL2NvcmRvdmEtcGx1Z2luLWFwcGNlbnRlci1jcmFzaGVzJyxcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJ10sXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEFwcENlbnRlckNyYXNoZXMgZXh0ZW5kcyBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiB7XG4gIC8qKlxuICAgKiBBcHAgQ2VudGVyIENyYXNoZXMgcHJvdmlkZXMgeW91IHdpdGggYW4gQVBJIHRvIGdlbmVyYXRlIGEgdGVzdCBjcmFzaCBmb3IgZWFzeSB0ZXN0aW5nIG9mIHRoZSBTREsuXG4gICAqIFRoaXMgQVBJIGNhbiBvbmx5IGJlIHVzZWQgaW4gdGVzdC9iZXRhIGFwcHMgYW5kIHdvbid0IGRvIGFueXRoaW5nIGluIHByb2R1Y3Rpb24gYXBwcy5cbiAgICpcbiAgICogQHJldHVybnMgdm9pZFxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBnZW5lcmF0ZVRlc3RDcmFzaCgpOiB2b2lkIHt9XG5cbiAgLyoqXG4gICAqIEF0IGFueSB0aW1lIGFmdGVyIHN0YXJ0aW5nIHRoZSBTREssIHlvdSBjYW4gY2hlY2sgaWYgdGhlIGFwcCBjcmFzaGVkIGluIHRoZSBwcmV2aW91cyBsYXVuY2hcbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2U8Ym9vbGVhbj59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGhhc0NyYXNoZWRJbkxhc3RTZXNzaW9uKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRhaWxzIGFib3V0IHRoZSBsYXN0IGNyYXNoXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPEFwcENlbnRlckNyYXNoUmVwb3J0Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgbGFzdFNlc3Npb25DcmFzaFJlcG9ydCgpOiBQcm9taXNlPEFwcENlbnRlckNyYXNoUmVwb3J0PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIEFwcCBDZW50ZXIgQ3Jhc2hlcyBpcyBlbmFibGVkXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGJvb2xlYW4+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBpc0VuYWJsZWQoKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIEVuYWJsZSBvciBkaXNhYmxlIEFwcCBDZW50ZXIgQ3Jhc2hlcyBhdCBydW50aW1lXG4gICAqXG4gICAqIEBwYXJhbSAge2Jvb2xlYW59IHNob3VsZEVuYWJsZSBTZXQgdmFsdWVcbiAgICogQHJldHVybnMge1Byb21pc2U8dm9pZD59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHNldEVuYWJsZWQoc2hvdWxkRW5hYmxlOiBib29sZWFuKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuO1xuICB9XG59XG4iXX0=