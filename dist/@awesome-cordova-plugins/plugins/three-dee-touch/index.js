var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordovaFunctionOverride, cordova } from '@awesome-cordova-plugins/core';
import { Observable } from 'rxjs';
var ThreeDeeTouchOriginal = /** @class */ (function (_super) {
    __extends(ThreeDeeTouchOriginal, _super);
    function ThreeDeeTouchOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ThreeDeeTouchOriginal.prototype.isAvailable = function () { return cordova(this, "isAvailable", {}, arguments); };
    ThreeDeeTouchOriginal.prototype.watchForceTouches = function () { return cordova(this, "watchForceTouches", { "observable": true }, arguments); };
    ThreeDeeTouchOriginal.prototype.configureQuickActions = function (quickActions) { return cordova(this, "configureQuickActions", { "sync": true }, arguments); };
    ThreeDeeTouchOriginal.prototype.onHomeIconPressed = function () { return cordovaFunctionOverride(this, "onHomeIconPressed", {}, arguments); };
    ThreeDeeTouchOriginal.prototype.enableLinkPreview = function () { return cordova(this, "enableLinkPreview", { "sync": true }, arguments); };
    ThreeDeeTouchOriginal.prototype.disableLinkPreview = function () { return cordova(this, "disableLinkPreview", { "sync": true }, arguments); };
    ThreeDeeTouchOriginal.pluginName = "ThreeDeeTouch";
    ThreeDeeTouchOriginal.plugin = "cordova-plugin-3dtouch";
    ThreeDeeTouchOriginal.pluginRef = "ThreeDeeTouch";
    ThreeDeeTouchOriginal.repo = "https://github.com/EddyVerbruggen/cordova-plugin-3dtouch";
    ThreeDeeTouchOriginal.platforms = ["iOS"];
    return ThreeDeeTouchOriginal;
}(AwesomeCordovaNativePlugin));
var ThreeDeeTouch = new ThreeDeeTouchOriginal();
export { ThreeDeeTouch };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvdGhyZWUtZGVlLXRvdWNoL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUNBLE9BQU8sZ0VBQXdFLE1BQU0sK0JBQStCLENBQUM7QUFDckgsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQzs7SUE4SEMsaUNBQTBCOzs7O0lBTzNELG1DQUFXO0lBWVgseUNBQWlCO0lBaUJqQiw2Q0FBcUIsYUFBQyxZQUF3QztJQVE5RCx5Q0FBaUI7SUFXakIseUNBQWlCO0lBUWpCLDBDQUFrQjs7Ozs7O3dCQS9McEI7RUFnSW1DLDBCQUEwQjtTQUFoRCxhQUFhIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29yZG92YSwgQ29yZG92YUZ1bmN0aW9uT3ZlcnJpZGUsIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVGhyZWVEZWVUb3VjaFF1aWNrQWN0aW9uIHtcbiAgLyoqXG4gICAqIFR5cGUgdGhhdCBjYW4gYmUgdXNlZCBpbiB0aGUgb25Ib21lSWNvblByZXNzZWQgY2FsbGJhY2tcbiAgICovXG4gIHR5cGU/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRpdGxlXG4gICAqL1xuICB0aXRsZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBTdWJ0aXRsZVxuICAgKi9cbiAgc3VidGl0bGU/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEljb24gdHlwZS4gQ2FzZSBpbnNlbnNpdGl2ZVxuICAgKi9cbiAgaWNvblR5cGU/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEljb24gdGVtcGxhdGVcbiAgICovXG4gIGljb25UZW1wbGF0ZT86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBUaHJlZURlZVRvdWNoRm9yY2VUb3VjaCB7XG4gIC8qKlxuICAgKiBUb3VjaCBmb3JjZVxuICAgKi9cbiAgZm9yY2U6IG51bWJlcjtcblxuICAvKipcbiAgICogVGltZXN0YW1wIG9mIGFjdGlvblxuICAgKi9cbiAgdGltZXN0YW1wOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFggY29vcmRpbmF0ZSBvZiBhY3Rpb25cbiAgICovXG4gIHg6IG51bWJlcjtcblxuICAvKipcbiAgICogWSBjb29yZGluYXRlIG9mIGFjdGlvblxuICAgKi9cbiAgeTogbnVtYmVyO1xufVxuXG4vKipcbiAqIEBuYW1lIDNEIFRvdWNoXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSAzRCBUb3VjaCBwbHVnaW4gYWRkcyAzRCBUb3VjaCBjYXBhYmlsaXRpZXMgdG8geW91ciBDb3Jkb3ZhIGFwcC5cbiAqXG4gKiBSZXF1aXJlcyBDb3Jkb3ZhIHBsdWdpbjogYGNvcmRvdmEtcGx1Z2luLTNkdG91Y2hgLiBGb3IgbW9yZSBpbmZvLCBwbGVhc2Ugc2VlIHRoZSBbM0QgVG91Y2ggcGx1Z2luIGRvY3NdKGh0dHBzOi8vZ2l0aHViLmNvbS9FZGR5VmVyYnJ1Z2dlbi9jb3Jkb3ZhLXBsdWdpbi0zZHRvdWNoKS5cbiAqIEB1c2FnZVxuICogUGxlYXNlIGRvIHJlZmVyIHRvIHRoZSBvcmlnaW5hbCBwbHVnaW4ncyByZXBvIGZvciBkZXRhaWxlZCB1c2FnZS4gVGhlIHVzYWdlIGV4YW1wbGUgaGVyZSBtaWdodCBub3QgYmUgc3VmZmljaWVudC5cbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IFRocmVlRGVlVG91Y2gsIFRocmVlRGVlVG91Y2hRdWlja0FjdGlvbiwgVGhyZWVEZWVUb3VjaEZvcmNlVG91Y2ggfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvdGhyZWUtZGVlLXRvdWNoL25neCc7XG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSB0aHJlZURlZVRvdWNoOiBUaHJlZURlZVRvdWNoKSB7IH1cbiAqXG4gKiAuLi5cbiAqXG4gKiB0aGlzLnRocmVlRGVlVG91Y2guaXNBdmFpbGFibGUoKS50aGVuKGlzQXZhaWxhYmxlID0+IGNvbnNvbGUubG9nKCczRCBUb3VjaCBhdmFpbGFibGU/ICcgKyBpc0F2YWlsYWJsZSkpO1xuICpcbiAqIHRoaXMudGhyZWVEZWVUb3VjaC53YXRjaEZvcmNlVG91Y2hlcygpXG4gKiAgIC5zdWJzY3JpYmUoXG4gKiAgICAgKGRhdGE6IFRocmVlRGVlVG91Y2hGb3JjZVRvdWNoKSA9PiB7XG4gKiAgICAgICBjb25zb2xlLmxvZygnRm9yY2UgdG91Y2ggJScgKyBkYXRhLmZvcmNlKTtcbiAqICAgICAgIGNvbnNvbGUubG9nKCdGb3JjZSB0b3VjaCB0aW1lc3RhbXA6ICcgKyBkYXRhLnRpbWVzdGFtcCk7XG4gKiAgICAgICBjb25zb2xlLmxvZygnRm9yY2UgdG91Y2ggeDogJyArIGRhdGEueCk7XG4gKiAgICAgICBjb25zb2xlLmxvZygnRm9yY2UgdG91Y2ggeTogJyArIGRhdGEueSk7XG4gKiAgICAgfVxuICogICApO1xuICpcbiAqXG4gKiBsZXQgYWN0aW9uczogVGhyZWVEZWVUb3VjaFF1aWNrQWN0aW9uW10gPSBbXG4gKiAgIHtcbiAqICAgICB0eXBlOiAnY2hlY2tpbicsXG4gKiAgICAgdGl0bGU6ICdDaGVjayBpbicsXG4gKiAgICAgc3VidGl0bGU6ICdRdWlja2x5IGNoZWNrIGluJyxcbiAqICAgICBpY29uVHlwZTogJ0NvbXBvc2UnXG4gKiAgIH0sXG4gKiAgIHtcbiAqICAgICB0eXBlOiAnc2hhcmUnLFxuICogICAgIHRpdGxlOiAnU2hhcmUnLFxuICogICAgIHN1YnRpdGxlOiAnU2hhcmUgbGlrZSB5b3UgY2FyZScsXG4gKiAgICAgaWNvblR5cGU6ICdTaGFyZSdcbiAqICAgfSxcbiAqICAge1xuICogICAgIHR5cGU6ICdzZWFyY2gnLFxuICogICAgIHRpdGxlOiAnU2VhcmNoJyxcbiAqICAgICBpY29uVHlwZTogJ1NlYXJjaCdcbiAqICAgfSxcbiAqICAge1xuICogICAgIHRpdGxlOiAnU2hvdyBmYXZvcml0ZXMnLFxuICogICAgIGljb25UZW1wbGF0ZTogJ0hlYXJ0VGVtcGxhdGUnXG4gKiAgIH1cbiAqIF07XG4gKlxuICogdGhpcy50aHJlZURlZVRvdWNoLmNvbmZpZ3VyZVF1aWNrQWN0aW9ucyhhY3Rpb25zKTtcbiAqXG4gKiB0aGlzLnRocmVlRGVlVG91Y2gub25Ib21lSWNvblByZXNzZWQoKS5zdWJzY3JpYmUoXG4gKiAgKHBheWxvYWQpID0+IHtcbiAqICAgIC8vIHJldHVybnMgYW4gb2JqZWN0IHRoYXQgaXMgdGhlIGJ1dHRvbiB5b3UgcHJlc2VkXG4gKiAgICBjb25zb2xlLmxvZygnUHJlc3NlZCB0aGUgJHtwYXlsb2FkLnRpdGxlfSBidXR0b24nKVxuICogICAgY29uc29sZS5sb2cocGF5bG9hZC50eXBlKVxuICpcbiAqICB9XG4gKiApXG4gKiBgYGBcbiAqIEBpbnRlcmZhY2VzXG4gKiBUaHJlZURlZVRvdWNoUXVpY2tBY3Rpb25cbiAqIFRocmVlRGVlVG91Y2hGb3JjZVRvdWNoXG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnVGhyZWVEZWVUb3VjaCcsXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLTNkdG91Y2gnLFxuICBwbHVnaW5SZWY6ICdUaHJlZURlZVRvdWNoJyxcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9FZGR5VmVyYnJ1Z2dlbi9jb3Jkb3ZhLXBsdWdpbi0zZHRvdWNoJyxcbiAgcGxhdGZvcm1zOiBbJ2lPUyddLFxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBUaHJlZURlZVRvdWNoIGV4dGVuZHMgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4ge1xuICAvKipcbiAgICogWW91IG5lZWQgYW4gaVBob25lIDZTIG9yIHNvbWUgZnV0dXJlIHRlY2ggdG8gdXNlIHRoZSBmZWF0dXJlcyBvZiB0aGlzIHBsdWdpbiwgc28geW91IGNhbiBjaGVjayBhdCBydW50aW1lIGlmIHRoZSB1c2VyJ3MgZGV2aWNlIGlzIHN1cHBvcnRlZC5cbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2U8Ym9vbGVhbj59IHJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCBhIGJvb2xlYW4gdGhhdCBpbmRpY2F0ZXMgd2hldGhlciB0aGUgcGx1Z2luIGlzIGF2YWlsYWJsZSBvciBub3RcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgaXNBdmFpbGFibGUoKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFlvdSBjYW4gZ2V0IGEgbm90aWZpY2F0aW9uIHdoZW4gdGhlIHVzZXIgZm9yY2UgdG91Y2hlcyB0aGUgd2Vidmlldy4gVGhlIHBsdWdpbiBkZWZpbmVzIGEgRm9yY2UgVG91Y2ggd2hlbiBhdCBsZWFzdCA3NSUgb2YgdGhlIG1heGltdW0gZm9yY2UgaXMgYXBwbGllZCB0byB0aGUgc2NyZWVuLiBZb3VyIGFwcCB3aWxsIHJlY2VpdmUgdGhlIHggYW5kIHkgY29vcmRpbmF0ZXMsIHNvIHlvdSBoYXZlIHRvIGZpZ3VyZSBvdXQgd2hpY2ggVUkgZWxlbWVudCB3YXMgdG91Y2hlZC5cbiAgICpcbiAgICogQHJldHVybnMge09ic2VydmFibGU8VGhyZWVEZWVUb3VjaEZvcmNlVG91Y2g+fSBSZXR1cm5zIGFuIG9ic2VydmFibGUgdGhhdCBzZW5kcyBhIGBUaHJlZURlZVRvdWNoRm9yY2VUb3VjaGAgb2JqZWN0XG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgb2JzZXJ2YWJsZTogdHJ1ZSxcbiAgfSlcbiAgd2F0Y2hGb3JjZVRvdWNoZXMoKTogT2JzZXJ2YWJsZTxUaHJlZURlZVRvdWNoRm9yY2VUb3VjaD4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBzZXR1cCB0aGUgM0QtdG91Y2ggYWN0aW9ucywgdGFrZXMgYW4gYXJyYXkgb2Ygb2JqZWN0cyB3aXRoIHRoZSBmb2xsb3dpbmdcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgKG9wdGlvbmFsKSBBIHR5cGUgdGhhdCBjYW4gYmUgdXNlZCBgb25Ib21lSWNvblByZXNzZWRgIGNhbGxiYWNrXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0aXRsZSBUaXRsZSBmb3IgeW91ciBhY3Rpb25cbiAgICogQHBhcmFtIHtzdHJpbmd9IHN1YnRpdGxlIChvcHRpb25hbCkgQSBzaG9ydCBkZXNjcmlwdGlvbiBmb3IgeW91ciBhY3Rpb25cbiAgICogQHBhcmFtIHtzdHJpbmd9IGljb25UeXBlIChvcHRpb25hbCkgQ2hvb3NlIGJldHdlZW4gUHJvaGliaXQsIENvbnRhY3QsIEhvbWUsIE1hcmtMb2NhdGlvbiwgRmF2b3JpdGUsIExvdmUsIENsb3VkLCBJbnZpdGF0aW9uLCBDb25maXJtYXRpb24sIE1haWwsIE1lc3NhZ2UsIERhdGUsIFRpbWUsIENhcHR1cmVQaG90bywgQ2FwdHVyZVZpZGVvLCBUYXNrLCBUYXNrQ29tcGxldGVkLCBBbGFybSwgQm9va21hcmssIFNodWZmbGUsIEF1ZGlvLCBVcGRhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGljb25UZW1wbGF0ZSAob3B0aW9uYWwpIENhbiBiZSB1c2VkIHRvIHByb3ZpZGUgeW91ciBvd24gaWNvblxuICAgKiBAcGFyYW0gcXVpY2tBY3Rpb25zXG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgc3luYzogdHJ1ZSxcbiAgfSlcbiAgY29uZmlndXJlUXVpY2tBY3Rpb25zKHF1aWNrQWN0aW9uczogVGhyZWVEZWVUb3VjaFF1aWNrQWN0aW9uW10pOiB2b2lkIHt9XG5cbiAgLyoqXG4gICAqIFdoZW4gYSBob21lIGljb24gaXMgcHJlc3NlZCwgeW91ciBhcHAgbGF1bmNoZXMgYW5kIHRoaXMgSlMgY2FsbGJhY2sgaXMgaW52b2tlZC5cbiAgICpcbiAgICogQHJldHVybnMge09ic2VydmFibGU8YW55Pn0gcmV0dXJucyBhbiBvYnNlcnZhYmxlIHRoYXQgbm90aWZpZXMgeW91IHdoZW4gaGUgdXNlciBwcmVzc2VzIG9uIHRoZSBob21lIHNjcmVlbiBpY29uXG4gICAqL1xuICBAQ29yZG92YUZ1bmN0aW9uT3ZlcnJpZGUoKVxuICBvbkhvbWVJY29uUHJlc3NlZCgpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBFbmFibGUgTGluayBQcmV2aWV3LlxuICAgKiBVSVdlYlZpZXcgYW5kIFdLV2ViVmlldyAodGhlIHdlYnZpZXdzIHBvd2VyaW5nIENvcmRvdmEgYXBwcykgZG9uJ3QgYWxsb3cgdGhlIGZhbmN5IG5ldyBsaW5rIHByZXZpZXcgZmVhdHVyZSBvZiBpT1M5LlxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIHN5bmM6IHRydWUsXG4gIH0pXG4gIGVuYWJsZUxpbmtQcmV2aWV3KCk6IHZvaWQge31cblxuICAvKipcbiAgICogRGlzYWJsZWQgdGhlIGxpbmsgcHJldmlldyBmZWF0dXJlLCBpZiBlbmFibGVkLlxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIHN5bmM6IHRydWUsXG4gIH0pXG4gIGRpc2FibGVMaW5rUHJldmlldygpOiB2b2lkIHt9XG59XG4iXX0=