var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import { Observable } from 'rxjs';
var FirebaseAuthenticationOriginal = /** @class */ (function (_super) {
    __extends(FirebaseAuthenticationOriginal, _super);
    function FirebaseAuthenticationOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FirebaseAuthenticationOriginal.prototype.getCurrentUser = function () { return cordova(this, "getCurrentUser", { "sync": true }, arguments); };
    FirebaseAuthenticationOriginal.prototype.getIdToken = function (forceRefresh) { return cordova(this, "getIdToken", { "sync": true }, arguments); };
    FirebaseAuthenticationOriginal.prototype.createUserWithEmailAndPassword = function (email, password) { return cordova(this, "createUserWithEmailAndPassword", { "sync": true }, arguments); };
    FirebaseAuthenticationOriginal.prototype.sendEmailVerification = function () { return cordova(this, "sendEmailVerification", { "sync": true }, arguments); };
    FirebaseAuthenticationOriginal.prototype.sendPasswordResetEmail = function (email) { return cordova(this, "sendPasswordResetEmail", { "sync": true }, arguments); };
    FirebaseAuthenticationOriginal.prototype.signInWithEmailAndPassword = function (email, password) { return cordova(this, "signInWithEmailAndPassword", { "sync": true }, arguments); };
    FirebaseAuthenticationOriginal.prototype.verifyPhoneNumber = function (phoneNumber, timeout) { return cordova(this, "verifyPhoneNumber", { "sync": true }, arguments); };
    FirebaseAuthenticationOriginal.prototype.signInWithVerificationId = function (verificationId, smsCode) { return cordova(this, "signInWithVerificationId", { "sync": true }, arguments); };
    FirebaseAuthenticationOriginal.prototype.signInAnonymously = function () { return cordova(this, "signInAnonymously", { "sync": true }, arguments); };
    FirebaseAuthenticationOriginal.prototype.signInWithGoogle = function (idToken, accessToken) { return cordova(this, "signInWithGoogle", { "sync": true }, arguments); };
    FirebaseAuthenticationOriginal.prototype.signInWithApple = function (identityToken, rawNonce) { return cordova(this, "signInWithApple", { "sync": true }, arguments); };
    FirebaseAuthenticationOriginal.prototype.signInWithFacebook = function (accessToken) { return cordova(this, "signInWithFacebook", { "sync": true }, arguments); };
    FirebaseAuthenticationOriginal.prototype.signInWithTwitter = function (token, secret) { return cordova(this, "signInWithTwitter", { "sync": true }, arguments); };
    FirebaseAuthenticationOriginal.prototype.onAuthStateChanged = function () { return cordova(this, "onAuthStateChanged", { "observable": true, "callbackOrder": "reverse" }, arguments); };
    FirebaseAuthenticationOriginal.prototype.setLanguageCode = function (languageCode) { return cordova(this, "setLanguageCode", { "sync": true }, arguments); };
    FirebaseAuthenticationOriginal.prototype.useAppLanguage = function () { return cordova(this, "useAppLanguage", { "sync": true }, arguments); };
    FirebaseAuthenticationOriginal.prototype.signOut = function () { return cordova(this, "signOut", { "sync": true }, arguments); };
    FirebaseAuthenticationOriginal.pluginName = "FirebaseAuthentication";
    FirebaseAuthenticationOriginal.plugin = "cordova-plugin-firebase-authentication";
    FirebaseAuthenticationOriginal.pluginRef = "cordova.plugins.firebase.auth";
    FirebaseAuthenticationOriginal.repo = "https://github.com/chemerisuk/cordova-plugin-firebase-authentication";
    FirebaseAuthenticationOriginal.install = "ionic cordova plugin add cordova-plugin-firebase-authentication --variable FIREBASE_AUTH_VERSION=version";
    FirebaseAuthenticationOriginal.installVariables = ["FIREBASE_AUTH_VERSION"];
    FirebaseAuthenticationOriginal.platforms = ["Android", "iOS"];
    return FirebaseAuthenticationOriginal;
}(AwesomeCordovaNativePlugin));
var FirebaseAuthentication = new FirebaseAuthenticationOriginal();
export { FirebaseAuthentication };
//# sourceMappingURL=data:application/json;base64,