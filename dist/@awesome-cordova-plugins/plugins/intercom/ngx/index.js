import { __extends } from "tslib";
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import { Injectable } from '@angular/core';
var Intercom = /** @class */ (function (_super) {
    __extends(Intercom, _super);
    function Intercom() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Intercom.prototype.registerIdentifiedUser = function (options) { return cordova(this, "registerIdentifiedUser", {}, arguments); };
    Intercom.prototype.registerUnidentifiedUser = function (options) { return cordova(this, "registerUnidentifiedUser", {}, arguments); };
    Intercom.prototype.reset = function () { return cordova(this, "reset", {}, arguments); };
    Intercom.prototype.logout = function () { return cordova(this, "logout", {}, arguments); };
    Intercom.prototype.setSecureMode = function (secureHash, secureData) { return cordova(this, "setSecureMode", {}, arguments); };
    Intercom.prototype.setUserHash = function (secureHash) { return cordova(this, "setUserHash", {}, arguments); };
    Intercom.prototype.updateUser = function (attributes) { return cordova(this, "updateUser", {}, arguments); };
    Intercom.prototype.logEvent = function (eventName, metaData) { return cordova(this, "logEvent", {}, arguments); };
    Intercom.prototype.displayMessenger = function () { return cordova(this, "displayMessenger", {}, arguments); };
    Intercom.prototype.displayMessageComposer = function () { return cordova(this, "displayMessageComposer", {}, arguments); };
    Intercom.prototype.displayMessageComposerWithInitialMessage = function (initialMessage) { return cordova(this, "displayMessageComposerWithInitialMessage", {}, arguments); };
    Intercom.prototype.displayConversationsList = function () { return cordova(this, "displayConversationsList", {}, arguments); };
    Intercom.prototype.displayHelpCenter = function () { return cordova(this, "displayHelpCenter", {}, arguments); };
    Intercom.prototype.unreadConversationCount = function () { return cordova(this, "unreadConversationCount", {}, arguments); };
    Intercom.prototype.setLauncherVisibility = function (visibility) { return cordova(this, "setLauncherVisibility", {}, arguments); };
    Intercom.prototype.setInAppMessageVisibility = function (visibility) { return cordova(this, "setInAppMessageVisibility", {}, arguments); };
    Intercom.prototype.hideMessenger = function () { return cordova(this, "hideMessenger", {}, arguments); };
    Intercom.prototype.registerForPush = function () { return cordova(this, "registerForPush", {}, arguments); };
    Intercom.prototype.sendPushTokenToIntercom = function (token) { return cordova(this, "sendPushTokenToIntercom", {}, arguments); };
    Intercom.prototype.displayCarousel = function (carouselId) { return cordova(this, "displayCarousel", {}, arguments); };
    Intercom.prototype.displayArticle = function (articleId) { return cordova(this, "displayArticle", {}, arguments); };
    Intercom.prototype.setBottomPadding = function (bottomPadding) { return cordova(this, "setBottomPadding", {}, arguments); };
    Intercom.pluginName = "Intercom";
    Intercom.plugin = "cordova-plugin-intercom";
    Intercom.pluginRef = "intercom";
    Intercom.repo = "https://github.com/intercom/intercom-cordova";
    Intercom.platforms = ["Android", "iOS"];
    Intercom.decorators = [
        { type: Injectable }
    ];
    return Intercom;
}(AwesomeCordovaNativePlugin));
export { Intercom };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvaW50ZXJjb20vbmd4L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLHVDQUErQyxNQUFNLCtCQUErQixDQUFDO0FBQzVGLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7O0lBOEJiLDRCQUEwQjs7OztJQVF0RCx5Q0FBc0IsYUFBQyxPQUFZO0lBV25DLDJDQUF3QixhQUFDLE9BQVk7SUFVckMsd0JBQUs7SUFTTCx5QkFBTTtJQVlOLGdDQUFhLGFBQUMsVUFBa0IsRUFBRSxVQUFlO0lBVWpELDhCQUFXLGFBQUMsVUFBa0I7SUFVOUIsNkJBQVUsYUFBQyxVQUFlO0lBVzFCLDJCQUFRLGFBQUMsU0FBaUIsRUFBRSxRQUFhO0lBU3pDLG1DQUFnQjtJQVNoQix5Q0FBc0I7SUFVdEIsMkRBQXdDLGFBQUMsY0FBc0I7SUFTL0QsMkNBQXdCO0lBU3hCLG9DQUFpQjtJQVNqQiwwQ0FBdUI7SUFVdkIsd0NBQXFCLGFBQUMsVUFBa0I7SUFVeEMsNENBQXlCLGFBQUMsVUFBa0I7SUFTNUMsZ0NBQWE7SUFTYixrQ0FBZTtJQVVmLDBDQUF1QixhQUFDLEtBQWE7SUFVckMsa0NBQWUsYUFBQyxVQUFrQjtJQVVsQyxpQ0FBYyxhQUFDLFNBQWlCO0lBVWhDLG1DQUFnQixhQUFDLGFBQThCOzs7Ozs7O2dCQXZOaEQsVUFBVTs7bUJBOUJYO0VBK0I4QiwwQkFBMEI7U0FBM0MsUUFBUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvcmRvdmEsIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvY29yZSc7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qKlxuICogQG5hbWUgSW50ZXJjb21cbiAqIEBkZXNjcmlwdGlvblxuICogVGhpcyBpcyBhIHBsdWdpbiB0aGF0IGFsbG93cyB5b3VyIElvbmljIGFwcCB0byB1c2UgSW50ZXJjb20gZm9yIGlPUyBhbmQvb3IgSW50ZXJjb20gZm9yIEFuZHJvaWQuXG4gKiBGb2xsb3cgdGhlIG9mZmljYWwgZG9jdW1lbnRhdGlvbiB0byBzZXR1cCB0aGlzIHBsdWdpbiBjb3JyZWN0bHk6IGh0dHBzOi8vZGV2ZWxvcGVycy5pbnRlcmNvbS5jb20vZG9jcy9jb3Jkb3ZhLXBob25lZ2FwLWNvbmZpZ3VyYXRpb25cbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgSW50ZXJjb20gfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvaW50ZXJjb20vbmd4JztcbiAqXG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSBpbnRlcmNvbTogSW50ZXJjb20pIHsgfVxuICpcbiAqIC4uLlxuICpcbiAqIHRoaXMuaW50ZXJjb20ucmVnaXN0ZXJVbmlkZW50aWZpZWRVc2VyKCk7XG4gKiAuLi5cbiAqIHRoaXMuaW50ZXJjb20ucmVnaXN0ZXJGb3JQdXNoKCk7XG4gKlxuICogYGBgXG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnSW50ZXJjb20nLFxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1pbnRlcmNvbScsXG4gIHBsdWdpblJlZjogJ2ludGVyY29tJyxcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9pbnRlcmNvbS9pbnRlcmNvbS1jb3Jkb3ZhJyxcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJ10sXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEludGVyY29tIGV4dGVuZHMgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4ge1xuICAvKipcbiAgICogUmVnaXN0ZXIgYSBpZGVudGlmaWVkIHVzZXJcbiAgICpcbiAgICogQHBhcmFtIG9wdGlvbnMge2FueX0gT3B0aW9uc1xuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICByZWdpc3RlcklkZW50aWZpZWRVc2VyKG9wdGlvbnM6IGFueSk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVyIGEgdW5pZGVudGlmaWVkIHVzZXJcbiAgICpcbiAgICogQHBhcmFtIG9wdGlvbnMge2FueX0gT3B0aW9uc1xuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICByZWdpc3RlclVuaWRlbnRpZmllZFVzZXIob3B0aW9uczogYW55KTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogVGhpcyByZXNldHMgdGhlIEludGVyY29tIGludGVncmF0aW9uJ3MgY2FjaGUgb2YgeW91ciB1c2VyJ3MgaWRlbnRpdHkgYW5kIHdpcGVzIHRoZSBzbGF0ZSBjbGVhbi5cbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgcmVzZXQoKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgbG9nb3V0KCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSBzZWN1cmVIYXNoIHtzdHJpbmd9XG4gICAqIEBwYXJhbSBzZWN1cmVEYXRhIHthbnl9XG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXG4gICAqIEBkZXByZWNhdGVkIFVzZSBzZXRVc2VySGFzaCBpbnN0ZWFkIGFzIG9mIEludGVyY29tIENvcmRvdmEgNC4wLjAgYW5kIGhpZ2hlciBodHRwczovL2dpdGh1Yi5jb20vaW50ZXJjb20vaW50ZXJjb20tY29yZG92YS9ibG9iL21hc3Rlci9DSEFOR0VMT0cubWQjNDAwLTIwMTctMDgtMjlcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgc2V0U2VjdXJlTW9kZShzZWN1cmVIYXNoOiBzdHJpbmcsIHNlY3VyZURhdGE6IGFueSk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSBzZWN1cmVIYXNoIHtzdHJpbmd9XG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHNldFVzZXJIYXNoKHNlY3VyZUhhc2g6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSBhdHRyaWJ1dGVzIHthbnl9XG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHVwZGF0ZVVzZXIoYXR0cmlidXRlczogYW55KTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIGV2ZW50TmFtZSB7c3RyaW5nfVxuICAgKiBAcGFyYW0gbWV0YURhdGEge2FueX1cbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgbG9nRXZlbnQoZXZlbnROYW1lOiBzdHJpbmcsIG1ldGFEYXRhOiBhbnkpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBkaXNwbGF5TWVzc2VuZ2VyKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGRpc3BsYXlNZXNzYWdlQ29tcG9zZXIoKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIGluaXRpYWxNZXNzYWdlIHtzdHJpbmd9XG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGRpc3BsYXlNZXNzYWdlQ29tcG9zZXJXaXRoSW5pdGlhbE1lc3NhZ2UoaW5pdGlhbE1lc3NhZ2U6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGRpc3BsYXlDb252ZXJzYXRpb25zTGlzdCgpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBkaXNwbGF5SGVscENlbnRlcigpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICB1bnJlYWRDb252ZXJzYXRpb25Db3VudCgpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0gdmlzaWJpbGl0eSB7c3RyaW5nfVxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBzZXRMYXVuY2hlclZpc2liaWxpdHkodmlzaWJpbGl0eTogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHZpc2liaWxpdHkge3N0cmluZ31cbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgc2V0SW5BcHBNZXNzYWdlVmlzaWJpbGl0eSh2aXNpYmlsaXR5OiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBoaWRlTWVzc2VuZ2VyKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHJlZ2lzdGVyRm9yUHVzaCgpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0gdG9rZW4ge3N0cmluZ31cbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgc2VuZFB1c2hUb2tlblRvSW50ZXJjb20odG9rZW46IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSBjYXJvdXNlbElkIHtzdHJpbmd9XG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGRpc3BsYXlDYXJvdXNlbChjYXJvdXNlbElkOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0gYXJ0aWNsZUlkIHtzdHJpbmd9XG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGRpc3BsYXlBcnRpY2xlKGFydGljbGVJZDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIGJvdHRvbVBhZGRpbmcge3N0cmluZyB8IG51bWJlcn1cbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgc2V0Qm90dG9tUGFkZGluZyhib3R0b21QYWRkaW5nOiBzdHJpbmcgfCBudW1iZXIpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxufVxuIl19