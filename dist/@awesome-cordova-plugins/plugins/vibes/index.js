var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import { Observable } from 'rxjs';
var VibesOriginal = /** @class */ (function (_super) {
    __extends(VibesOriginal, _super);
    function VibesOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    VibesOriginal.prototype.registerDevice = function () { return cordova(this, "registerDevice", {}, arguments); };
    VibesOriginal.prototype.unregisterDevice = function () { return cordova(this, "unregisterDevice", {}, arguments); };
    VibesOriginal.prototype.associatePerson = function (externalPersonId) { return cordova(this, "associatePerson", {}, arguments); };
    VibesOriginal.prototype.registerPush = function () { return cordova(this, "registerPush", {}, arguments); };
    VibesOriginal.prototype.unregisterPush = function () { return cordova(this, "unregisterPush", {}, arguments); };
    VibesOriginal.prototype.getVibesDeviceInfo = function () { return cordova(this, "getVibesDeviceInfo", {}, arguments); };
    VibesOriginal.prototype.getPerson = function () { return cordova(this, "getPerson", {}, arguments); };
    VibesOriginal.prototype.onNotificationOpened = function () { return cordova(this, "onNotificationOpened", { "observable": true }, arguments); };
    VibesOriginal.prototype.fetchInboxMessages = function () { return cordova(this, "fetchInboxMessages", {}, arguments); };
    VibesOriginal.prototype.fetchInboxMessage = function (message_uid) { return cordova(this, "fetchInboxMessage", {}, arguments); };
    VibesOriginal.prototype.expireInboxMessage = function (message_uid, date) { return cordova(this, "expireInboxMessage", {}, arguments); };
    VibesOriginal.prototype.markInboxMessageAsRead = function (message_uid) { return cordova(this, "markInboxMessageAsRead", {}, arguments); };
    VibesOriginal.prototype.onInboxMessageOpen = function (inbox_message_stringified) { return cordova(this, "onInboxMessageOpen", {}, arguments); };
    VibesOriginal.pluginName = "Vibes";
    VibesOriginal.plugin = "vibes-cordova";
    VibesOriginal.pluginRef = "Vibes";
    VibesOriginal.repo = "https://github.com/vibes/vibes-cordova.git";
    VibesOriginal.install = "ionic cordova plugin add vibes-cordova --variable VIBES_APP_ID=MY_APP_ID --variable VIBES_API_URL=MY_ENVIRONMENT_URL";
    VibesOriginal.installVariables = ["VIBES_APP_ID", "VIBES_API_URL"];
    VibesOriginal.platforms = ["Android", "iOS"];
    return VibesOriginal;
}(AwesomeCordovaNativePlugin));
var Vibes = new VibesOriginal();
export { Vibes };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvdmliZXMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQ0EsT0FBTyx1Q0FBK0MsTUFBTSwrQkFBK0IsQ0FBQztBQUM1RixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDOztJQXVFUCx5QkFBMEI7Ozs7SUFPbkQsOEJBQWM7SUFVZCxnQ0FBZ0I7SUFXaEIsK0JBQWUsYUFBQyxnQkFBd0I7SUFVeEMsNEJBQVk7SUFVWiw4QkFBYztJQVNkLGtDQUFrQjtJQVVsQix5QkFBUztJQVlULG9DQUFvQjtJQVVwQixrQ0FBa0I7SUFXbEIsaUNBQWlCLGFBQUMsV0FBbUI7SUFhckMsa0NBQWtCLGFBQUMsV0FBbUIsRUFBRSxJQUFZO0lBV3BELHNDQUFzQixhQUFDLFdBQW1CO0lBVzFDLGtDQUFrQixhQUFDLHlCQUFpQzs7Ozs7Ozs7Z0JBaE50RDtFQXlFMkIsMEJBQTBCO1NBQXhDLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQbHVnaW4sIENvcmRvdmEsIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIERldmljZVJlc3BvbnNlIHtcbiAgZGV2aWNlX2lkPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIERldmljZUluZm9SZXNwb25zZSBleHRlbmRzIERldmljZVJlc3BvbnNlIHtcbiAgcHVzaF90b2tlbj86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQZXJzb25SZXNwb25zZSB7XG4gIHBlcnNvbl9rZXk/OiBzdHJpbmc7XG4gIG1kbj86IHN0cmluZztcbiAgZXh0ZXJuYWxfcGVyc29uX2lkPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEluYm94TWVzc2FnZSB7XG4gIGNvbnRlbnQ/OiBzdHJpbmc7XG4gIGNyZWF0ZWRfYXQ/OiBzdHJpbmc7XG4gIGV4cGlyZXNfYXQ/OiBzdHJpbmc7XG4gIG1lc3NhZ2VfdWlkPzogc3RyaW5nO1xuICByZWFkPzogYm9vbGVhbjtcbiAgc3ViamVjdD86IHN0cmluZztcbiAgZGV0YWlsPzogc3RyaW5nO1xuICBjb2xsYXBzZV9rZXk/OiBzdHJpbmc7XG4gIGFwcHJlZmRhdGE/OiBhbnk7XG4gIGltYWdlcz86IGFueTtcbiAgaW5ib3hfY3VzdG9tX2RhdGE6IGFueTtcbn1cbi8qKlxuICogQG5hbWUgVmliZXNcbiAqIEBkZXNjcmlwdGlvblxuICogVGhpcyBwbHVnaW4gZW5hYmxlcyBpbnRlZ3JhdGlvbiB3aXRoIHRoZSBWaWJlcyBQdXNoIFNESyB0byB5b3VyIENvcmRvdmEgcHJvamVjdCB3aXRoIEFuZHJvaWQgYW5kIGlPUyBzdXBwb3J0ZWQuXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IFZpYmVzIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3ZpYmVzL25neCc7XG4gKlxuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgdmliZXM6IFZpYmVzKSB7IH1cbiAqXG4gKiAuLi5cbiAqXG4gKlxuICogdGhpcy52aWJlcy5yZWdpc3RlckRldmljZSgpXG4gKiAgIC50aGVuKChyZXM6IGFueSkgPT4gY29uc29sZS5sb2coYGRldmljZSByZWdpc3RyYXRpb24gc3VjY2VzczogJHtyZXN9YCkpIC8vIHJldHJpZXZlIGFuZCBzYXZlIHRoZSBkZXZpY2VfaWQgZnJvbSBgcmVzYCBKU09OIG9iamVjdFxuICogICAuY2F0Y2goKGVycm9yOiBhbnkpID0+IGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHJlZ2lzdGVyaW5nIGRldmljZScsIGVycm9yKSk7XG4gKlxuICogdGhpcy52aWJlcy5yZWdpc3RlclB1c2goKVxuICogICAudGhlbigocmVzOiBhbnkpID0+IGNvbnNvbGUubG9nKHJlcykpXG4gKiAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5lcnJvcignRXJyb3IgcmVnaXN0ZXJpbmcgcHVzaCcsIGVycm9yKSk7XG4gKlxuICogdGhpcy52aWJlcy5nZXRWaWJlc0RldmljZUluZm8oKVxuICogICAudGhlbigocmVzOiBhbnkpID0+IGNvbnNvbGUubG9nKHJlcykpIC8vIHJldHJpZXZlIHRoZSBgZGV2aWNlX2lkYCBhbmQgYHB1c2hfdG9rZW5gIGZyb20gdGhlIEpTT04gb2JqZWN0XG4gKiAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5lcnJvcignRXJyb3IgcmV0cmlldmluZyBkZXZpY2VpbmZvJywgZXJyb3IpKTtcbiAqXG4gKiB0aGlzLnZpYmVzLmZldGNoSW5ib3hNZXNzYWdlcygpXG4gKiAgIC50aGVuKChyZXM6IGFueSkgPT4gY29uc29sZS5sb2cocmVzKSkgLy8gZmV0Y2hlcyBpbmJveCBtZXNzYWdlcyBmb3IgdGhpcyBwZXJzb24uXG4gKiAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgaW5ib3ggbWVzc2FnZXMgZm9yIHRoaXMgcGVyc29uJywgZXJyb3IpKTtcbiAqIGBgYFxuICovXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ1ZpYmVzJyxcbiAgcGx1Z2luOiAndmliZXMtY29yZG92YScsXG4gIHBsdWdpblJlZjogJ1ZpYmVzJyxcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS92aWJlcy92aWJlcy1jb3Jkb3ZhLmdpdCcsXG4gIGluc3RhbGw6XG4gICAgJ2lvbmljIGNvcmRvdmEgcGx1Z2luIGFkZCB2aWJlcy1jb3Jkb3ZhIC0tdmFyaWFibGUgVklCRVNfQVBQX0lEPU1ZX0FQUF9JRCAtLXZhcmlhYmxlIFZJQkVTX0FQSV9VUkw9TVlfRU5WSVJPTk1FTlRfVVJMJyxcbiAgaW5zdGFsbFZhcmlhYmxlczogWydWSUJFU19BUFBfSUQnLCAnVklCRVNfQVBJX1VSTCddLFxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXSxcbn0pXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgVmliZXMgZXh0ZW5kcyBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiB7XG4gIC8qKlxuICAgKiBSZWdpc3RlciB0aGlzIGRldmljZSB3aXRoIHRoZSBWaWJlcyBwbGF0Zm9ybVxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxEZXZpY2VSZXNwb25zZT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHJlZ2lzdGVyRGV2aWNlKCk6IFByb21pc2U8RGV2aWNlUmVzcG9uc2U+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogVW5yZWdpc3RlciB0aGlzIGRldmljZSB3aXRoIHRoZSBWaWJlcyBwbGF0Zm9ybVxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgdW5yZWdpc3RlckRldmljZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogQXNzb2NpYXRlIGFuIGV4dGVybmFsIElEIHdpdGggdGhlIGN1cnJlbnQgcGVyc29uLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXh0ZXJuYWxQZXJzb25JZFxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgYXNzb2NpYXRlUGVyc29uKGV4dGVybmFsUGVyc29uSWQ6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWdpc3RlciB0aGlzIGRldmljZSB0byByZWNlaXZlIHB1c2ggbm90aWZpY2F0aW9uc1xuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgcmVnaXN0ZXJQdXNoKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBVbnJlZ2lzdGVyIHRoZSBkZXZpY2UgZnJvbSByZWNlaXZpbmcgcHVzaCBub3RpZmljYXRpb25zXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICB1bnJlZ2lzdGVyUHVzaCgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm47XG4gIH1cbiAgLyoqXG4gICAqIEZldGNoZXMgYSBEZXZpY2VJbmZvUmVzcG9uc2Ugd2l0aCBkZXRhaWxzIGFib3V0IHRoZSBWaWJlcyBEZXZpY2UgSUQgYW5kIFB1c2ggVG9rZW5cbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2U8RGV2aWNlSW5mb1Jlc3BvbnNlPn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgZ2V0VmliZXNEZXZpY2VJbmZvKCk6IFByb21pc2U8RGV2aWNlSW5mb1Jlc3BvbnNlPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIEZldGNoZXMgdGhlIFBlcnNvblJlc3BvbnNlIGFzc29jaWF0ZWQgd2l0aCB0aGlzIGRldmljZSBjdXJyZW50bHlcbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2U8UGVyc29uUmVzcG9uc2U+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBnZXRQZXJzb24oKTogUHJvbWlzZTxQZXJzb25SZXNwb25zZT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgbm90aWZpZWQgd2hlbiB0aGUgdXNlciBvcGVucyBhIG5vdGlmaWNhdGlvblxuICAgKlxuICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZTx2b2lkPn1cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBvYnNlcnZhYmxlOiB0cnVlLFxuICB9KVxuICBvbk5vdGlmaWNhdGlvbk9wZW5lZCgpOiBPYnNlcnZhYmxlPHZvaWQ+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogRmV0Y2hlcyBhbiBhcnJheSBvZiBpbmJveCBtZXNzYWdlcyBmb3IgdGhlIHBlcnNvbiBhc3NvY2lhdGVkIHdpdGggdGhpcyBkZXZpY2UuXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPEluYm94TWVzc2FnZVtdPn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgZmV0Y2hJbmJveE1lc3NhZ2VzKCk6IFByb21pc2U8SW5ib3hNZXNzYWdlW10+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogRmV0Y2hlcyBhIHNpbmdsZSBpbmJveCBtZXNzYWdlIGJ5IGl0J3MgaWQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlX3VpZFxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxJbmJveE1lc3NhZ2U+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBmZXRjaEluYm94TWVzc2FnZShtZXNzYWdlX3VpZDogc3RyaW5nKTogUHJvbWlzZTxJbmJveE1lc3NhZ2U+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogTWFya3MgYW4gaW5ib3ggbWVzc2FnZSBhcyBleHBpcmVkIHVzaW5nIG1lc3NhZ2VfdWlkIGFuZCB0aGUgZXhwaXJ5IGRhdGUgc3VwcGxpZWQuIFVzZXMgY3VycmVudCBkYXRlIGlmIG51bGwgb3IgaW52YWxpZCBkYXRlIGlzIHN1cHBsaWVkLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZV91aWRcbiAgICogQHBhcmFtIHtzdHJpbmd9IEFuIElTTy04NjAxIGZvcm1hdHRlZCBkYXRlIHN0cmluZy5cbiAgICogQHBhcmFtIGRhdGVcbiAgICogQHJldHVybnMge1Byb21pc2U8SW5ib3hNZXNzYWdlPn0gYW4gdXBkYXRlZCB2ZXJzaW9uIG9mIHRoZSBJbmJveE1lc3NhZ2Ugd2l0aCBleHBpcmVzX2F0IGRhdGUgdXBkYXRlZFxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBleHBpcmVJbmJveE1lc3NhZ2UobWVzc2FnZV91aWQ6IHN0cmluZywgZGF0ZTogc3RyaW5nKTogUHJvbWlzZTxJbmJveE1lc3NhZ2U+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogTWFya3MgYW4gaW5ib3ggbWVzc2FnZSBhcyByZWFkLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZV91aWRcbiAgICogQHJldHVybnMge1Byb21pc2U8SW5ib3hNZXNzYWdlPn0gYW4gdXBkYXRlZCB2ZXJzaW9uIG9mIHRoZSBJbmJveE1lc3NhZ2Ugd2l0aCByZWFkIGZpZWxkIHVwZGF0ZWRcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgbWFya0luYm94TWVzc2FnZUFzUmVhZChtZXNzYWdlX3VpZDogc3RyaW5nKTogUHJvbWlzZTxJbmJveE1lc3NhZ2U+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogUmVjb3JkcyBhbiBldmVudCBmb3Igd2hlbiB0aGUgdXNlciBvcGVucyBhbiBpbmJveCBtZXNzYWdlLlxuICAgKlxuICAgKiBAcGFyYW0gaW5ib3hfbWVzc2FnZV9zdHJpbmdpZmllZCBzdHJpbmdpZmllZCB2ZXJzaW9uIG9mIHRoZSBJbmJveE1lc3NhZ2VcbiAgICogQHJldHVybnMge1Byb21pc2U8dm9pZD59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIG9uSW5ib3hNZXNzYWdlT3BlbihpbmJveF9tZXNzYWdlX3N0cmluZ2lmaWVkOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm47XG4gIH1cbn1cbiJdfQ==