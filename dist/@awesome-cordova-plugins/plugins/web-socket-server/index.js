var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import { Observable } from 'rxjs';
var WebSocketServerOriginal = /** @class */ (function (_super) {
    __extends(WebSocketServerOriginal, _super);
    function WebSocketServerOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WebSocketServerOriginal.prototype.getInterfaces = function () { return cordova(this, "getInterfaces", {}, arguments); };
    WebSocketServerOriginal.prototype.start = function (port, options) { return cordova(this, "start", { "observable": true, "clearFunction": "stop" }, arguments); };
    WebSocketServerOriginal.prototype.onFunctionToObservable = function (fnName) {
        return new Observable(function (observer) {
            var id = window.cordova.plugins.wsserver[fnName](observer.next.bind(observer), observer.error.bind(observer));
            return function () { return window.cordova.plugins.wsserver.removeCallback(id); };
        });
    };
    /**
     * Watches for new messages
     *
     * @returns {Observable<WebSocketMessage>}
     */
    WebSocketServerOriginal.prototype.watchMessage = function () {
        return this.onFunctionToObservable('onMessage');
    };
    /**
     * Watches for new opened connections
     *
     * @returns {Observable<WebSocketConnection>}
     */
    WebSocketServerOriginal.prototype.watchOpen = function () {
        return this.onFunctionToObservable('onOpen');
    };
    /**
     * Watches for closed connections
     *
     * @returns {Observable<WebSocketClose>}
     */
    WebSocketServerOriginal.prototype.watchClose = function () {
        return this.onFunctionToObservable('onClose');
    };
    /**
     * Watches for any websocket failures
     *
     * @returns {Observable<WebSocketFailure>}
     */
    WebSocketServerOriginal.prototype.watchFailure = function () {
        return this.onFunctionToObservable('onFailure');
    };
    WebSocketServerOriginal.prototype.stop = function () { return cordova(this, "stop", {}, arguments); };
    WebSocketServerOriginal.prototype.send = function (conn, msg) { return cordova(this, "send", {}, arguments); };
    WebSocketServerOriginal.prototype.close = function (conn, code, reason) { return cordova(this, "close", {}, arguments); };
    WebSocketServerOriginal.pluginName = "WebSocketServer";
    WebSocketServerOriginal.plugin = "cordova-plugin-websocket-server";
    WebSocketServerOriginal.pluginRef = "cordova.plugins.wsserver";
    WebSocketServerOriginal.repo = "https://github.com/becvert/cordova-plugin-websocket-server";
    WebSocketServerOriginal.platforms = ["Android", "iOS"];
    return WebSocketServerOriginal;
}(AwesomeCordovaNativePlugin));
var WebSocketServer = new WebSocketServerOriginal();
export { WebSocketServer };
//# sourceMappingURL=data:application/json;base64,