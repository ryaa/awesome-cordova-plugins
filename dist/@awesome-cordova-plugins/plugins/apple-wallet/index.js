var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var AppleWalletOriginal = /** @class */ (function (_super) {
    __extends(AppleWalletOriginal, _super);
    function AppleWalletOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AppleWalletOriginal.prototype.isAvailable = function () { return cordova(this, "isAvailable", {}, arguments); };
    AppleWalletOriginal.prototype.checkCardEligibility = function (primaryAccountIdentifier) { return cordova(this, "checkCardEligibility", {}, arguments); };
    AppleWalletOriginal.prototype.checkCardEligibilityBySuffix = function (cardSuffix) { return cordova(this, "checkCardEligibilityBySuffix", {}, arguments); };
    AppleWalletOriginal.prototype.checkPairedDevices = function () { return cordova(this, "checkPairedDevices", {}, arguments); };
    AppleWalletOriginal.prototype.checkPairedDevicesBySuffix = function (cardSuffix) { return cordova(this, "checkPairedDevicesBySuffix", {}, arguments); };
    AppleWalletOriginal.prototype.startAddPaymentPass = function (data) { return cordova(this, "startAddPaymentPass", {}, arguments); };
    AppleWalletOriginal.prototype.completeAddPaymentPass = function (data) { return cordova(this, "completeAddPaymentPass", {}, arguments); };
    AppleWalletOriginal.pluginName = "AppleWallet";
    AppleWalletOriginal.plugin = "cordova-apple-wallet";
    AppleWalletOriginal.pluginRef = "AppleWallet";
    AppleWalletOriginal.repo = "https://github.com/tomavic/cordova-apple-wallet";
    AppleWalletOriginal.platforms = ["iOS"];
    return AppleWalletOriginal;
}(AwesomeCordovaNativePlugin));
var AppleWallet = new AppleWalletOriginal();
export { AppleWallet };
//# sourceMappingURL=data:application/json;base64,