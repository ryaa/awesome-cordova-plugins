import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import * as i0 from "@angular/core";
var AppleWallet = /** @class */ (function (_super) {
    __extends(AppleWallet, _super);
    function AppleWallet() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AppleWallet.prototype.isAvailable = function () { return cordova(this, "isAvailable", {}, arguments); };
    AppleWallet.prototype.checkCardEligibility = function (primaryAccountIdentifier) { return cordova(this, "checkCardEligibility", {}, arguments); };
    AppleWallet.prototype.checkCardEligibilityBySuffix = function (cardSuffix) { return cordova(this, "checkCardEligibilityBySuffix", {}, arguments); };
    AppleWallet.prototype.checkPairedDevices = function () { return cordova(this, "checkPairedDevices", {}, arguments); };
    AppleWallet.prototype.checkPairedDevicesBySuffix = function (cardSuffix) { return cordova(this, "checkPairedDevicesBySuffix", {}, arguments); };
    AppleWallet.prototype.startAddPaymentPass = function (data) { return cordova(this, "startAddPaymentPass", {}, arguments); };
    AppleWallet.prototype.completeAddPaymentPass = function (data) { return cordova(this, "completeAddPaymentPass", {}, arguments); };
    AppleWallet.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AppleWallet, deps: null, target: i0.ɵɵFactoryTarget.Injectable });
    AppleWallet.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AppleWallet });
    AppleWallet.pluginName = "AppleWallet";
    AppleWallet.plugin = "cordova-apple-wallet";
    AppleWallet.pluginRef = "AppleWallet";
    AppleWallet.repo = "https://github.com/tomavic/cordova-apple-wallet";
    AppleWallet.platforms = ["iOS"];
    AppleWallet = __decorate([], AppleWallet);
    return AppleWallet;
}(AwesomeCordovaNativePlugin));
export { AppleWallet };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AppleWallet, decorators: [{
            type: Injectable
        }], propDecorators: { isAvailable: [], checkCardEligibility: [], checkCardEligibilityBySuffix: [], checkPairedDevices: [], checkPairedDevicesBySuffix: [], startAddPaymentPass: [], completeAddPaymentPass: [] } });
//# sourceMappingURL=data:application/json;base64,