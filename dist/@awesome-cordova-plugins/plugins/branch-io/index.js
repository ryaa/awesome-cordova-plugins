var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import { Observable } from 'rxjs';
var BranchIoOriginal = /** @class */ (function (_super) {
    __extends(BranchIoOriginal, _super);
    function BranchIoOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BranchIoOriginal.prototype.setDebug = function (enable) { return cordova(this, "setDebug", { "otherPromise": true }, arguments); };
    BranchIoOriginal.prototype.disableTracking = function (disable) { return cordova(this, "disableTracking", { "otherPromise": true }, arguments); };
    BranchIoOriginal.prototype.initSession = function () { return cordova(this, "initSession", { "otherPromise": true }, arguments); };
    BranchIoOriginal.prototype.initSessionWithCallback = function () { return cordova(this, "initSessionWithCallback", { "observable": true }, arguments); };
    BranchIoOriginal.prototype.setRequestMetadata = function () { return cordova(this, "setRequestMetadata", { "otherPromise": true }, arguments); };
    BranchIoOriginal.prototype.setCookieBasedMatching = function (linkDomain) { return cordova(this, "setCookieBasedMatching", { "otherPromise": true }, arguments); };
    BranchIoOriginal.prototype.getFirstReferringParams = function () { return cordova(this, "getFirstReferringParams", { "otherPromise": true }, arguments); };
    BranchIoOriginal.prototype.getLatestReferringParams = function () { return cordova(this, "getLatestReferringParams", { "otherPromise": true }, arguments); };
    BranchIoOriginal.prototype.setIdentity = function (userId) { return cordova(this, "setIdentity", { "otherPromise": true }, arguments); };
    BranchIoOriginal.prototype.logout = function () { return cordova(this, "logout", { "otherPromise": true }, arguments); };
    BranchIoOriginal.prototype.userCompletedAction = function (eventName, metaData) { return cordova(this, "userCompletedAction", { "otherPromise": true }, arguments); };
    BranchIoOriginal.prototype.sendCommerceEvent = function (event, metaData) { return cordova(this, "sendCommerceEvent", { "otherPromise": true }, arguments); };
    BranchIoOriginal.prototype.sendBranchEvent = function (event, metaData) { return cordova(this, "sendBranchEvent", { "otherPromise": true }, arguments); };
    BranchIoOriginal.prototype.createBranchUniversalObject = function (properties) { return cordova(this, "createBranchUniversalObject", { "otherPromise": true }, arguments); };
    BranchIoOriginal.prototype.loadRewards = function (bucket) { return cordova(this, "loadRewards", { "otherPromise": true }, arguments); };
    BranchIoOriginal.prototype.redeemRewards = function (value, bucket) { return cordova(this, "redeemRewards", { "otherPromise": true }, arguments); };
    BranchIoOriginal.prototype.creditHistory = function () { return cordova(this, "creditHistory", { "otherPromise": true }, arguments); };
    BranchIoOriginal.pluginName = "BranchIo";
    BranchIoOriginal.plugin = "branch-cordova-sdk";
    BranchIoOriginal.pluginRef = "Branch";
    BranchIoOriginal.repo = "https://github.com/BranchMetrics/cordova-ionic-phonegap-branch-deep-linking";
    BranchIoOriginal.platforms = ["iOS", "Android"];
    return BranchIoOriginal;
}(AwesomeCordovaNativePlugin));
var BranchIo = new BranchIoOriginal();
export { BranchIo };
//# sourceMappingURL=data:application/json;base64,