var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import { Observable } from 'rxjs';
var FirebaseMessagingOriginal = /** @class */ (function (_super) {
    __extends(FirebaseMessagingOriginal, _super);
    function FirebaseMessagingOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FirebaseMessagingOriginal.prototype.onMessage = function () { return cordova(this, "onMessage", { "observable": true, "callbackOrder": "reverse" }, arguments); };
    FirebaseMessagingOriginal.prototype.onBackgroundMessage = function () { return cordova(this, "onBackgroundMessage", { "observable": true, "callbackOrder": "reverse" }, arguments); };
    FirebaseMessagingOriginal.prototype.requestPermission = function (options) { return cordova(this, "requestPermission", { "sync": true }, arguments); };
    FirebaseMessagingOriginal.prototype.getInstanceId = function () { return cordova(this, "getInstanceId", { "sync": true }, arguments); };
    FirebaseMessagingOriginal.prototype.getToken = function (type) { return cordova(this, "getToken", { "sync": true }, arguments); };
    FirebaseMessagingOriginal.prototype.onTokenRefresh = function () { return cordova(this, "onTokenRefresh", { "observable": true, "callbackOrder": "reverse" }, arguments); };
    FirebaseMessagingOriginal.prototype.subscribe = function (topic) { return cordova(this, "subscribe", { "sync": true }, arguments); };
    FirebaseMessagingOriginal.prototype.unsubscribe = function (topic) { return cordova(this, "unsubscribe", { "sync": true }, arguments); };
    FirebaseMessagingOriginal.prototype.getBadge = function () { return cordova(this, "getBadge", { "sync": true }, arguments); };
    FirebaseMessagingOriginal.prototype.setBadge = function (value) { return cordova(this, "setBadge", { "sync": true }, arguments); };
    FirebaseMessagingOriginal.prototype.deleteToken = function () { return cordova(this, "deleteToken", { "sync": true }, arguments); };
    FirebaseMessagingOriginal.pluginName = "FirebaseMessaging";
    FirebaseMessagingOriginal.plugin = "cordova-plugin-firebase-messaging";
    FirebaseMessagingOriginal.pluginRef = "cordova.plugins.firebase.messaging";
    FirebaseMessagingOriginal.repo = "https://github.com/chemerisuk/cordova-plugin-firebase-messaging";
    FirebaseMessagingOriginal.platforms = ["Android", "iOS"];
    return FirebaseMessagingOriginal;
}(AwesomeCordovaNativePlugin));
var FirebaseMessaging = new FirebaseMessagingOriginal();
export { FirebaseMessaging };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvZmlyZWJhc2UtbWVzc2FnaW5nL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFDQSxPQUFPLHVDQUErQyxNQUFNLCtCQUErQixDQUFDO0FBQzVGLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7O0lBb0VLLHFDQUEwQjs7OztJQU8vRCxxQ0FBUztJQVVULCtDQUFtQjtJQVluQiw2Q0FBaUIsYUFBQyxPQUFpQztJQVFuRCx5Q0FBYTtJQWNiLG9DQUFRLGFBQUMsSUFBaUM7SUFXMUMsMENBQWM7SUFXZCxxQ0FBUyxhQUFDLEtBQWE7SUFXdkIsdUNBQVcsYUFBQyxLQUFhO0lBVXpCLG9DQUFRO0lBV1Isb0NBQVEsYUFBQyxLQUFhO0lBVXRCLHVDQUFXOzs7Ozs7NEJBekxiO0VBc0V1QywwQkFBMEI7U0FBcEQsaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29yZG92YSwgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bhd2Vzb21lLWNvcmRvdmEtcGx1Z2lucy9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuZXhwb3J0IGludGVyZmFjZSBJRmlyZWJhc2VHQ01NZXNzYWdlIHtcbiAgZ2NtOiB7XG4gICAgYm9keTogc3RyaW5nO1xuICAgIHRpdGxlOiBzdHJpbmc7XG4gICAgc291bmQ6IHN0cmluZztcbiAgICBpY29uOiBzdHJpbmc7XG4gICAgdGFnOiBzdHJpbmc7XG4gICAgY29sb3I6IHN0cmluZztcbiAgICBjbGlja0FjdGlvbjogc3RyaW5nO1xuICB9O1xuICAnZ29vZ2xlLm1lc3NhZ2VfaWQnOiBzdHJpbmc7XG4gICdnb29nbGUuc2VudF90aW1lJzogbnVtYmVyO1xuICBba2V5OiBzdHJpbmddOiBhbnk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUZpcmViYXNlQVBTTWVzc2FnZSB7XG4gIGFwczoge1xuICAgIGFsZXJ0OiB7XG4gICAgICB0aXRsZTogc3RyaW5nO1xuICAgICAgYm9keTogc3RyaW5nO1xuICAgIH07XG4gICAgYmFkZ2U/OiBudW1iZXI7XG4gIH07XG4gICdnY20ubWVzc2FnZV9pZCc6ICdzdHJpbmcnO1xuICBba2V5OiBzdHJpbmddOiBhbnk7XG59XG5cbmV4cG9ydCB0eXBlIElGaXJlYmFzZU1lc3NhZ2UgPSBJRmlyZWJhc2VBUFNNZXNzYWdlIHwgSUZpcmViYXNlR0NNTWVzc2FnZTtcblxuZXhwb3J0IGludGVyZmFjZSBJUmVxdWVzdFBlcm1pc3Npb25PcHRpb25zIHtcbiAgZm9yY2VTaG93PzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IHR5cGUgRmlyZWJhc2VNZXNzYWdpbmdUb2tlblR5cGUgPSAnYXBucy1idWZmZXInIHwgJ2FwbnMtc3RyaW5nJztcblxuLyoqXG4gKiBAYmV0YVxuICogQG5hbWUgRmlyZWJhc2UgTWVzc2FnaW5nXG4gKiBAZGVzY3JpcHRpb25cbiAqIENvcmRvdmEgcGx1Z2luIGZvciBGaXJlYmFzZSBNZXNzYWdpbmdcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgRmlyZWJhc2VNZXNzYWdpbmcgfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvZmlyZWJhc2UtbWVzc2FnaW5nL25neCc7XG4gKlxuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgZmlyZWJhc2VNZXNzYWdpbmc6IEZpcmViYXNlTWVzc2FnaW5nKSB7IH1cbiAqXG4gKiAuLi5cbiAqXG4gKlxuICogdGhpcy5maXJlYmFzZU1lc3NhZ2luZy5sb2dFdmVudCgncGFnZV92aWV3Jywge3BhZ2U6IFwiZGFzaGJvYXJkXCJ9KVxuICogICAudGhlbigocmVzOiBhbnkpID0+IGNvbnNvbGUubG9nKHJlcykpXG4gKiAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xuICpcbiAqIGBgYFxuICogQGludGVyZmFjZXNcbiAqIElGaXJlYmFzZU1lc3NhZ2VcbiAqL1xuQFBsdWdpbih7XG4gIHBsdWdpbk5hbWU6ICdGaXJlYmFzZU1lc3NhZ2luZycsXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLWZpcmViYXNlLW1lc3NhZ2luZycsXG4gIHBsdWdpblJlZjogJ2NvcmRvdmEucGx1Z2lucy5maXJlYmFzZS5tZXNzYWdpbmcnLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL2NoZW1lcmlzdWsvY29yZG92YS1wbHVnaW4tZmlyZWJhc2UtbWVzc2FnaW5nJyxcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJ10sXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEZpcmViYXNlTWVzc2FnaW5nIGV4dGVuZHMgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4ge1xuICAvKipcbiAgICogQ2FsbGVkIHdoZW4gYSBwdXNoIG1lc3NhZ2UgcmVjZWl2ZWQgd2hpbGUgYXBwIGlzIGluIGZvcmVncm91bmQuXG4gICAqXG4gICAqIEByZXR1cm5zIHtPYnNlcnZhYmxlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSh7IG9ic2VydmFibGU6IHRydWUsIGNhbGxiYWNrT3JkZXI6ICdyZXZlcnNlJyB9KVxuICBvbk1lc3NhZ2UoKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogQ2FsbGVkIHdoZW4gYSBwdXNoIG1lc3NhZ2UgcmVjZWl2ZWQgd2hpbGUgYXBwIGlzIGluIGJhY2tncm91bmQuXG4gICAqXG4gICAqIEByZXR1cm5zIHtPYnNlcnZhYmxlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSh7IG9ic2VydmFibGU6IHRydWUsIGNhbGxiYWNrT3JkZXI6ICdyZXZlcnNlJyB9KVxuICBvbkJhY2tncm91bmRNZXNzYWdlKCk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIEdyYW50IHBlcm1pc3Npb24gdG8gcmVjZWl2ZSBwdXNoIG5vdGlmaWNhdGlvbnMgKHdpbGwgdHJpZ2dlciBwcm9tcHQgb24gaU9TKS5cbiAgICpcbiAgICogQHBhcmFtIHtJUmVxdWVzdFBlcm1pc3Npb25PcHRpb25zfSBbb3B0aW9uc11cbiAgICogQHBhcmFtIG9wdGlvbnMuZm9yY2VTaG93XG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHN0cmluZz59XG4gICAqL1xuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcbiAgcmVxdWVzdFBlcm1pc3Npb24ob3B0aW9ucz86IHsgZm9yY2VTaG93PzogYm9vbGVhbiB9KTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIHByb21pc2UgdGhhZiBmdWxmaWxscyB3aXRoIHRoZSBkZXZpY2UgaW5zdGFuY2UgSURcbiAgICovXG4gIEBDb3Jkb3ZhKHsgc3luYzogdHJ1ZSB9KVxuICBnZXRJbnN0YW5jZUlkKCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBwcm9taXNlIHRoYXQgZnVsZmlsbHMgd2l0aCB0aGUgY3VycmVudCBGQ00gdG9rZW5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgYWxzbyBhY2NlcHRzIG9wdGlvbmFsIGFyZ3VtZW50IHR5cGUuXG4gICAqIEN1cnJlbnRseSBpT1MgaW1wbGVtZW50YXRpb24gc3VwcG9ydHMgdmFsdWVzIFwiYXBucy1idWZmZXJcIiBhbmQgXCJhcG5zLXN0cmluZ1wiIHRoYXQgZGVmaW5lcyBwcmVzZW50YXRpb24gb2YgcmVzb2x2ZWQgQVBOUyB0b2tlbi5cbiAgICpcbiAgICogQHBhcmFtIHtGaXJlYmFzZU1lc3NhZ2luZ1Rva2VuVHlwZX0gW3R5cGVdIGlPUyBvbmx5LiBEZWZpbmVzIHByZXNlbnRhdGlvbiBvZiByZXNvbHZlZCBBUE5TIHRva2VuXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHN0cmluZz59XG4gICAqL1xuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcbiAgZ2V0VG9rZW4odHlwZT86IEZpcmViYXNlTWVzc2FnaW5nVG9rZW5UeXBlKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogVHJpZ2dlcnMgZXZlcnkgdGltZSB3aGVuIEZDTSB0b2tlbiB1cGRhdGVkLlxuICAgKiBZb3Ugc2hvdWxkIHVzdWFsbHkgY2FsbCBnZXRUb2tlbiB0byBnZXQgYW4gdXBkYXRlZCB0b2tlbiBhbmQgc2VuZCBpdCB0byBzZXJ2ZXIuXG4gICAqXG4gICAqIEByZXR1cm5zIHtPYnNlcnZhYmxlPHZvaWQ+fVxuICAgKi9cbiAgQENvcmRvdmEoeyBvYnNlcnZhYmxlOiB0cnVlLCBjYWxsYmFja09yZGVyOiAncmV2ZXJzZScgfSlcbiAgb25Ub2tlblJlZnJlc2goKTogT2JzZXJ2YWJsZTx2b2lkPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFN1YnNjcmliZSB0byB0b3BpYyBpbiBiYWNrZ3JvdW5kLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdG9waWNcbiAgICogQHJldHVybnMge1Byb21pc2U8bnVsbD59XG4gICAqL1xuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcbiAgc3Vic2NyaWJlKHRvcGljOiBzdHJpbmcpOiBQcm9taXNlPG51bGw+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogVW5zdWJzY3JpYmUgZnJvbSB0b3BpYyBpbiBiYWNrZ3JvdW5kLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdG9waWNcbiAgICogQHJldHVybnMge1Byb21pc2U8bnVsbD59XG4gICAqL1xuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcbiAgdW5zdWJzY3JpYmUodG9waWM6IHN0cmluZyk6IFByb21pc2U8bnVsbD4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWFkcyBjdXJyZW50IGJhZGdlIG51bWJlciAoaWYgc3VwcG9ydGVkKS5cbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2U8bnVtYmVyPn1cbiAgICovXG4gIEBDb3Jkb3ZhKHsgc3luYzogdHJ1ZSB9KVxuICBnZXRCYWRnZSgpOiBQcm9taXNlPG51bWJlcj4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIGN1cnJlbnQgYmFkZ2UgbnVtYmVyIChpZiBzdXBwb3J0ZWQpLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAgICogQHJldHVybnMge1Byb21pc2U8bnVsbD59XG4gICAqL1xuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcbiAgc2V0QmFkZ2UodmFsdWU6IG51bWJlcik6IFByb21pc2U8bnVsbD4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXZva2UgdGhlIGN1cnJlbnQgRkNNIHRva2VuLlxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxudWxsPn1cbiAgICovXG4gIEBDb3Jkb3ZhKHsgc3luYzogdHJ1ZSB9KVxuICBkZWxldGVUb2tlbigpOiBQcm9taXNlPG51bGw+IHtcbiAgICByZXR1cm47XG4gIH1cbn1cbiJdfQ==