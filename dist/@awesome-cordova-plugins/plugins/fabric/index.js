var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var CrashlyticsOriginal = /** @class */ (function (_super) {
    __extends(CrashlyticsOriginal, _super);
    function CrashlyticsOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CrashlyticsOriginal.prototype.addLog = function (message) { return cordova(this, "addLog", { "sync": true }, arguments); };
    CrashlyticsOriginal.prototype.sendCrash = function () { return cordova(this, "sendCrash", { "sync": true }, arguments); };
    CrashlyticsOriginal.prototype.sendNonFatalCrash = function (message, stacktrace) { return cordova(this, "sendNonFatalCrash", { "sync": true }, arguments); };
    CrashlyticsOriginal.prototype.recordError = function (message, code) { return cordova(this, "recordError", { "sync": true }, arguments); };
    CrashlyticsOriginal.prototype.setUserIdentifier = function (userId) { return cordova(this, "setUserIdentifier", { "sync": true }, arguments); };
    CrashlyticsOriginal.prototype.setUserName = function (userName) { return cordova(this, "setUserName", { "sync": true }, arguments); };
    CrashlyticsOriginal.prototype.setUserEmail = function (email) { return cordova(this, "setUserEmail", { "sync": true }, arguments); };
    CrashlyticsOriginal.prototype.setStringValueForKey = function (value, key) { return cordova(this, "setStringValueForKey", { "sync": true }, arguments); };
    CrashlyticsOriginal.prototype.setIntValueForKey = function (value, key) { return cordova(this, "setIntValueForKey", { "sync": true }, arguments); };
    CrashlyticsOriginal.prototype.setBoolValueForKey = function (value, key) { return cordova(this, "setBoolValueForKey", { "sync": true }, arguments); };
    CrashlyticsOriginal.prototype.setFloatValueForKey = function (value, key) { return cordova(this, "setFloatValueForKey", { "sync": true }, arguments); };
    CrashlyticsOriginal.pluginName = "Crashlytics";
    CrashlyticsOriginal.plugin = "cordova-fabric-plugin";
    CrashlyticsOriginal.pluginRef = "window.fabric.Crashlytics";
    CrashlyticsOriginal.repo = "https://www.npmjs.com/package/cordova-fabric-plugin";
    CrashlyticsOriginal.install = "ionic cordova plugin add cordova-fabric-plugin --variable FABRIC_API_KEY=XXX --variable FABRIC_API_SECRET=xxx";
    CrashlyticsOriginal.installVariables = ["FABRIC_API_KEY", "FABRIC_API_SECRET"];
    CrashlyticsOriginal.platforms = ["Android", "iOS"];
    return CrashlyticsOriginal;
}(AwesomeCordovaNativePlugin));
var Crashlytics = new CrashlyticsOriginal();
export { Crashlytics };
var AnswersOriginal = /** @class */ (function (_super) {
    __extends(AnswersOriginal, _super);
    function AnswersOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AnswersOriginal.prototype.sendPurchase = function (itemPrice, currency, success, itemName, itemType, itemId, attributes) { return cordova(this, "sendPurchase", { "sync": true }, arguments); };
    AnswersOriginal.prototype.sendAddToCart = function (itemPrice, currency, itemName, itemType, itemId, attributes) { return cordova(this, "sendAddToCart", { "sync": true }, arguments); };
    AnswersOriginal.prototype.sendStartCheckout = function (totalPrice, currency, itemCount, attributes) { return cordova(this, "sendStartCheckout", { "sync": true }, arguments); };
    AnswersOriginal.prototype.sendSearch = function (query, attributes) { return cordova(this, "sendSearch", { "sync": true }, arguments); };
    AnswersOriginal.prototype.sendShare = function (method, contentName, contentType, contentId, attributes) { return cordova(this, "sendShare", { "sync": true }, arguments); };
    AnswersOriginal.prototype.sendRatedContent = function (rating, contentName, contentType, contentId, attributes) { return cordova(this, "sendRatedContent", { "sync": true }, arguments); };
    AnswersOriginal.prototype.sendSignUp = function (method, success, attributes) { return cordova(this, "sendSignUp", { "sync": true }, arguments); };
    AnswersOriginal.prototype.sendLogIn = function (method, success, attributes) { return cordova(this, "sendLogIn", { "sync": true }, arguments); };
    AnswersOriginal.prototype.sendInvite = function (method, attributes) { return cordova(this, "sendInvite", { "sync": true }, arguments); };
    AnswersOriginal.prototype.sendLevelStart = function (levelName, attributes) { return cordova(this, "sendLevelStart", { "sync": true }, arguments); };
    AnswersOriginal.prototype.sendLevelEnd = function (levelName, score, success, attributes) { return cordova(this, "sendLevelEnd", { "sync": true }, arguments); };
    AnswersOriginal.prototype.sendContentView = function (name, type, id, attributes) { return cordova(this, "sendContentView", { "sync": true }, arguments); };
    AnswersOriginal.prototype.sendScreenView = function (name, id, attributes) { return cordova(this, "sendScreenView", { "sync": true }, arguments); };
    AnswersOriginal.prototype.sendCustomEvent = function (name, attributes) { return cordova(this, "sendCustomEvent", { "sync": true }, arguments); };
    AnswersOriginal.pluginName = "Answers";
    AnswersOriginal.plugin = "cordova-fabric-plugin";
    AnswersOriginal.pluginRef = "window.fabric.Answers";
    AnswersOriginal.repo = "https://www.npmjs.com/package/cordova-fabric-plugin";
    AnswersOriginal.install = "ionic cordova plugin add cordova-fabric-plugin --variable FABRIC_API_KEY=XXX --variable FABRIC_API_SECRET=xxx";
    AnswersOriginal.installVariables = ["FABRIC_API_KEY", "FABRIC_API_SECRET"];
    AnswersOriginal.platforms = ["Android", "iOS"];
    return AnswersOriginal;
}(AwesomeCordovaNativePlugin));
var Answers = new AnswersOriginal();
export { Answers };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvZmFicmljL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFDQSxPQUFPLHVDQUErQyxNQUFNLCtCQUErQixDQUFDOztJQXlDM0QsK0JBQTBCOzs7O0lBUXpELDRCQUFNLGFBQUMsT0FBZTtJQVF0QiwrQkFBUztJQVdULHVDQUFpQixhQUFDLE9BQWUsRUFBRSxVQUFnQjtJQVduRCxpQ0FBVyxhQUFDLE9BQWUsRUFBRSxJQUFZO0lBVXpDLHVDQUFpQixhQUFDLE1BQWM7SUFVaEMsaUNBQVcsYUFBQyxRQUFnQjtJQVU1QixrQ0FBWSxhQUFDLEtBQWE7SUFXMUIsMENBQW9CLGFBQUMsS0FBYSxFQUFFLEdBQVc7SUFXL0MsdUNBQWlCLGFBQUMsS0FBYSxFQUFFLEdBQVc7SUFXNUMsd0NBQWtCLGFBQUMsS0FBYyxFQUFFLEdBQVc7SUFXOUMseUNBQW1CLGFBQUMsS0FBYSxFQUFFLEdBQVc7Ozs7Ozs7O3NCQTFKaEQ7RUEwQ2lDLDBCQUEwQjtTQUE5QyxXQUFXOztJQW1KSywyQkFBMEI7Ozs7SUFpQnJELDhCQUFZLGFBQ1YsU0FBa0IsRUFDbEIsUUFBaUIsRUFDakIsT0FBaUIsRUFDakIsUUFBaUIsRUFDakIsUUFBaUIsRUFDakIsTUFBZSxFQUNmLFVBQXVCO0lBb0J6QiwrQkFBYSxhQUNYLFNBQWtCLEVBQ2xCLFFBQWlCLEVBQ2pCLFFBQWlCLEVBQ2pCLFFBQWlCLEVBQ2pCLE1BQWUsRUFDZixVQUF1QjtJQWtCekIsbUNBQWlCLGFBQUMsVUFBbUIsRUFBRSxRQUFpQixFQUFFLFNBQWtCLEVBQUUsVUFBdUI7SUFhckcsNEJBQVUsYUFBQyxLQUFhLEVBQUUsVUFBdUI7SUFrQmpELDJCQUFTLGFBQ1AsTUFBZSxFQUNmLFdBQW9CLEVBQ3BCLFdBQW9CLEVBQ3BCLFNBQWtCLEVBQ2xCLFVBQXVCO0lBbUJ6QixrQ0FBZ0IsYUFDZCxNQUFlLEVBQ2YsV0FBb0IsRUFDcEIsV0FBb0IsRUFDcEIsU0FBa0IsRUFDbEIsVUFBdUI7SUFpQnpCLDRCQUFVLGFBQUMsTUFBZSxFQUFFLE9BQWlCLEVBQUUsVUFBdUI7SUFnQnRFLDJCQUFTLGFBQUMsTUFBZSxFQUFFLE9BQWlCLEVBQUUsVUFBdUI7SUFlckUsNEJBQVUsYUFBQyxNQUFlLEVBQUUsVUFBdUI7SUFlbkQsZ0NBQWMsYUFBQyxTQUFrQixFQUFFLFVBQXVCO0lBaUIxRCw4QkFBWSxhQUFDLFNBQWtCLEVBQUUsS0FBYyxFQUFFLE9BQWlCLEVBQUUsVUFBdUI7SUFlM0YsaUNBQWUsYUFBQyxJQUFZLEVBQUUsSUFBYSxFQUFFLEVBQVcsRUFBRSxVQUF1QjtJQVlqRixnQ0FBYyxhQUFDLElBQVksRUFBRSxFQUFVLEVBQUUsVUFBdUI7SUFhaEUsaUNBQWUsYUFBQyxJQUFZLEVBQUUsVUFBdUI7Ozs7Ozs7O2tCQXJidkQ7RUE2TDZCLDBCQUEwQjtTQUExQyxPQUFPIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29yZG92YSwgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bhd2Vzb21lLWNvcmRvdmEtcGx1Z2lucy9jb3JlJztcblxuZXhwb3J0IGludGVyZmFjZSBBdHRyaWJ1dGVzIHtcbiAgW2luZGV4OiBzdHJpbmddOiBzdHJpbmc7XG59XG5cbi8qKlxuICogQG5hbWUgQ3Jhc2hseXRpY3NcbiAqIEBkZXNjcmlwdGlvblxuICogQVBJIGZvciBpbnRlcmFjdGluZyB3aXRoIHRoZSBDcmFzaGx5dGljcyBraXQuXG4gKlxuICogaHR0cHM6Ly9kb2NzLmZhYnJpYy5pby9jcmFzaGx5dGljcy9pbmRleC5odG1sXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IENyYXNobHl0aWNzIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL2ZhYnJpYy9uZ3gnO1xuICpcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGNyYXNobHl0aWNzOiBDcmFzaGx5dGljcykgeyB9XG4gKlxuICogLi4uXG4gKlxuICogdHJ5IHtcbiAqICBhd2FpdCB0aGlzLmxvYWREYXRhKCk7XG4gKiB9IGNhdGNoIChlKSB7XG4gKiAgdGhpcy5jcmFzaGx5dGljcy5hZGRMb2coXCJFcnJvciB3aGlsZSBsb2FkaW5nIGRhdGFcIik7XG4gKiAgdGhpcy5jcmFzaGx5dGljcy5zZW5kTm9uRmF0YWxDcmFzaChlLm1lc3NhZ2UgfHwgZSk7XG4gKiB9XG4gKlxuICogYGBgXG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnQ3Jhc2hseXRpY3MnLFxuICBwbHVnaW46ICdjb3Jkb3ZhLWZhYnJpYy1wbHVnaW4nLFxuICBwbHVnaW5SZWY6ICd3aW5kb3cuZmFicmljLkNyYXNobHl0aWNzJyxcbiAgcmVwbzogJ2h0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL2NvcmRvdmEtZmFicmljLXBsdWdpbicsXG4gIGluc3RhbGw6XG4gICAgJ2lvbmljIGNvcmRvdmEgcGx1Z2luIGFkZCBjb3Jkb3ZhLWZhYnJpYy1wbHVnaW4gLS12YXJpYWJsZSBGQUJSSUNfQVBJX0tFWT1YWFggLS12YXJpYWJsZSBGQUJSSUNfQVBJX1NFQ1JFVD14eHgnLFxuICBpbnN0YWxsVmFyaWFibGVzOiBbJ0ZBQlJJQ19BUElfS0VZJywgJ0ZBQlJJQ19BUElfU0VDUkVUJ10sXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddLFxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBDcmFzaGx5dGljcyBleHRlbmRzIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luIHtcbiAgLyoqXG4gICAqIEFkZCBsb2dnaW5nIHRoYXQgd2lsbCBiZSBzZW50IHdpdGggeW91ciBjcmFzaCBkYXRhLiBUaGlzIGxvZ2dpbmcgd2lsbCBub3Qgc2hvdyB1cFxuICAgKiBpbiB0aGUgc3lzdGVtLmxvZyBhbmQgd2lsbCBvbmx5IGJlIHZpc2libGUgaW4geW91ciBDcmFzaGx5dGljcyBkYXNoYm9hcmQuXG4gICAqXG4gICAqIEBwYXJhbSBtZXNzYWdlIHtzdHJpbmd9XG4gICAqL1xuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcbiAgYWRkTG9nKG1lc3NhZ2U6IHN0cmluZyk6IHZvaWQge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIHRvIHNpbXVsYXRlIGEgbmF0aXZlIHBsYXRmb3JtIGNyYXNoICh1c2VmdWwgZm9yIHRlc3RpbmcgQ3Jhc2hseXRpY3MgbG9nZ2luZykuXG4gICAqL1xuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcbiAgc2VuZENyYXNoKCk6IHZvaWQge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIHRvIGxvZyBhIG5vbi1mYXRhbCBlcnJvciBtZXNzYWdlIChBbmRyb2lkIG9ubHkpLlxuICAgKlxuICAgKiBAcGFyYW0gbWVzc2FnZVxuICAgKiBAcGFyYW0gc3RhY2t0cmFjZVxuICAgKi9cbiAgQENvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXG4gIHNlbmROb25GYXRhbENyYXNoKG1lc3NhZ2U6IHN0cmluZywgc3RhY2t0cmFjZT86IGFueSk6IHZvaWQge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIHRvIHJlY29yZCBhIG5vbi1mYXRhbCBlcnJvciBtZXNzYWdlIChpT1Mgb25seSkuXG4gICAqXG4gICAqIEBwYXJhbSBtZXNzYWdlXG4gICAqIEBwYXJhbSBjb2RlXG4gICAqL1xuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcbiAgcmVjb3JkRXJyb3IobWVzc2FnZTogc3RyaW5nLCBjb2RlOiBudW1iZXIpOiB2b2lkIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgdXNlcidzIGlkZW50aWZpZXIgZm9yIGxvZ2dpbmcgdG8gQ3Jhc2hseXRpY3MgYmFja2VuZC5cbiAgICpcbiAgICogQHBhcmFtIHVzZXJJZFxuICAgKi9cbiAgQENvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXG4gIHNldFVzZXJJZGVudGlmaWVyKHVzZXJJZDogc3RyaW5nKTogdm9pZCB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHVzZXIncyBuYW1lIGZvciBsb2dnaW5nIHRvIENyYXNobHl0aWNzIGJhY2tlbmQuXG4gICAqXG4gICAqIEBwYXJhbSB1c2VyTmFtZVxuICAgKi9cbiAgQENvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXG4gIHNldFVzZXJOYW1lKHVzZXJOYW1lOiBzdHJpbmcpOiB2b2lkIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgdXNlcidzIGVtYWlsIGFkZHJlc3MgZm9yIGxvZ2dpbmcgdG8gQ3Jhc2hseXRpY3MgYmFja2VuZC5cbiAgICpcbiAgICogQHBhcmFtIGVtYWlsXG4gICAqL1xuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcbiAgc2V0VXNlckVtYWlsKGVtYWlsOiBzdHJpbmcpOiB2b2lkIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogU2V0cyBhIGN1c3RvbSBrZXkvdmFsdWUgcGFpciBmb3IgbG9nZ2luZyB0byBDcmFzaGx5dGljcyBiYWNrZW5kLlxuICAgKlxuICAgKiBAcGFyYW0gdmFsdWVcbiAgICogQHBhcmFtIGtleVxuICAgKi9cbiAgQENvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXG4gIHNldFN0cmluZ1ZhbHVlRm9yS2V5KHZhbHVlOiBzdHJpbmcsIGtleTogc3RyaW5nKTogdm9pZCB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgYSBjdXN0b20ga2V5L3ZhbHVlIHBhaXIgZm9yIGxvZ2dpbmcgdG8gQ3Jhc2hseXRpY3MgYmFja2VuZC5cbiAgICpcbiAgICogQHBhcmFtIHZhbHVlXG4gICAqIEBwYXJhbSBrZXlcbiAgICovXG4gIEBDb3Jkb3ZhKHsgc3luYzogdHJ1ZSB9KVxuICBzZXRJbnRWYWx1ZUZvcktleSh2YWx1ZTogbnVtYmVyLCBrZXk6IHN0cmluZyk6IHZvaWQge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIGEgY3VzdG9tIGtleS92YWx1ZSBwYWlyIGZvciBsb2dnaW5nIHRvIENyYXNobHl0aWNzIGJhY2tlbmQuXG4gICAqXG4gICAqIEBwYXJhbSB2YWx1ZVxuICAgKiBAcGFyYW0ga2V5XG4gICAqL1xuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcbiAgc2V0Qm9vbFZhbHVlRm9yS2V5KHZhbHVlOiBib29sZWFuLCBrZXk6IHN0cmluZyk6IHZvaWQge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIGEgY3VzdG9tIGtleS92YWx1ZSBwYWlyIGZvciBsb2dnaW5nIHRvIENyYXNobHl0aWNzIGJhY2tlbmQuXG4gICAqXG4gICAqIEBwYXJhbSB2YWx1ZVxuICAgKiBAcGFyYW0ga2V5XG4gICAqL1xuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcbiAgc2V0RmxvYXRWYWx1ZUZvcktleSh2YWx1ZTogbnVtYmVyLCBrZXk6IHN0cmluZyk6IHZvaWQge1xuICAgIHJldHVybjtcbiAgfVxufVxuXG4vKipcbiAqIEBuYW1lIEFuc3dlcnNcbiAqIEBkZXNjcmlwdGlvblxuICogQVBJIGZvciBpbnRlcmFjdGluZyB3aXRoIHRoZSBBbnN3ZXJzIGtpdC5cbiAqXG4gKiBodHRwczovL2RvY3MuZmFicmljLmlvL2NyYXNobHl0aWNzL2luZGV4Lmh0bWxcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgQW5zd2VycyB9IGZyb20gJ0Bhd2Vzb21lLWNvcmRvdmEtcGx1Z2lucy9mYWJyaWMvbmd4JztcbiAqXG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSBhbnN3ZXJzOiBBbnN3ZXJzKSB7IH1cbiAqXG4gKiAuLi5cbiAqXG4gKiB0aGlzLmFuc3dlcnMuc2VuZEN1c3RvbUV2ZW50KCdTb21lQ3VzdG9tRXZlbnQnLCB7IHNvbWU6IFwiYXR0cmlidXRlc1wiIH0pXG4gKlxuICogYGBgXG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnQW5zd2VycycsXG4gIHBsdWdpbjogJ2NvcmRvdmEtZmFicmljLXBsdWdpbicsXG4gIHBsdWdpblJlZjogJ3dpbmRvdy5mYWJyaWMuQW5zd2VycycsXG4gIHJlcG86ICdodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9jb3Jkb3ZhLWZhYnJpYy1wbHVnaW4nLFxuICBpbnN0YWxsOlxuICAgICdpb25pYyBjb3Jkb3ZhIHBsdWdpbiBhZGQgY29yZG92YS1mYWJyaWMtcGx1Z2luIC0tdmFyaWFibGUgRkFCUklDX0FQSV9LRVk9WFhYIC0tdmFyaWFibGUgRkFCUklDX0FQSV9TRUNSRVQ9eHh4JyxcbiAgaW5zdGFsbFZhcmlhYmxlczogWydGQUJSSUNfQVBJX0tFWScsICdGQUJSSUNfQVBJX1NFQ1JFVCddLFxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXSxcbn0pXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQW5zd2VycyBleHRlbmRzIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luIHtcbiAgLyoqXG4gICAqIFNlbmRzIHRoZSBQdXJjaGFzZSB0cmFja2luZyBldmVudC5cbiAgICpcbiAgICogQWxsIHBhcmFtZXRlcnMgYXJlIG9wdGlvbmFsLlxuICAgKlxuICAgKiBodHRwczovL2RvY3MuZmFicmljLmlvL2FuZHJvaWQvYW5zd2Vycy9hbnN3ZXJzLWV2ZW50cy5odG1sI3B1cmNoYXNlXG4gICAqXG4gICAqIEBwYXJhbSBpdGVtUHJpY2UgVGhlIGl0ZW0ncyBhbW91bnQgaW4gdGhlIGN1cnJlbmN5IHNwZWNpZmllZC5cbiAgICogQHBhcmFtIGN1cnJlbmN5IFRoZSBJU080MjE3IGN1cnJlbmN5IGNvZGUuXG4gICAqIEBwYXJhbSBzdWNjZXNzIFdhcyB0aGUgcHVyY2hhc2UgY29tcGxldGVkIHN1Y2Nlc2Z1bGx5P1xuICAgKiBAcGFyYW0gaXRlbU5hbWUgVGhlIGh1bWFuLXJlYWRhYmxlIG5hbWUgZm9yIHRoZSBpdGVtLlxuICAgKiBAcGFyYW0gaXRlbVR5cGUgVGhlIGNhdGVnb3J5IHRoZSBpdGVtIGZhbGxzIHVuZGVyLlxuICAgKiBAcGFyYW0gaXRlbUlkIEEgdW5pcXVlIGlkZW50aWZpZXIgdXNlZCB0byB0cmFjayB0aGUgaXRlbS5cbiAgICogQHBhcmFtIGF0dHJpYnV0ZXMgQW55IGFkZGl0aW9uYWwgdXNlci1kZWZpbmVkIGF0dHJpYnV0ZXMgdG8gYmUgbG9nZ2VkLlxuICAgKi9cbiAgQENvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXG4gIHNlbmRQdXJjaGFzZShcbiAgICBpdGVtUHJpY2U/OiBudW1iZXIsXG4gICAgY3VycmVuY3k/OiBzdHJpbmcsXG4gICAgc3VjY2Vzcz86IGJvb2xlYW4sXG4gICAgaXRlbU5hbWU/OiBzdHJpbmcsXG4gICAgaXRlbVR5cGU/OiBzdHJpbmcsXG4gICAgaXRlbUlkPzogc3RyaW5nLFxuICAgIGF0dHJpYnV0ZXM/OiBBdHRyaWJ1dGVzXG4gICk6IHZvaWQge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZW5kcyB0aGUgQWRkIFRvIENhcnQgdHJhY2tpbmcgZXZlbnQuXG4gICAqXG4gICAqIEFsbCBwYXJhbWV0ZXJzIGFyZSBvcHRpb25hbC5cbiAgICpcbiAgICogaHR0cHM6Ly9kb2NzLmZhYnJpYy5pby9hbmRyb2lkL2Fuc3dlcnMvYW5zd2Vycy1ldmVudHMuaHRtbCNhZGQtdG8tY2FydFxuICAgKlxuICAgKiBAcGFyYW0gaXRlbVByaWNlIFRoZSBpdGVtJ3MgYW1vdW50IGluIHRoZSBjdXJyZW5jeSBzcGVjaWZpZWQuXG4gICAqIEBwYXJhbSBjdXJyZW5jeSBUaGUgSVNPNDIxNyBjdXJyZW5jeSBjb2RlLlxuICAgKiBAcGFyYW0gaXRlbU5hbWUgVGhlIGh1bWFuLXJlYWRhYmxlIG5hbWUgZm9yIHRoZSBpdGVtLlxuICAgKiBAcGFyYW0gaXRlbVR5cGUgVGhlIGNhdGVnb3J5IHRoZSBpdGVtIGZhbGxzIHVuZGVyLlxuICAgKiBAcGFyYW0gaXRlbUlkIEEgdW5pcXVlIGlkZW50aWZpZXIgdXNlZCB0byB0cmFjayB0aGUgaXRlbS5cbiAgICogQHBhcmFtIGF0dHJpYnV0ZXMgQW55IGFkZGl0aW9uYWwgdXNlci1kZWZpbmVkIGF0dHJpYnV0ZXMgdG8gYmUgbG9nZ2VkLlxuICAgKi9cbiAgQENvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXG4gIHNlbmRBZGRUb0NhcnQoXG4gICAgaXRlbVByaWNlPzogbnVtYmVyLFxuICAgIGN1cnJlbmN5Pzogc3RyaW5nLFxuICAgIGl0ZW1OYW1lPzogc3RyaW5nLFxuICAgIGl0ZW1UeXBlPzogc3RyaW5nLFxuICAgIGl0ZW1JZD86IHN0cmluZyxcbiAgICBhdHRyaWJ1dGVzPzogQXR0cmlidXRlc1xuICApOiB2b2lkIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogU2VuZHMgdGhlIFN0YXJ0IENoZWNrb3V0IHRyYWNraW5nIGV2ZW50LlxuICAgKlxuICAgKiBBbGwgcGFyYW1ldGVycyBhcmUgb3B0aW9uYWwuXG4gICAqXG4gICAqIGh0dHBzOi8vZG9jcy5mYWJyaWMuaW8vYW5kcm9pZC9hbnN3ZXJzL2Fuc3dlcnMtZXZlbnRzLmh0bWwjc3RhcnQtY2hlY2tvdXRcbiAgICpcbiAgICogQHBhcmFtIHRvdGFsUHJpY2UgVGhlIHRvdGFsIHByaWNlIG9mIGFsbCBpdGVtcyBpbiBjYXJ0IGluIHRoZSBjdXJyZW5jeSBzcGVjaWZpZWQuXG4gICAqIEBwYXJhbSBjdXJyZW5jeSBUaGUgSVNPNDIxNyBjdXJyZW5jeSBjb2RlLlxuICAgKiBAcGFyYW0gaXRlbUNvdW50IFRoZSBjb3VudCBvZiBpdGVtcyBpbiBjYXJ0LlxuICAgKiBAcGFyYW0gYXR0cmlidXRlcyBBbnkgYWRkaXRpb25hbCB1c2VyLWRlZmluZWQgYXR0cmlidXRlcyB0byBiZSBsb2dnZWQuXG4gICAqL1xuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcbiAgc2VuZFN0YXJ0Q2hlY2tvdXQodG90YWxQcmljZT86IG51bWJlciwgY3VycmVuY3k/OiBzdHJpbmcsIGl0ZW1Db3VudD86IG51bWJlciwgYXR0cmlidXRlcz86IEF0dHJpYnV0ZXMpOiB2b2lkIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogU2VuZHMgdGhlIFNlYXJjaCB0cmFja2luZyBldmVudC5cbiAgICpcbiAgICogaHR0cHM6Ly9kb2NzLmZhYnJpYy5pby9hbmRyb2lkL2Fuc3dlcnMvYW5zd2Vycy1ldmVudHMuaHRtbCNzZWFyY2hcbiAgICpcbiAgICogQHBhcmFtIHF1ZXJ5IFdoYXQgdGhlIHVzZXIgaXMgc2VhcmNoaW5nIGZvci5cbiAgICogQHBhcmFtIGF0dHJpYnV0ZXMgQW55IGFkZGl0aW9uYWwgdXNlci1kZWZpbmVkIGF0dHJpYnV0ZXMgdG8gYmUgbG9nZ2VkLlxuICAgKi9cbiAgQENvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXG4gIHNlbmRTZWFyY2gocXVlcnk6IHN0cmluZywgYXR0cmlidXRlcz86IEF0dHJpYnV0ZXMpOiB2b2lkIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogU2VuZHMgdGhlIFNoYXJlIHRyYWNraW5nIGV2ZW50LlxuICAgKlxuICAgKiBBbGwgcGFyYW1ldGVycyBhcmUgb3B0aW9uYWwuXG4gICAqXG4gICAqIGh0dHBzOi8vZG9jcy5mYWJyaWMuaW8vYW5kcm9pZC9hbnN3ZXJzL2Fuc3dlcnMtZXZlbnRzLmh0bWwjc2hhcmVcbiAgICpcbiAgICogQHBhcmFtIG1ldGhvZCBUaGUgbWV0aG9kIHVzZWQgdG8gc2hhcmUgY29udGVudC5cbiAgICogQHBhcmFtIGNvbnRlbnROYW1lIFRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgY29udGVudC5cbiAgICogQHBhcmFtIGNvbnRlbnRUeXBlIFRoZSB0eXBlIG9yIGdlbnJlIG9mIGNvbnRlbnQuXG4gICAqIEBwYXJhbSBjb250ZW50SWQgQSB1bmlxdWUga2V5IGlkZW50aWZ5aW5nIHRoZSBjb250ZW50LlxuICAgKiBAcGFyYW0gYXR0cmlidXRlcyBBbnkgYWRkaXRpb25hbCB1c2VyLWRlZmluZWQgYXR0cmlidXRlcyB0byBiZSBsb2dnZWQuXG4gICAqL1xuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcbiAgc2VuZFNoYXJlKFxuICAgIG1ldGhvZD86IHN0cmluZyxcbiAgICBjb250ZW50TmFtZT86IHN0cmluZyxcbiAgICBjb250ZW50VHlwZT86IHN0cmluZyxcbiAgICBjb250ZW50SWQ/OiBzdHJpbmcsXG4gICAgYXR0cmlidXRlcz86IEF0dHJpYnV0ZXNcbiAgKTogdm9pZCB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFNlbmRzIHRoZSBSYXRlZCBDb250ZW50IHRyYWNraW5nIGV2ZW50LlxuICAgKlxuICAgKiBBbGwgcGFyYW1ldGVycyBhcmUgb3B0aW9uYWwuXG4gICAqXG4gICAqIGh0dHBzOi8vZG9jcy5mYWJyaWMuaW8vYW5kcm9pZC9hbnN3ZXJzL2Fuc3dlcnMtZXZlbnRzLmh0bWwjcmF0ZWQtY29udGVudFxuICAgKlxuICAgKiBAcGFyYW0gcmF0aW5nIEFuIGludGVnZXIgcmF0aW5nIG9mIHRoZSBjb250ZW50LlxuICAgKiBAcGFyYW0gY29udGVudE5hbWUgVGhlIGh1bWFuLXJlYWRhYmxlIG5hbWUgb2YgY29udGVudC5cbiAgICogQHBhcmFtIGNvbnRlbnRUeXBlIFRoZSBjYXRlZ29yeSB5b3VyIGl0ZW0gZmFsbHMgdW5kZXIuXG4gICAqIEBwYXJhbSBjb250ZW50SWQgQSB1bmlxdWUgaWRlbnRpZmllciB1c2VkIHRvIHRyYWNrIHRoZSBpdGVtLlxuICAgKiBAcGFyYW0gYXR0cmlidXRlcyBBbnkgYWRkaXRpb25hbCB1c2VyLWRlZmluZWQgYXR0cmlidXRlcyB0byBiZSBsb2dnZWQuXG4gICAqL1xuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcbiAgc2VuZFJhdGVkQ29udGVudChcbiAgICByYXRpbmc/OiBudW1iZXIsXG4gICAgY29udGVudE5hbWU/OiBzdHJpbmcsXG4gICAgY29udGVudFR5cGU/OiBzdHJpbmcsXG4gICAgY29udGVudElkPzogc3RyaW5nLFxuICAgIGF0dHJpYnV0ZXM/OiBBdHRyaWJ1dGVzXG4gICk6IHZvaWQge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZW5kcyB0aGUgU2lnbiBVcCB0cmFja2luZyBldmVudC5cbiAgICpcbiAgICogQWxsIHBhcmFtZXRlcnMgYXJlIG9wdGlvbmFsLlxuICAgKlxuICAgKiBodHRwczovL2RvY3MuZmFicmljLmlvL2FuZHJvaWQvYW5zd2Vycy9hbnN3ZXJzLWV2ZW50cy5odG1sI3NpZ24tdXBcbiAgICpcbiAgICogQHBhcmFtIG1ldGhvZCBBbiBvcHRpb25hbCBkZXNjcmlwdGlvbiBvZiB0aGUgc2lnbiB1cCBtZXRob2QgKFR3aXR0ZXIsIEZhY2Vib29rLCBldGMuKTsgZGVmYXVsdHMgdG8gXCJEaXJlY3RcIi5cbiAgICogQHBhcmFtIHN1Y2Nlc3MgQW4gb3B0aW9uYWwgZmxhZyB0aGF0IGluZGljYXRlcyBzaWduIHVwIHN1Y2Nlc3M7IGRlZmF1bHRzIHRvIHRydWUuXG4gICAqIEBwYXJhbSBhdHRyaWJ1dGVzIEFueSBhZGRpdGlvbmFsIHVzZXItZGVmaW5lZCBhdHRyaWJ1dGVzIHRvIGJlIGxvZ2dlZC5cbiAgICovXG4gIEBDb3Jkb3ZhKHsgc3luYzogdHJ1ZSB9KVxuICBzZW5kU2lnblVwKG1ldGhvZD86IHN0cmluZywgc3VjY2Vzcz86IGJvb2xlYW4sIGF0dHJpYnV0ZXM/OiBBdHRyaWJ1dGVzKTogdm9pZCB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFNlbmRzIHRoZSBMb2cgSW4gdHJhY2tpbmcgZXZlbnQuXG4gICAqXG4gICAqIEFsbCBwYXJhbWV0ZXJzIGFyZSBvcHRpb25hbC5cbiAgICpcbiAgICogaHR0cHM6Ly9kb2NzLmZhYnJpYy5pby9hbmRyb2lkL2Fuc3dlcnMvYW5zd2Vycy1ldmVudHMuaHRtbCNsb2ctaW5cbiAgICpcbiAgICogQHBhcmFtIG1ldGhvZCBBbiBvcHRpb25hbCBkZXNjcmlwdGlvbiBvZiB0aGUgc2lnbiBpbiBtZXRob2QgKFR3aXR0ZXIsIEZhY2Vib29rLCBldGMuKTsgZGVmYXVsdHMgdG8gXCJEaXJlY3RcIi5cbiAgICogQHBhcmFtIHN1Y2Nlc3MgQW4gb3B0aW9uYWwgZmxhZyB0aGF0IGluZGljYXRlcyBzaWduIGluIHN1Y2Nlc3M7IGRlZmF1bHRzIHRvIHRydWUuXG4gICAqIEBwYXJhbSBhdHRyaWJ1dGVzIEFueSBhZGRpdGlvbmFsIHVzZXItZGVmaW5lZCBhdHRyaWJ1dGVzIHRvIGJlIGxvZ2dlZC5cbiAgICovXG4gIEBDb3Jkb3ZhKHsgc3luYzogdHJ1ZSB9KVxuICBzZW5kTG9nSW4obWV0aG9kPzogc3RyaW5nLCBzdWNjZXNzPzogYm9vbGVhbiwgYXR0cmlidXRlcz86IEF0dHJpYnV0ZXMpOiB2b2lkIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogU2VuZHMgdGhlIEludml0ZSB0cmFja2luZyBldmVudC5cbiAgICpcbiAgICogQWxsIHBhcmFtZXRlcnMgYXJlIG9wdGlvbmFsLlxuICAgKlxuICAgKiBodHRwczovL2RvY3MuZmFicmljLmlvL2FuZHJvaWQvYW5zd2Vycy9hbnN3ZXJzLWV2ZW50cy5odG1sI2ludml0ZVxuICAgKlxuICAgKiBAcGFyYW0gbWV0aG9kIEFuIG9wdGlvbmFsIGRlc2NyaXB0aW9uIG9mIHRoZSBzaWduIGluIG1ldGhvZCAoVHdpdHRlciwgRmFjZWJvb2ssIGV0Yy4pOyBkZWZhdWx0cyB0byBcIkRpcmVjdFwiLlxuICAgKiBAcGFyYW0gYXR0cmlidXRlcyBBbnkgYWRkaXRpb25hbCB1c2VyLWRlZmluZWQgYXR0cmlidXRlcyB0byBiZSBsb2dnZWQuXG4gICAqL1xuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcbiAgc2VuZEludml0ZShtZXRob2Q/OiBzdHJpbmcsIGF0dHJpYnV0ZXM/OiBBdHRyaWJ1dGVzKTogdm9pZCB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFNlbmRzIHRoZSBMZXZlbCBTdGFydCB0cmFja2luZyBldmVudC5cbiAgICpcbiAgICogQWxsIHBhcmFtZXRlcnMgYXJlIG9wdGlvbmFsLlxuICAgKlxuICAgKiBodHRwczovL2RvY3MuZmFicmljLmlvL2FuZHJvaWQvYW5zd2Vycy9hbnN3ZXJzLWV2ZW50cy5odG1sI2xldmVsLXN0YXJ0XG4gICAqXG4gICAqIEBwYXJhbSBsZXZlbE5hbWUgU3RyaW5nIGtleSBkZXNjcmliaW5nIHRoZSBsZXZlbC5cbiAgICogQHBhcmFtIGF0dHJpYnV0ZXMgQW55IGFkZGl0aW9uYWwgdXNlci1kZWZpbmVkIGF0dHJpYnV0ZXMgdG8gYmUgbG9nZ2VkLlxuICAgKi9cbiAgQENvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXG4gIHNlbmRMZXZlbFN0YXJ0KGxldmVsTmFtZT86IHN0cmluZywgYXR0cmlidXRlcz86IEF0dHJpYnV0ZXMpOiB2b2lkIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogU2VuZHMgdGhlIExldmVsIEVuZCB0cmFja2luZyBldmVudC5cbiAgICpcbiAgICogQWxsIHBhcmFtZXRlcnMgYXJlIG9wdGlvbmFsLlxuICAgKlxuICAgKiBodHRwczovL2RvY3MuZmFicmljLmlvL2FuZHJvaWQvYW5zd2Vycy9hbnN3ZXJzLWV2ZW50cy5odG1sI2xldmVsLWVuZFxuICAgKlxuICAgKiBAcGFyYW0gbGV2ZWxOYW1lIFN0cmluZyBrZXkgZGVzY3JpYmluZyB0aGUgbGV2ZWwuXG4gICAqIEBwYXJhbSBzY29yZSBUaGUgc2NvcmUgZm9yIHRoaXMgbGV2ZWwuXG4gICAqIEBwYXJhbSBzdWNjZXNzIENvbXBsZXRlZCB0aGUgbGV2ZWwgb3IgZmFpbGVkIHRyeWluZy5cbiAgICogQHBhcmFtIGF0dHJpYnV0ZXMgQW55IGFkZGl0aW9uYWwgdXNlci1kZWZpbmVkIGF0dHJpYnV0ZXMgdG8gYmUgbG9nZ2VkLlxuICAgKi9cbiAgQENvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXG4gIHNlbmRMZXZlbEVuZChsZXZlbE5hbWU/OiBzdHJpbmcsIHNjb3JlPzogbnVtYmVyLCBzdWNjZXNzPzogYm9vbGVhbiwgYXR0cmlidXRlcz86IEF0dHJpYnV0ZXMpOiB2b2lkIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogU2VuZCB0aGUgQ29udGVudCBWaWV3IHRyYWNraW5nIGV2ZW50LlxuICAgKlxuICAgKiBodHRwczovL2RvY3MuZmFicmljLmlvL2FuZHJvaWQvYW5zd2Vycy9hbnN3ZXJzLWV2ZW50cy5odG1sI2NvbnRlbnQtdmlld1xuICAgKlxuICAgKiBAcGFyYW0gbmFtZVxuICAgKiBAcGFyYW0gdHlwZVxuICAgKiBAcGFyYW0gaWRcbiAgICogQHBhcmFtIGF0dHJpYnV0ZXNcbiAgICovXG4gIEBDb3Jkb3ZhKHsgc3luYzogdHJ1ZSB9KVxuICBzZW5kQ29udGVudFZpZXcobmFtZTogc3RyaW5nLCB0eXBlPzogc3RyaW5nLCBpZD86IHN0cmluZywgYXR0cmlidXRlcz86IEF0dHJpYnV0ZXMpOiB2b2lkIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogU2hvcnRjdXQgZm9yIHNlbmRDb250ZW50VmlldyguLi4pIHVzaW5nIHR5cGUgb2YgXCJTY3JlZW5cIi5cbiAgICpcbiAgICogQHBhcmFtIG5hbWVcbiAgICogQHBhcmFtIGlkXG4gICAqIEBwYXJhbSBhdHRyaWJ1dGVzXG4gICAqL1xuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcbiAgc2VuZFNjcmVlblZpZXcobmFtZTogc3RyaW5nLCBpZDogc3RyaW5nLCBhdHRyaWJ1dGVzPzogQXR0cmlidXRlcyk6IHZvaWQge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZW5kIGEgY3VzdG9tIHRyYWNraW5nIGV2ZW50IHdpdGggdGhlIGdpdmVuIG5hbWUuXG4gICAqXG4gICAqIGh0dHBzOi8vZG9jcy5mYWJyaWMuaW8vYW5kcm9pZC9hbnN3ZXJzL2Fuc3dlcnMtZXZlbnRzLmh0bWwjY3VzdG9tLWV2ZW50XG4gICAqXG4gICAqIEBwYXJhbSBuYW1lXG4gICAqIEBwYXJhbSBhdHRyaWJ1dGVzXG4gICAqL1xuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcbiAgc2VuZEN1c3RvbUV2ZW50KG5hbWU6IHN0cmluZywgYXR0cmlidXRlcz86IEF0dHJpYnV0ZXMpOiB2b2lkIHtcbiAgICByZXR1cm47XG4gIH1cbn1cbiJdfQ==