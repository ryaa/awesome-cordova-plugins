var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var IamportCordovaOriginal = /** @class */ (function (_super) {
    __extends(IamportCordovaOriginal, _super);
    function IamportCordovaOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    IamportCordovaOriginal.prototype.payment = function (paymentObject) { return cordova(this, "payment", {}, arguments); };
    IamportCordovaOriginal.prototype.certification = function (certificationObject) { return cordova(this, "certification", {}, arguments); };
    IamportCordovaOriginal.pluginName = "IamportCordova";
    IamportCordovaOriginal.plugin = "iamport-cordova";
    IamportCordovaOriginal.pluginRef = "cordova.plugins.IamportCordova";
    IamportCordovaOriginal.repo = "https://github.com/iamport/iamport-cordova";
    IamportCordovaOriginal.platforms = ["ios", "android"];
    return IamportCordovaOriginal;
}(AwesomeCordovaNativePlugin));
var IamportCordova = new IamportCordovaOriginal();
export { IamportCordova };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvaWFtcG9ydC1jb3Jkb3ZhL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFDQSxPQUFPLHVDQUErQyxNQUFNLCtCQUErQixDQUFDOztJQXlGeEQsa0NBQTBCOzs7O0lBUTVELGdDQUFPLGFBQUMsYUFBNEI7SUFXcEMsc0NBQWEsYUFBQyxtQkFBd0M7Ozs7Ozt5QkE3R3hEO0VBMEZvQywwQkFBMEI7U0FBakQsY0FBYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFBsdWdpbiwgQ29yZG92YSwgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4gfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvY29yZSc7XG5cbmRlY2xhcmUgY29uc3QgY29yZG92YTogQ29yZG92YSAmIHsgcGx1Z2luczogYW55IH07XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGF5bWVudE9iamVjdCB7XG4gIHRpdGxlPzogVGl0bGVEYXRhOyAvLyB3ZWJ2aWV3IHRpdGxlIGRhdGFcbiAgdXNlckNvZGU6IHN0cmluZzsgLy8gdXNlciBpZGVudGlmaWNhdGlvbiBjb2RlXG4gIGRhdGE6IFBheW1lbnREYXRhOyAvLyBwYXltZW50IGRhdGFcbiAgY2FsbGJhY2s6IGFueTsgLy8gY2FsbGJhY2sgZnVuY3Rpb24gYWZ0ZXIgcGF5bWVudFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIENlcnRpZmljYXRpb25PYmplY3Qge1xuICB0aXRsZT86IFRpdGxlRGF0YTsgLy8gd2VidmlldyB0aXRsZSBkYXRhXG4gIHVzZXJDb2RlOiBzdHJpbmc7IC8vIHVzZXIgaWRlbnRpZmljYXRpb24gY29kZVxuICBkYXRhOiBDZXJ0aWZpY2F0aW9uRGF0YTsgLy8gY2VydGlmaWNhdGlvbiBkYXRhXG4gIGNhbGxiYWNrOiBhbnk7IC8vIGNhbGxiYWNrIGZ1bmN0aW9uIGFmdGVyIGNlcnRpZmljYXRpb25cbn1cblxuZXhwb3J0IGludGVyZmFjZSBUaXRsZURhdGEge1xuICBuYW1lPzogc3RyaW5nOyAvLyB3ZWJ2aWV3IHRpdGxlIG5hbWVcbiAgY29sb3I/OiBzdHJpbmc7IC8vIHdlYnZpZXcgdGl0bGUgYmFja2dyb3VuZCBjb2xvclxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBheW1lbnREYXRhIHtcbiAgcGc/OiBzdHJpbmc7IC8vIHBheW1lbnQgZ2F0ZXdheSB0eXBlXG4gIHBheV9tZXRob2Q/OiBzdHJpbmc7IC8vIHBheW1lbnQgbWV0aG9kXG4gIG5hbWU6IHN0cmluZzsgLy8gbmFtZSBvZiBvcmRlclxuICBtZXJjaGFudF91aWQ/OiBzdHJpbmc7IC8vIHVuaXF1ZSBtZXJjaGFudCBpZFxuICBhbW91bnQ6IHN0cmluZzsgLy8gcGF5bWVudCBhbW91bnRcbiAgYnV5ZXJfbmFtZT86IHN0cmluZzsgLy8gYnV5ZXIgbmFtZVxuICBidXllcl90ZWw/OiBzdHJpbmc7IC8vIGJ1eWVyIGNvbnRhY3RcbiAgYnV5ZXJfZW1haWw/OiBzdHJpbmc7IC8vIGJ1eWVyIGVtYWlsIGFkZHJlc3NcbiAgYnV5ZXJfYWRkcj86IHN0cmluZzsgLy8gYnV5ZXIgYWRkcmVzc1xuICBidXllcl9wb3N0Y29kZT86IHN0cmluZzsgLy8gYnV5ZXIgcG9zdGNvZGVcbiAgYXBwX3NjaGVtZTogc3RyaW5nOyAvLyBjdXN0b20gYXBwIHVybCBzY2hlbWVcbiAgY3VzdG9tX2RhdGE/OiBhbnk7IC8vIGN1c3RvbSBkYXRhXG4gIG5vdGljZV91cmw/OiBzdHJpbmc7IC8vIG5vdGlmaWNhdGlvbiB1cmxcbiAgZXNjcm93PzogYm9vbGVhbjsgLy8gd2hldGhlciB0aGUgdHlwZSBvZiB0aGlzIG9yZGVyIGlzIGVzY3Jvd1xuICBkaWdpdGFsPzogYm9vbGVhbjsgLy8gd2hldGhlciB0aGlzIG9yZGVyIGlzIGZvciByZWFsIHByb2R1Y3RzIG9yIGNvbnRlbnRzXG4gIGRpc3BsYXk/OiB7XG4gICAgY2FyZF9xdW90YT86IG51bWJlcltdOyAvLyBjcmVkaXQgY2FyZCBpbnN0YWxsbWVudCBzZXR0aW5nIHZhbHVlXG4gIH07XG4gIGN1cnJlbmN5Pzogc3RyaW5nOyAvLyBwYXltZW50IGN1cnJlbmN5XG4gIGN1c3RvbWVyX3VpZD86IHN0cmluZzsgLy8gdW5pcXVlIGN1c3RvbWVyIGlkIGZvciBzdWJzY3JpcHRpb24gcGF5bWVudHNcbiAgdGF4X2ZyZWU/OiBzdHJpbmc7IC8vIHRheCBhbW91bnRcbiAgbGFuZ3VhZ2U/OiBzdHJpbmc7IC8vIGxhbmd1YWdlIHR5cGVcbiAgdmJhbmtfZHVlPzogc3RyaW5nOyAvLyB2YmFuayBkdWUgZGF0ZVxuICBiaXpfbnVtPzogc3RyaW5nOyAvLyBidXNpbmVzcyBudW1iZXJcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDZXJ0aWZpY2F0aW9uRGF0YSB7XG4gIGNvbXBhbnk/OiBzdHJpbmc7IC8vIGNvbXBhbnkgbmFtZVxuICBwaG9uZT86IHN0cmluZzsgLy8gY2VsbCBwaG9uZSBudW1iZXJcbiAgbmFtZT86IHN0cmluZzsgLy8gbmFtZVxuICBjYXJyaWVyPzogc3RyaW5nOyAvLyBjYXJyaWVyIGNvZGVcbiAgYmlydGg/OiBzdHJpbmc7IC8vIGJpcnRoIGRhdGVcbiAgbWVyY2hhbnRfdWlkPzogc3RyaW5nOyAvLyB1bmlxdWUgbWVyY2hhbnQgaWRcbiAgbWluX2FnZT86IHN0cmluZzsgLy8gbWluaW11bSBhZ2UgdG8gYWxsb3cgY2VydGlmaWNhdGlvblxuICBwb3B1cD86IGJvb2xlYW47IC8vIHdoZXRoZXIgdGhlIHdlYnZpZXcgaXMgcG9wdXBcbn1cblxuLyoqXG4gKiBAbmFtZSBJYW1wb3J0IENvcmRvdmFcbiAqIEBkZXNjcmlwdGlvblxuICogVGhpcyBwbHVnaW4gZG9lcyBzb21ldGhpbmdcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgSWFtcG9ydENvcmRvdmEgfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvaWFtcG9ydC1jb3Jkb3ZhL25neCc7XG4gKlxuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgaWFtcG9ydENvcmRvdmE6IElhbXBvcnRDb3Jkb3ZhKSB7IH1cbiAqXG4gKiAuLi5cbiAqXG4gKlxuICogdGhpcy5pYW1wb3J0Q29yZG92YS5mdW5jdGlvbk5hbWUoJ0hlbGxvJywgMTIzKVxuICogICAudGhlbigocmVzOiBhbnkpID0+IGNvbnNvbGUubG9nKHJlcykpXG4gKiAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xuICpcbiAqIGBgYFxuICovXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ0lhbXBvcnRDb3Jkb3ZhJyxcbiAgcGx1Z2luOiAnaWFtcG9ydC1jb3Jkb3ZhJyxcbiAgcGx1Z2luUmVmOiAnY29yZG92YS5wbHVnaW5zLklhbXBvcnRDb3Jkb3ZhJyxcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9pYW1wb3J0L2lhbXBvcnQtY29yZG92YScsXG4gIHBsYXRmb3JtczogWydpb3MnLCAnYW5kcm9pZCddLFxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBJYW1wb3J0Q29yZG92YSBleHRlbmRzIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luIHtcbiAgLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gaXMgdG8gbG9hZCBhIHdlYnZpZXcgb2YgYSBwYXltZW50IGdhdGV3YXkgdG8gcGF5IGZvciBzb21ldGhpbmdcbiAgICpcbiAgICogQHBhcmFtIHBheW1lbnRPYmplY3Qge1BheW1lbnRPYmplY3R9IFBheW1lbnQgZGF0YSB0byBzZXQgdGhlIHBheW1lbnQgd2Vidmlld1xuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSBBIGNhbGxiYWNrIGZ1bmN0aW9uIG9mIHRoZSBwYXltZW50IGRhdGEgaXMgdHJpZ2dlcmVkIHdoZW4gdGhlIHdlYnZpZXcgaXMgY2xvc2VkXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHBheW1lbnQocGF5bWVudE9iamVjdDogUGF5bWVudE9iamVjdCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuIGNvcmRvdmEucGx1Z2lucy5JYW1wb3J0Q29yZG92YS5wYXltZW50KHBheW1lbnRPYmplY3QpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gaXMgdG8gbG9hZCBhIHdlYnZpZXcgZm9yIGlkZW50aWZpY2F0aW9uIHdpdGggY2FycmllciB0eXBlKGxpa2UgVmVyaXpvbiksIG5hbWUgYW5kIHBob25lIG51bWJlclxuICAgKlxuICAgKiBAcGFyYW0gY2VydGlmaWNhdGlvbk9iamVjdCB7Q2VydGlmaWNhdGlvbk9iamVjdH0gQ2VydGlmaWNhdGlvbiBkYXRhIHRvIHNldCB0aGUgY2VydGlmaWNhdGlvbiB3ZWJ2aWV3XG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IEEgY2FsbGJhY2sgZnVuY3Rpb24gb2YgdGhlIGNlcnRpZmljYXRpb24gZGF0YSBpcyB0cmlnZ2VyZWQgd2hlbiB0aGUgd2VidmlldyBpcyBjbG9zZWRcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgY2VydGlmaWNhdGlvbihjZXJ0aWZpY2F0aW9uT2JqZWN0OiBDZXJ0aWZpY2F0aW9uT2JqZWN0KTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm4gY29yZG92YS5wbHVnaW5zLklhbXBvcnRDb3Jkb3ZhLmNlcnRpZmljYXRpb24oY2VydGlmaWNhdGlvbk9iamVjdCk7XG4gIH1cbn1cbiJdfQ==