import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import { Observable } from 'rxjs';
import * as i0 from "@angular/core";
var Broadcaster = /** @class */ (function (_super) {
    __extends(Broadcaster, _super);
    function Broadcaster() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Broadcaster.prototype.addEventListener = function (eventName, isGlobal) {
        if (isGlobal === void 0) { isGlobal = false; }
        return cordova(this, "addEventListener", { "observable": true, "clearFunction": "removeEventListener", "clearWithArgs": true }, arguments);
    };
    Broadcaster.prototype.fireNativeEvent = function (eventName, isGlobalOrEventData, data) { return cordova(this, "fireNativeEvent", {}, arguments); };
    Broadcaster.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: Broadcaster, deps: null, target: i0.ɵɵFactoryTarget.Injectable });
    Broadcaster.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: Broadcaster });
    Broadcaster.pluginName = "Broadcaster";
    Broadcaster.plugin = "cordova-plugin-broadcaster";
    Broadcaster.pluginRef = "broadcaster";
    Broadcaster.repo = "https://github.com/bsorrentino/cordova-broadcaster";
    Broadcaster.platforms = ["Android", "iOS", "Browser"];
    Broadcaster = __decorate([], Broadcaster);
    return Broadcaster;
}(AwesomeCordovaNativePlugin));
export { Broadcaster };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: Broadcaster, decorators: [{
            type: Injectable
        }], propDecorators: { addEventListener: [], fireNativeEvent: [] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvYnJvYWRjYXN0ZXIvbmd4L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sdUNBQStDLE1BQU0sK0JBQStCLENBQUM7QUFDNUYsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQzs7O0lBNENELCtCQUEwQjs7OztJQWF6RCxzQ0FBZ0IsYUFBQyxTQUFpQixFQUFFLFFBQWdCO1FBQWhCLHlCQUFBLEVBQUEsZ0JBQWdCOzs7SUFnQnBELHFDQUFlLGFBQUMsU0FBaUIsRUFBRSxtQkFBd0MsRUFBRSxJQUFnQjs2R0E3QmxGLFdBQVc7aUhBQVgsV0FBVzs7Ozs7O0lBQVgsV0FBVyxrQkFBWCxXQUFXO3NCQTlDeEI7RUE4Q2lDLDBCQUEwQjtTQUE5QyxXQUFXOzRGQUFYLFdBQVc7a0JBRHZCLFVBQVU7OEJBY1QsZ0JBQWdCLE1BZ0JoQixlQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29yZG92YSwgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bhd2Vzb21lLWNvcmRvdmEtcGx1Z2lucy9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuLyoqXG4gKiBTcGVjaWZpYyBkYXRhIGZvciBBbmRyb2lkIGltcGxlbWVudGF0aW9uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQW5kcm9pZERhdGEge1xuICBleHRyYXM6IG9iamVjdDtcbiAgZmxhZ3M6IG51bWJlcjtcbiAgY2F0ZWdvcnk6IHN0cmluZztcbn1cblxuLyoqXG4gKiBQb3NzaWJseSBFdmVudCBEYXRhIHR5cGVzXG4gKi9cbmV4cG9ydCB0eXBlIEV2ZW50RGF0YSA9IG9iamVjdCB8IEFuZHJvaWREYXRhIHwgbnVsbDtcblxuLyoqXG4gKiBAbmFtZSBCcm9hZGNhc3RlclxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGlzIHBsdWdpbiBhZGRzIGV4Y2hhbmdpbmcgZXZlbnRzIGJldHdlZW4gbmF0aXZlIGNvZGUgYW5kIHlvdXIgYXBwLlxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBCcm9hZGNhc3RlciB9IGZyb20gJ0Bhd2Vzb21lLWNvcmRvdmEtcGx1Z2lucy9icm9hZGNhc3Rlci9uZ3gnO1xuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgYnJvYWRjYXN0ZXI6IEJyb2FkY2FzdGVyKSB7IH1cbiAqXG4gKiAuLi5cbiAqXG4gKiAvLyBMaXN0ZW4gdG8gZXZlbnRzIGZyb20gTmF0aXZlXG4gKiB0aGlzLmJyb2FkY2FzdGVyLmFkZEV2ZW50TGlzdGVuZXIoJ2V2ZW50TmFtZScpLnN1YnNjcmliZSgoZXZlbnQpID0+IGNvbnNvbGUubG9nKGV2ZW50KSk7XG4gKlxuICogLy8gU2VuZCBldmVudCB0byBOYXRpdmVcbiAqIHRoaXMuYnJvYWRjYXN0ZXIuZmlyZU5hdGl2ZUV2ZW50KCdldmVudE5hbWUnLCB7fSkudGhlbigoKSA9PiBjb25zb2xlLmxvZygnc3VjY2VzcycpKTtcbiAqXG4gKiBgYGBcbiAqL1xuQFBsdWdpbih7XG4gIHBsdWdpbk5hbWU6ICdCcm9hZGNhc3RlcicsXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLWJyb2FkY2FzdGVyJyxcbiAgcGx1Z2luUmVmOiAnYnJvYWRjYXN0ZXInLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL2Jzb3JyZW50aW5vL2NvcmRvdmEtYnJvYWRjYXN0ZXInLFxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnLCAnQnJvd3NlciddLFxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBCcm9hZGNhc3RlciBleHRlbmRzIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luIHtcbiAgLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gbGlzdGVuIHRvIGFuIGV2ZW50IHNlbnQgZnJvbSB0aGUgbmF0aXZlIGNvZGVcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZVxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGlzR2xvYmFsIFZhbGlkIG9ubHkgZm9yIEFuZHJvaWQuIEl0IGFsbG93cyB0byBsaXN0ZW4gZm9yIGdsb2JhbCBtZXNzYWdlcyhpLmUuIGludGVudHMpXG4gICAqIEByZXR1cm5zIHtPYnNlcnZhYmxlPGFueT59IFJldHVybnMgYW4gb2JzZXJ2YWJsZSB0byB3YXRjaCB3aGVuIGFuIGV2ZW50IGlzIHJlY2VpdmVkXG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgb2JzZXJ2YWJsZTogdHJ1ZSxcbiAgICBjbGVhckZ1bmN0aW9uOiAncmVtb3ZlRXZlbnRMaXN0ZW5lcicsXG4gICAgY2xlYXJXaXRoQXJnczogdHJ1ZSxcbiAgfSlcbiAgYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWU6IHN0cmluZywgaXNHbG9iYWwgPSBmYWxzZSk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gc2VuZHMgZGF0YSB0byB0aGUgbmF0aXZlIGNvZGVcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZVxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGlzR2xvYmFsT3JFdmVudERhdGEgbWVhbnMgdGhhdCBtZXNzYWdlIGlzIGdsb2JhbCAodmFsaWQgb25seSBvbiBBbmRyb2lkKVxuICAgKiBAcGFyYW0ge0FuZHJvaWREYXRhfSBpc0dsb2JhbE9yRXZlbnREYXRhIGFsbG93cyB0byBzcGVjaWZ5ICdmbGFnc2AgYW5kICdjYXRlZ29yeScgKHZhbGlkIG9ubHkgb24gQW5kcm9pZClcbiAgICogQHBhcmFtIHtvYmplY3R9IGlzR2xvYmFsT3JFdmVudERhdGEgYWxsb3dzIHRvIHNwZWNpZnkgYSBnZW5lcmljIG9iamVjdCBjb250YWluaW5nIGN1c3RvbSBldmVudCBkYXRhIChhbGwgcGxhdGZvcm0pXG4gICAqIEBwYXJhbSB7QW5kcm9pZERhdGF9IFtkYXRhXSBpZiBpc0dsb2JhbCBpcyBzZXQsIGFsbG93cyB0byBzcGVjaWZ5ICdmbGFnc2AgYW5kICdjYXRlZ29yeScgaWYgaXNHbG9iYWwgaXMgc2V0ICh2YWxpZCBvbmx5IG9uIEFuZHJvaWQpXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBbZGF0YV0gaWYgaXNHbG9iYWwgaXMgc2V0LCBhbGxvd3MgdG8gc3BlY2lmeSBhIGdlbmVyaWMgb2JqZWN0IGNvbnRhaW5pbmcgY3VzdG9tIGV2ZW50IGRhdGEgKGFsbCBwbGF0Zm9ybSlcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIGFuIGV2ZW50IGlzIHN1Y2Nlc3NmdWxseSBmaXJlZFxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBmaXJlTmF0aXZlRXZlbnQoZXZlbnROYW1lOiBzdHJpbmcsIGlzR2xvYmFsT3JFdmVudERhdGE6IGJvb2xlYW4gfCBFdmVudERhdGEsIGRhdGE/OiBFdmVudERhdGEpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxufVxuIl19