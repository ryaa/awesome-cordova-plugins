var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import { Observable } from 'rxjs';
var DeviceOrientationOriginal = /** @class */ (function (_super) {
    __extends(DeviceOrientationOriginal, _super);
    function DeviceOrientationOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DeviceOrientationOriginal.prototype.getCurrentHeading = function () { return cordova(this, "getCurrentHeading", {}, arguments); };
    DeviceOrientationOriginal.prototype.watchHeading = function (options) { return cordova(this, "watchHeading", { "callbackOrder": "reverse", "observable": true, "clearFunction": "clearWatch" }, arguments); };
    DeviceOrientationOriginal.pluginName = "DeviceOrientation";
    DeviceOrientationOriginal.plugin = "cordova-plugin-device-orientation";
    DeviceOrientationOriginal.pluginRef = "navigator.compass";
    DeviceOrientationOriginal.repo = "https://github.com/apache/cordova-plugin-device-orientation";
    DeviceOrientationOriginal.platforms = ["Amazon Fire OS", "Android", "BlackBerry 10", "Browser", "Firefox OS", "iOS", "Tizen", "Ubuntu", "Windows", "Windows Phone"];
    return DeviceOrientationOriginal;
}(AwesomeCordovaNativePlugin));
var DeviceOrientation = new DeviceOrientationOriginal();
export { DeviceOrientation };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvZGV2aWNlLW9yaWVudGF0aW9uL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUNBLE9BQU8sdUNBQStDLE1BQU0sK0JBQStCLENBQUM7QUFDNUYsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQzs7SUFzRksscUNBQTBCOzs7O0lBTy9ELDZDQUFpQjtJQWlCakIsd0NBQVksYUFBQyxPQUF5Qzs7Ozs7OzRCQWhIeEQ7RUF3RnVDLDBCQUEwQjtTQUFwRCxpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb3Jkb3ZhLCBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIERldmljZU9yaWVudGF0aW9uQ29tcGFzc0hlYWRpbmcge1xuICAvKipcbiAgICogVGhlIGhlYWRpbmcgaW4gZGVncmVlcyBmcm9tIDAtMzU5Ljk5IGF0IGEgc2luZ2xlIG1vbWVudCBpbiB0aW1lLiAoTnVtYmVyKVxuICAgKi9cbiAgbWFnbmV0aWNIZWFkaW5nOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBoZWFkaW5nIHJlbGF0aXZlIHRvIHRoZSBnZW9ncmFwaGljIE5vcnRoIFBvbGUgaW4gZGVncmVlcyAwLTM1OS45OSBhdCBhIHNpbmdsZSBtb21lbnQgaW4gdGltZS4gQSBuZWdhdGl2ZSB2YWx1ZSBpbmRpY2F0ZXMgdGhhdCB0aGUgdHJ1ZSBoZWFkaW5nIGNhbid0IGJlIGRldGVybWluZWQuIChOdW1iZXIpXG4gICAqL1xuICB0cnVlSGVhZGluZzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgZGV2aWF0aW9uIGluIGRlZ3JlZXMgYmV0d2VlbiB0aGUgcmVwb3J0ZWQgaGVhZGluZyBhbmQgdGhlIHRydWUgaGVhZGluZy4gKE51bWJlcilcbiAgICovXG4gIGhlYWRpbmdBY2N1cmFjeTogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgdGltZSBhdCB3aGljaCB0aGlzIGhlYWRpbmcgd2FzIGRldGVybWluZWQuIChET01UaW1lU3RhbXApXG4gICAqL1xuICB0aW1lc3RhbXA6IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBEZXZpY2VPcmllbnRhdGlvbkNvbXBhc3NPcHRpb25zIHtcbiAgLyoqXG4gICAqIEhvdyBvZnRlbiB0byByZXRyaWV2ZSB0aGUgY29tcGFzcyBoZWFkaW5nIGluIG1pbGxpc2Vjb25kcy4gKE51bWJlcikgKERlZmF1bHQ6IDEwMClcbiAgICovXG4gIGZyZXF1ZW5jeT86IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIGNoYW5nZSBpbiBkZWdyZWVzIHJlcXVpcmVkIHRvIGluaXRpYXRlIGEgd2F0Y2hIZWFkaW5nIHN1Y2Nlc3MgY2FsbGJhY2suIFdoZW4gdGhpcyB2YWx1ZSBpcyBzZXQsIGZyZXF1ZW5jeSBpcyBpZ25vcmVkLiAoTnVtYmVyKVxuICAgKi9cbiAgZmlsdGVyPzogbnVtYmVyO1xufVxuXG4vKipcbiAqIEBuYW1lIERldmljZSBPcmllbnRhdGlvblxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXF1aXJlcyBDb3Jkb3ZhIHBsdWdpbjogYGNvcmRvdmEtcGx1Z2luLWRldmljZS1vcmllbnRhdGlvbmAuIEZvciBtb3JlIGluZm8sIHBsZWFzZSBzZWUgdGhlIFtEZXZpY2UgT3JpZW50YXRpb24gZG9jc10oaHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9jb3Jkb3ZhLXBsdWdpbi1kZXZpY2Utb3JpZW50YXRpb24pLlxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiAvLyBEZXZpY2VPcmllbnRhdGlvbkNvbXBhc3NIZWFkaW5nIGlzIGFuIGludGVyZmFjZSBmb3IgY29tcGFzc1xuICogaW1wb3J0IHsgRGV2aWNlT3JpZW50YXRpb24sIERldmljZU9yaWVudGF0aW9uQ29tcGFzc0hlYWRpbmcgfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvZGV2aWNlLW9yaWVudGF0aW9uL25neCc7XG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSBkZXZpY2VPcmllbnRhdGlvbjogRGV2aWNlT3JpZW50YXRpb24pIHsgfVxuICpcbiAqIC4uLlxuICpcbiAqIC8vIEdldCB0aGUgZGV2aWNlIGN1cnJlbnQgY29tcGFzcyBoZWFkaW5nXG4gKiB0aGlzLmRldmljZU9yaWVudGF0aW9uLmdldEN1cnJlbnRIZWFkaW5nKCkudGhlbihcbiAqICAgKGRhdGE6IERldmljZU9yaWVudGF0aW9uQ29tcGFzc0hlYWRpbmcpID0+IGNvbnNvbGUubG9nKGRhdGEpLFxuICogICAoZXJyb3I6IGFueSkgPT4gY29uc29sZS5sb2coZXJyb3IpXG4gKiApO1xuICpcbiAqIC8vIFdhdGNoIHRoZSBkZXZpY2UgY29tcGFzcyBoZWFkaW5nIGNoYW5nZVxuICogdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMuZGV2aWNlT3JpZW50YXRpb24ud2F0Y2hIZWFkaW5nKCkuc3Vic2NyaWJlKFxuICogICAoZGF0YTogRGV2aWNlT3JpZW50YXRpb25Db21wYXNzSGVhZGluZykgPT4gY29uc29sZS5sb2coZGF0YSlcbiAqICk7XG4gKlxuICogLy8gU3RvcCB3YXRjaGluZyBoZWFkaW5nIGNoYW5nZVxuICogc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gKiBgYGBcbiAqIEBpbnRlcmZhY2VzXG4gKiBEZXZpY2VPcmllbnRhdGlvbkNvbXBhc3NPcHRpb25zXG4gKiBEZXZpY2VPcmllbnRhdGlvbkNvbXBhc3NIZWFkaW5nXG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnRGV2aWNlT3JpZW50YXRpb24nLFxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1kZXZpY2Utb3JpZW50YXRpb24nLFxuICBwbHVnaW5SZWY6ICduYXZpZ2F0b3IuY29tcGFzcycsXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vYXBhY2hlL2NvcmRvdmEtcGx1Z2luLWRldmljZS1vcmllbnRhdGlvbicsXG4gIHBsYXRmb3JtczogW1xuICAgICdBbWF6b24gRmlyZSBPUycsXG4gICAgJ0FuZHJvaWQnLFxuICAgICdCbGFja0JlcnJ5IDEwJyxcbiAgICAnQnJvd3NlcicsXG4gICAgJ0ZpcmVmb3ggT1MnLFxuICAgICdpT1MnLFxuICAgICdUaXplbicsXG4gICAgJ1VidW50dScsXG4gICAgJ1dpbmRvd3MnLFxuICAgICdXaW5kb3dzIFBob25lJyxcbiAgXSxcbn0pXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgRGV2aWNlT3JpZW50YXRpb24gZXh0ZW5kcyBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiB7XG4gIC8qKlxuICAgKiBHZXQgdGhlIGN1cnJlbnQgY29tcGFzcyBoZWFkaW5nLlxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxEZXZpY2VPcmllbnRhdGlvbkNvbXBhc3NIZWFkaW5nPn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgZ2V0Q3VycmVudEhlYWRpbmcoKTogUHJvbWlzZTxEZXZpY2VPcmllbnRhdGlvbkNvbXBhc3NIZWFkaW5nPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgZGV2aWNlIGN1cnJlbnQgaGVhZGluZyBhdCBhIHJlZ3VsYXIgaW50ZXJ2YWxcbiAgICpcbiAgICogU3RvcCB0aGUgd2F0Y2ggYnkgdW5zdWJzY3JpYmluZyBmcm9tIHRoZSBvYnNlcnZhYmxlXG4gICAqXG4gICAqIEBwYXJhbSB7RGV2aWNlT3JpZW50YXRpb25Db21wYXNzT3B0aW9uc30gW29wdGlvbnNdIE9wdGlvbnMgZm9yIGNvbXBhc3MuIEZyZXF1ZW5jeSBhbmQgRmlsdGVyLiBPcHRpb25hbFxuICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZTxEZXZpY2VPcmllbnRhdGlvbkNvbXBhc3NIZWFkaW5nPn0gUmV0dXJucyBhbiBvYnNlcnZhYmxlIHRoYXQgY29udGFpbnMgdGhlIGNvbXBhc3MgaGVhZGluZ1xuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIGNhbGxiYWNrT3JkZXI6ICdyZXZlcnNlJyxcbiAgICBvYnNlcnZhYmxlOiB0cnVlLFxuICAgIGNsZWFyRnVuY3Rpb246ICdjbGVhcldhdGNoJyxcbiAgfSlcbiAgd2F0Y2hIZWFkaW5nKG9wdGlvbnM/OiBEZXZpY2VPcmllbnRhdGlvbkNvbXBhc3NPcHRpb25zKTogT2JzZXJ2YWJsZTxEZXZpY2VPcmllbnRhdGlvbkNvbXBhc3NIZWFkaW5nPiB7XG4gICAgcmV0dXJuO1xuICB9XG59XG4iXX0=