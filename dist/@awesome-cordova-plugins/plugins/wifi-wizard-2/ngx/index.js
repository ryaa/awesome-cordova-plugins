import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordovaFunctionOverride, cordova } from '@awesome-cordova-plugins/core';
var WifiWizard2 = /** @class */ (function (_super) {
    __extends(WifiWizard2, _super);
    function WifiWizard2() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WifiWizard2.prototype.iOSConnectNetwork = function (ssid, ssidPassword) { return cordova(this, "iOSConnectNetwork", { "otherPromise": true, "platforms": ["iOS"] }, arguments); };
    WifiWizard2.prototype.iOSDisconnectNetwork = function (ssid) { return cordova(this, "iOSDisconnectNetwork", { "otherPromise": true, "platforms": ["iOS"] }, arguments); };
    WifiWizard2.prototype.add = function (wifiConfig) { return cordova(this, "add", { "otherPromise": true }, arguments); };
    WifiWizard2.prototype.remove = function (ssid) { return cordova(this, "remove", { "otherPromise": true }, arguments); };
    WifiWizard2.prototype.connect = function (ssid, bindAll, password, algorithm) { return cordova(this, "connect", { "otherPromise": true, "platforms": ["Android"] }, arguments); };
    WifiWizard2.prototype.disconnect = function (ssid) { return cordova(this, "disconnect", { "otherPromise": true, "platforms": ["Android"] }, arguments); };
    WifiWizard2.prototype.enable = function (ssid, bindAll, waitForConnection) { return cordova(this, "enable", { "otherPromise": true, "platforms": ["Android"] }, arguments); };
    WifiWizard2.prototype.disable = function (ssid) { return cordova(this, "disable", { "otherPromise": true, "platforms": ["Android"] }, arguments); };
    WifiWizard2.prototype.reassociate = function () { return cordova(this, "reassociate", { "otherPromise": true, "platforms": ["Android"] }, arguments); };
    WifiWizard2.prototype.reconnect = function () { return cordova(this, "reconnect", { "otherPromise": true, "platforms": ["Android"] }, arguments); };
    WifiWizard2.prototype.listNetworks = function () { return cordova(this, "listNetworks", { "otherPromise": true }, arguments); };
    WifiWizard2.prototype.scan = function (options) { return cordova(this, "scan", { "otherPromise": true }, arguments); };
    WifiWizard2.prototype.startScan = function () { return cordova(this, "startScan", { "otherPromise": true }, arguments); };
    WifiWizard2.prototype.getScanResults = function (options) { return cordova(this, "getScanResults", { "otherPromise": true }, arguments); };
    WifiWizard2.prototype.isWifiEnabled = function () { return cordova(this, "isWifiEnabled", { "otherPromise": true }, arguments); };
    WifiWizard2.prototype.setWifiEnabled = function (enabled) { return cordova(this, "setWifiEnabled", { "otherPromise": true, "platforms": ["Android"] }, arguments); };
    WifiWizard2.prototype.enableWifi = function () { return cordova(this, "enableWifi", { "otherPromise": true, "platforms": ["Android"] }, arguments); };
    WifiWizard2.prototype.disableWifi = function () { return cordova(this, "disableWifi", { "otherPromise": true, "platforms": ["Android"] }, arguments); };
    WifiWizard2.prototype.resetBindAll = function () { return cordova(this, "resetBindAll", { "otherPromise": true }, arguments); };
    WifiWizard2.prototype.setBindAll = function () { return cordova(this, "setBindAll", { "otherPromise": true }, arguments); };
    WifiWizard2.prototype.getWifiRouterIP = function () { return cordova(this, "getWifiRouterIP", { "otherPromise": true }, arguments); };
    WifiWizard2.prototype.getWifiIP = function () { return cordova(this, "getWifiIP", { "otherPromise": true }, arguments); };
    WifiWizard2.prototype.getWifiIPInfo = function () { return cordova(this, "getWifiIPInfo", { "otherPromise": true }, arguments); };
    WifiWizard2.prototype.getSSIDNetworkID = function (ssid) { return cordova(this, "getSSIDNetworkID", { "otherPromise": true }, arguments); };
    WifiWizard2.prototype.getConnectedNetworkID = function () { return cordova(this, "getConnectedNetworkID", { "otherPromise": true }, arguments); };
    WifiWizard2.prototype.getConnectedSSID = function () { return cordova(this, "getConnectedSSID", { "otherPromise": true }, arguments); };
    WifiWizard2.prototype.getConnectedBSSID = function () { return cordova(this, "getConnectedBSSID", { "otherPromise": true }, arguments); };
    WifiWizard2.prototype.isConnectedToInternet = function () { return cordova(this, "isConnectedToInternet", { "otherPromise": true }, arguments); };
    WifiWizard2.prototype.canPingWifiRouter = function () { return cordova(this, "canPingWifiRouter", { "otherPromise": true }, arguments); };
    WifiWizard2.prototype.canConnectToRouter = function () { return cordova(this, "canConnectToRouter", { "otherPromise": true }, arguments); };
    WifiWizard2.prototype.canConnectToInternet = function () { return cordova(this, "canConnectToInternet", { "otherPromise": true }, arguments); };
    WifiWizard2.prototype.requestPermission = function () { return cordova(this, "requestPermission", { "otherPromise": true }, arguments); };
    WifiWizard2.prototype.formatWifiConfig = function (ssid, password, algorithm, isHiddenSSID) { return cordovaFunctionOverride(this, "formatWifiConfig", {}, arguments); };
    WifiWizard2.prototype.formatWPAConfig = function (ssid, password, isHiddenSSID) { return cordovaFunctionOverride(this, "formatWPAConfig", {}, arguments); };
    WifiWizard2.prototype.formatWifiString = function (ssid) { return cordovaFunctionOverride(this, "formatWifiString", {}, arguments); };
    WifiWizard2.prototype.timeout = function (delay) { return cordovaFunctionOverride(this, "timeout", {}, arguments); };
    WifiWizard2.pluginName = "WifiWizard2";
    WifiWizard2.plugin = "cordova-plugin-wifiwizard2";
    WifiWizard2.pluginRef = "WifiWizard2";
    WifiWizard2.repo = "https://github.com/tripflex/WifiWizard2";
    WifiWizard2.platforms = ["Android", "iOS"];
    WifiWizard2.decorators = [
        { type: Injectable }
    ];
    return WifiWizard2;
}(AwesomeCordovaNativePlugin));
export { WifiWizard2 };
//# sourceMappingURL=data:application/json;base64,