var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordovaFunctionOverride, cordova } from '@awesome-cordova-plugins/core';
var WifiWizard2Original = /** @class */ (function (_super) {
    __extends(WifiWizard2Original, _super);
    function WifiWizard2Original() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WifiWizard2Original.prototype.iOSConnectNetwork = function (ssid, ssidPassword) { return cordova(this, "iOSConnectNetwork", { "otherPromise": true, "platforms": ["iOS"] }, arguments); };
    WifiWizard2Original.prototype.iOSDisconnectNetwork = function (ssid) { return cordova(this, "iOSDisconnectNetwork", { "otherPromise": true, "platforms": ["iOS"] }, arguments); };
    WifiWizard2Original.prototype.add = function (wifiConfig) { return cordova(this, "add", { "otherPromise": true }, arguments); };
    WifiWizard2Original.prototype.remove = function (ssid) { return cordova(this, "remove", { "otherPromise": true }, arguments); };
    WifiWizard2Original.prototype.connect = function (ssid, bindAll, password, algorithm) { return cordova(this, "connect", { "otherPromise": true, "platforms": ["Android"] }, arguments); };
    WifiWizard2Original.prototype.disconnect = function (ssid) { return cordova(this, "disconnect", { "otherPromise": true, "platforms": ["Android"] }, arguments); };
    WifiWizard2Original.prototype.enable = function (ssid, bindAll, waitForConnection) { return cordova(this, "enable", { "otherPromise": true, "platforms": ["Android"] }, arguments); };
    WifiWizard2Original.prototype.disable = function (ssid) { return cordova(this, "disable", { "otherPromise": true, "platforms": ["Android"] }, arguments); };
    WifiWizard2Original.prototype.reassociate = function () { return cordova(this, "reassociate", { "otherPromise": true, "platforms": ["Android"] }, arguments); };
    WifiWizard2Original.prototype.reconnect = function () { return cordova(this, "reconnect", { "otherPromise": true, "platforms": ["Android"] }, arguments); };
    WifiWizard2Original.prototype.listNetworks = function () { return cordova(this, "listNetworks", { "otherPromise": true }, arguments); };
    WifiWizard2Original.prototype.scan = function (options) { return cordova(this, "scan", { "otherPromise": true }, arguments); };
    WifiWizard2Original.prototype.startScan = function () { return cordova(this, "startScan", { "otherPromise": true }, arguments); };
    WifiWizard2Original.prototype.getScanResults = function (options) { return cordova(this, "getScanResults", { "otherPromise": true }, arguments); };
    WifiWizard2Original.prototype.isWifiEnabled = function () { return cordova(this, "isWifiEnabled", { "otherPromise": true }, arguments); };
    WifiWizard2Original.prototype.setWifiEnabled = function (enabled) { return cordova(this, "setWifiEnabled", { "otherPromise": true, "platforms": ["Android"] }, arguments); };
    WifiWizard2Original.prototype.enableWifi = function () { return cordova(this, "enableWifi", { "otherPromise": true, "platforms": ["Android"] }, arguments); };
    WifiWizard2Original.prototype.disableWifi = function () { return cordova(this, "disableWifi", { "otherPromise": true, "platforms": ["Android"] }, arguments); };
    WifiWizard2Original.prototype.resetBindAll = function () { return cordova(this, "resetBindAll", { "otherPromise": true }, arguments); };
    WifiWizard2Original.prototype.setBindAll = function () { return cordova(this, "setBindAll", { "otherPromise": true }, arguments); };
    WifiWizard2Original.prototype.getWifiRouterIP = function () { return cordova(this, "getWifiRouterIP", { "otherPromise": true }, arguments); };
    WifiWizard2Original.prototype.getWifiIP = function () { return cordova(this, "getWifiIP", { "otherPromise": true }, arguments); };
    WifiWizard2Original.prototype.getWifiIPInfo = function () { return cordova(this, "getWifiIPInfo", { "otherPromise": true }, arguments); };
    WifiWizard2Original.prototype.getSSIDNetworkID = function (ssid) { return cordova(this, "getSSIDNetworkID", { "otherPromise": true }, arguments); };
    WifiWizard2Original.prototype.getConnectedNetworkID = function () { return cordova(this, "getConnectedNetworkID", { "otherPromise": true }, arguments); };
    WifiWizard2Original.prototype.getConnectedSSID = function () { return cordova(this, "getConnectedSSID", { "otherPromise": true }, arguments); };
    WifiWizard2Original.prototype.getConnectedBSSID = function () { return cordova(this, "getConnectedBSSID", { "otherPromise": true }, arguments); };
    WifiWizard2Original.prototype.isConnectedToInternet = function () { return cordova(this, "isConnectedToInternet", { "otherPromise": true }, arguments); };
    WifiWizard2Original.prototype.canPingWifiRouter = function () { return cordova(this, "canPingWifiRouter", { "otherPromise": true }, arguments); };
    WifiWizard2Original.prototype.canConnectToRouter = function () { return cordova(this, "canConnectToRouter", { "otherPromise": true }, arguments); };
    WifiWizard2Original.prototype.canConnectToInternet = function () { return cordova(this, "canConnectToInternet", { "otherPromise": true }, arguments); };
    WifiWizard2Original.prototype.requestPermission = function () { return cordova(this, "requestPermission", { "otherPromise": true }, arguments); };
    WifiWizard2Original.prototype.formatWifiConfig = function (ssid, password, algorithm, isHiddenSSID) { return cordovaFunctionOverride(this, "formatWifiConfig", {}, arguments); };
    WifiWizard2Original.prototype.formatWPAConfig = function (ssid, password, isHiddenSSID) { return cordovaFunctionOverride(this, "formatWPAConfig", {}, arguments); };
    WifiWizard2Original.prototype.formatWifiString = function (ssid) { return cordovaFunctionOverride(this, "formatWifiString", {}, arguments); };
    WifiWizard2Original.prototype.timeout = function (delay) { return cordovaFunctionOverride(this, "timeout", {}, arguments); };
    WifiWizard2Original.pluginName = "WifiWizard2";
    WifiWizard2Original.plugin = "cordova-plugin-wifiwizard2";
    WifiWizard2Original.pluginRef = "WifiWizard2";
    WifiWizard2Original.repo = "https://github.com/tripflex/WifiWizard2";
    WifiWizard2Original.platforms = ["Android", "iOS"];
    return WifiWizard2Original;
}(AwesomeCordovaNativePlugin));
var WifiWizard2 = new WifiWizard2Original();
export { WifiWizard2 };
//# sourceMappingURL=data:application/json;base64,