import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import { Observable } from 'rxjs';
import * as i0 from "@angular/core";
export var AdViewPosition;
(function (AdViewPosition) {
    AdViewPosition["TOP_CENTER"] = "top_center";
    AdViewPosition["TOP_RIGHT"] = "top_right";
    AdViewPosition["CENTERED"] = "centered";
    AdViewPosition["CENTER_LEFT"] = "center_left";
    AdViewPosition["CENTER_RIGHT"] = "center_right";
    AdViewPosition["BOTTOM_LEFT"] = "bottom_left";
    AdViewPosition["BOTTOM_CENTER"] = "bottom_center";
    AdViewPosition["BOTTOM_RIGHT"] = "bottom_right";
})(AdViewPosition || (AdViewPosition = {}));
export var ConsentDialogState;
(function (ConsentDialogState) {
    ConsentDialogState[ConsentDialogState["UNKNOWN"] = 0] = "UNKNOWN";
    ConsentDialogState[ConsentDialogState["APPLIES"] = 1] = "APPLIES";
    ConsentDialogState[ConsentDialogState["DOES_NOT_APPLY"] = 2] = "DOES_NOT_APPLY";
})(ConsentDialogState || (ConsentDialogState = {}));
var Applovin = /** @class */ (function (_super) {
    __extends(Applovin, _super);
    function Applovin() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Applovin.prototype.initialize = function (sdkKey) { return cordova(this, "initialize", {}, arguments); };
    Applovin.prototype.showMediationDebugger = function () { return cordova(this, "showMediationDebugger", {}, arguments); };
    Applovin.prototype.getConsentDialogState = function () { return cordova(this, "getConsentDialogState", {}, arguments); };
    Applovin.prototype.setHasUserConsent = function (hasUserConsent) { return cordova(this, "setHasUserConsent", {}, arguments); };
    Applovin.prototype.hasUserConsent = function () { return cordova(this, "hasUserConsent", {}, arguments); };
    Applovin.prototype.setIsAgeRestrictedUser = function (isAgeRestrictedUser) { return cordova(this, "setIsAgeRestrictedUser", {}, arguments); };
    Applovin.prototype.isAgeRestrictedUser = function () { return cordova(this, "isAgeRestrictedUser", {}, arguments); };
    Applovin.prototype.setDoNotSell = function (isDoNotSell) { return cordova(this, "setDoNotSell", {}, arguments); };
    Applovin.prototype.isDoNotSell = function () { return cordova(this, "isDoNotSell", {}, arguments); };
    Applovin.prototype.isTablet = function () { return cordova(this, "isTablet", {}, arguments); };
    Applovin.prototype.setUserId = function (userId) { return cordova(this, "setUserId", {}, arguments); };
    Applovin.prototype.setMuted = function () { return cordova(this, "setMuted", {}, arguments); };
    Applovin.prototype.setVerboseLogging = function (verboseLoggingEnabled) { return cordova(this, "setVerboseLogging", {}, arguments); };
    Applovin.prototype.setTestDeviceAdvertisingIds = function (advertisingIds) { return cordova(this, "setTestDeviceAdvertisingIds", {}, arguments); };
    Applovin.prototype.trackEvent = function (event, parameters) { return cordova(this, "trackEvent", {}, arguments); };
    Applovin.prototype.createBanner = function (adUnitId, position) { return cordova(this, "createBanner", {}, arguments); };
    Applovin.prototype.setBannerBackgroundColor = function (adUnitId, hexColorCode) { return cordova(this, "setBannerBackgroundColor", {}, arguments); };
    Applovin.prototype.setBannerPlacement = function (adUnitId, placement) { return cordova(this, "setBannerPlacement", {}, arguments); };
    Applovin.prototype.setBannerExtraParameter = function (adUnitId, key, value) { return cordova(this, "setBannerExtraParameter", {}, arguments); };
    Applovin.prototype.showBanner = function (adUnitId) { return cordova(this, "showBanner", {}, arguments); };
    Applovin.prototype.hideBanner = function (adUnitId) { return cordova(this, "hideBanner", {}, arguments); };
    Applovin.prototype.destroyBanner = function (adUnitId) { return cordova(this, "destroyBanner", {}, arguments); };
    Applovin.prototype.createMRec = function (adUnitId, position) { return cordova(this, "createMRec", {}, arguments); };
    Applovin.prototype.setMRecBackgroundColor = function (adUnitId, hexColorCode) { return cordova(this, "setMRecBackgroundColor", {}, arguments); };
    Applovin.prototype.setMRecPlacement = function (adUnitId, placement) { return cordova(this, "setMRecPlacement", {}, arguments); };
    Applovin.prototype.setMRecExtraParameter = function (adUnitId, key, value) { return cordova(this, "setMRecExtraParameter", {}, arguments); };
    Applovin.prototype.showMRec = function (adUnitId) { return cordova(this, "showMRec", {}, arguments); };
    Applovin.prototype.hideMRec = function (adUnitId) { return cordova(this, "hideMRec", {}, arguments); };
    Applovin.prototype.destroyMRec = function (adUnitId) { return cordova(this, "destroyMRec", {}, arguments); };
    Applovin.prototype.loadInterstitial = function (adUnitId) { return cordova(this, "loadInterstitial", {}, arguments); };
    Applovin.prototype.showInterstitial = function (adUnitId, placement) { return cordova(this, "showInterstitial", {}, arguments); };
    Applovin.prototype.setInterstitialExtraParameter = function (adUnitId, key, value) { return cordova(this, "setInterstitialExtraParameter", {}, arguments); };
    Applovin.prototype.onInterstitialLoaded = function () { return cordova(this, "onInterstitialLoaded", { "eventObservable": true, "event": "OnInterstitialLoadedEvent" }, arguments); };
    Applovin.prototype.onInterstitialLoadFailed = function () { return cordova(this, "onInterstitialLoadFailed", { "eventObservable": true, "event": "OnInterstitialLoadFailedEvent" }, arguments); };
    Applovin.prototype.onInterstitialDisplayed = function () { return cordova(this, "onInterstitialDisplayed", { "eventObservable": true, "event": "OnInterstitialDisplayedEvent" }, arguments); };
    Applovin.prototype.onInterstitialHidden = function () { return cordova(this, "onInterstitialHidden", { "eventObservable": true, "event": "OnInterstitialHiddenEvent" }, arguments); };
    Applovin.prototype.onInterstitialAdFailedToDisplay = function () { return cordova(this, "onInterstitialAdFailedToDisplay", { "eventObservable": true, "event": "OnInterstitialAdFailedToDisplayEvent" }, arguments); };
    Applovin.prototype.loadRewardedAd = function (adUnitId) { return cordova(this, "loadRewardedAd", {}, arguments); };
    Applovin.prototype.showRewardedAd = function (adUnitId, placement) { return cordova(this, "showRewardedAd", {}, arguments); };
    Applovin.prototype.setRewardedAdExtraParameter = function (adUnitId, key, value) { return cordova(this, "setRewardedAdExtraParameter", {}, arguments); };
    Applovin.prototype.onRewardedAdLoaded = function () { return cordova(this, "onRewardedAdLoaded", { "eventObservable": true, "event": "OnRewardedAdLoadedEvent" }, arguments); };
    Applovin.prototype.onRewardedAdLoadFailed = function () { return cordova(this, "onRewardedAdLoadFailed", { "eventObservable": true, "event": "OnRewardedAdLoadFailedEvent" }, arguments); };
    Applovin.prototype.onRewardedAdDisplayed = function () { return cordova(this, "onRewardedAdDisplayed", { "eventObservable": true, "event": "OnRewardedAdDisplayedEvent" }, arguments); };
    Applovin.prototype.onRewardedAdHidden = function () { return cordova(this, "onRewardedAdHidden", { "eventObservable": true, "event": "OnRewardedAdHiddenEvent" }, arguments); };
    Applovin.prototype.onRewardedAdAdFailedToDisplay = function () { return cordova(this, "onRewardedAdAdFailedToDisplay", { "eventObservable": true, "event": "OnRewardedAdAdFailedToDisplayEvent" }, arguments); };
    Applovin.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: Applovin, deps: null, target: i0.ɵɵFactoryTarget.Injectable });
    Applovin.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: Applovin });
    Applovin.pluginName = "Applovin";
    Applovin.plugin = "cordova-plugin-applovin-max";
    Applovin.pluginRef = "applovin";
    Applovin.repo = "https://github.com/AppLovin/AppLovin-MAX-Cordova";
    Applovin.platforms = ["Android", "iOS"];
    Applovin = __decorate([], Applovin);
    return Applovin;
}(AwesomeCordovaNativePlugin));
export { Applovin };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: Applovin, decorators: [{
            type: Injectable
        }], propDecorators: { initialize: [], showMediationDebugger: [], getConsentDialogState: [], setHasUserConsent: [], hasUserConsent: [], setIsAgeRestrictedUser: [], isAgeRestrictedUser: [], setDoNotSell: [], isDoNotSell: [], isTablet: [], setUserId: [], setMuted: [], setVerboseLogging: [], setTestDeviceAdvertisingIds: [], trackEvent: [], createBanner: [], setBannerBackgroundColor: [], setBannerPlacement: [], setBannerExtraParameter: [], showBanner: [], hideBanner: [], destroyBanner: [], createMRec: [], setMRecBackgroundColor: [], setMRecPlacement: [], setMRecExtraParameter: [], showMRec: [], hideMRec: [], destroyMRec: [], loadInterstitial: [], showInterstitial: [], setInterstitialExtraParameter: [], onInterstitialLoaded: [], onInterstitialLoadFailed: [], onInterstitialDisplayed: [], onInterstitialHidden: [], onInterstitialAdFailedToDisplay: [], loadRewardedAd: [], showRewardedAd: [], setRewardedAdExtraParameter: [], onRewardedAdLoaded: [], onRewardedAdLoadFailed: [], onRewardedAdDisplayed: [], onRewardedAdHidden: [], onRewardedAdAdFailedToDisplay: [] } });
//# sourceMappingURL=data:application/json;base64,