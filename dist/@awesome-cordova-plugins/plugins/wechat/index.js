var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var WechatOriginal = /** @class */ (function (_super) {
    __extends(WechatOriginal, _super);
    function WechatOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WechatOriginal.prototype.isInstalled = function () { return cordova(this, "isInstalled", {}, arguments); };
    WechatOriginal.prototype.share = function (params) { return cordova(this, "share", {}, arguments); };
    WechatOriginal.prototype.auth = function (scope, state) { return cordova(this, "auth", {}, arguments); };
    WechatOriginal.prototype.sendPaymentRequest = function (params) { return cordova(this, "sendPaymentRequest", {}, arguments); };
    WechatOriginal.prototype.jumpToWechat = function (url) { return cordova(this, "jumpToWechat", {}, arguments); };
    WechatOriginal.prototype.chooseInvoiceFromWX = function (params) { return cordova(this, "chooseInvoiceFromWX", {}, arguments); };
    WechatOriginal.prototype.openMiniProgram = function (params) { return cordova(this, "openMiniProgram", {}, arguments); };
    WechatOriginal.pluginName = "Wechat";
    WechatOriginal.plugin = "cordova-plugin-wechat";
    WechatOriginal.pluginRef = "Wechat";
    WechatOriginal.repo = "https://github.com/xu-li/cordova-plugin-wechat.git";
    WechatOriginal.install = "cordova plugin add cordova-plugin-wechat --variable wechatappid=YOUR_WECHAT_APPID";
    WechatOriginal.installVariables = ["wechatappid"];
    WechatOriginal.platforms = ["Android", "iOS"];
    return WechatOriginal;
}(AwesomeCordovaNativePlugin));
var Wechat = new WechatOriginal();
export { Wechat };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvd2VjaGF0L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFDQSxPQUFPLHVDQUErQyxNQUFNLCtCQUErQixDQUFDOztJQWdDaEUsMEJBQTBCOzs7O0lBd0JwRCw0QkFBVztJQStCWCxzQkFBSyxhQUFDLE1BQVc7SUFlakIscUJBQUksYUFBQyxLQUFVLEVBQUUsS0FBVTtJQTBCM0IsbUNBQWtCLGFBQUMsTUFBVztJQTZCOUIsNkJBQVksYUFBQyxHQUFXO0lBbUJ4QixvQ0FBbUIsYUFBQyxNQUFXO0lBbUIvQixnQ0FBZSxhQUFDLE1BQVc7Ozs7Ozs7O2lCQXBNN0I7RUFpQzRCLDBCQUEwQjtTQUF6QyxNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29yZG92YSwgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bhd2Vzb21lLWNvcmRvdmEtcGx1Z2lucy9jb3JlJztcblxuLyoqXG4gKiBAbmFtZSBXZWNoYXRcbiAqIEBkZXNjcmlwdGlvblxuICogQSBjb3Jkb3ZhIHBsdWdpbiwgYSBKUyB2ZXJzaW9uIG9mIFdlY2hhdCBTREtcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgV2VjaGF0IH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3dlY2hhdC9uZ3gnO1xuICpcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIHdlY2hhdDogV2VjaGF0KSB7IH1cbiAqXG4gKiAuLi5cbiAqXG4gKlxuICogdGhpcy53ZWNoYXQuZnVuY3Rpb25OYW1lKCdIZWxsbycsIDEyMylcbiAqICAgLnRoZW4oKHJlczogYW55KSA9PiBjb25zb2xlLmxvZyhyZXMpKVxuICogICAuY2F0Y2goKGVycm9yOiBhbnkpID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcbiAqXG4gKiBgYGBcbiAqL1xuQFBsdWdpbih7XG4gIHBsdWdpbk5hbWU6ICdXZWNoYXQnLFxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi13ZWNoYXQnLFxuICBwbHVnaW5SZWY6ICdXZWNoYXQnLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL3h1LWxpL2NvcmRvdmEtcGx1Z2luLXdlY2hhdC5naXQnLFxuICBpbnN0YWxsOiAnY29yZG92YSBwbHVnaW4gYWRkIGNvcmRvdmEtcGx1Z2luLXdlY2hhdCAtLXZhcmlhYmxlIHdlY2hhdGFwcGlkPVlPVVJfV0VDSEFUX0FQUElEJyxcbiAgaW5zdGFsbFZhcmlhYmxlczogWyd3ZWNoYXRhcHBpZCddLFxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXSxcbn0pXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgV2VjaGF0IGV4dGVuZHMgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4ge1xuICBTY2VuZToge1xuICAgIFNFU1NJT046IDA7IC8vIOiBiuWkqeeVjOmdolxuICAgIFRJTUVMSU5FOiAxOyAvLyDmnIvlj4vlnIhcbiAgICBGQVZPUklURTogMjsgLy8g5pS26JePXG4gIH07XG5cbiAgVHlwZToge1xuICAgIEFQUDogMTtcbiAgICBFTU9USU9OOiAyO1xuICAgIEZJTEU6IDM7XG4gICAgSU1BR0U6IDQ7XG4gICAgTVVTSUM6IDU7XG4gICAgVklERU86IDY7XG4gICAgV0VCUEFHRTogNztcbiAgfTtcblxuICBNaW5pOiB7XG4gICAgUkVMRUFTRTogMDsgLy8g5q2j5byP54mIXG4gICAgVEVTVDogMTsgLy8g5rWL6K+V54mIXG4gICAgUFJFVklFVzogMjsgLy8g5L2T6aqM54mIXG4gIH07XG5cbiAgQENvcmRvdmEoKVxuICBpc0luc3RhbGxlZCgpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTaGFyZSBhIG1lc3NhZ2UgdG8gd2VjaGF0IGFwcFxuICAgKlxuICAgKiBAcGFyYW0gcGFyYW1zXG4gICAqIEBleGFtcGxlXG4gICAqIDxjb2RlPlxuICAgKiB0aGlzLndlY2hhdC5zaGFyZSh7XG4gICAqICAgICBtZXNzYWdlOiB7XG4gICAqICAgICAgICB0aXRsZTogXCJNZXNzYWdlIFRpdGxlXCIsXG4gICAqICAgICAgICBkZXNjcmlwdGlvbjogXCJNZXNzYWdlIERlc2NyaXB0aW9uKG9wdGlvbmFsKVwiLFxuICAgKiAgICAgICAgbWVkaWFUYWdOYW1lOiBcIk1lZGlhIFRhZyBOYW1lKG9wdGlvbmFsKVwiLFxuICAgKiAgICAgICAgdGh1bWI6IFwiaHR0cDovL1lPVVJfVEhVTUJOQUlMX0lNQUdFXCIsXG4gICAqICAgICAgICBtZWRpYToge1xuICAgKiAgICAgICAgICAgIHR5cGU6IFdlY2hhdC5UeXBlLldFQlBBR0UsICAgLy8gd2VicGFnZVxuICAgKiAgICAgICAgICAgIHdlYnBhZ2VVcmw6IFwiaHR0cHM6Ly9naXRodWIuY29tL3h1LWxpL2NvcmRvdmEtcGx1Z2luLXdlY2hhdFwiICAgIC8vIHdlYnBhZ2VcbiAgICogICAgICAgIH1cbiAgICogICAgfSxcbiAgICogICAgc2NlbmU6IHRoaXMud2VjaGF0LlNjZW5lLlRJTUVMSU5FICAgLy8gc2hhcmUgdG8gVGltZWxpbmVcbiAgICogfS50aGVuKCgpID0+IHtcbiAgICogICAgICAgY29uc29sZS5sb2coJ3NoYXJlIHN1Y2Nlc3MnKTtcbiAgICogICAgfSlcbiAgICogICAgLmNhdGNoKGVycm9yID0+IHtcbiAgICogICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xuICAgKiAgICB9KTtcbiAgICogPC9jb2RlPlxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBzaGFyZShwYXJhbXM6IGFueSk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFNlbmRpbmcgYW4gYXV0aCByZXF1ZXN0IHRvIFdlY2hhdFxuICAgKlxuICAgKiBAcGFyYW0gc2NvcGVcbiAgICogQHBhcmFtIHN0YXRlXG4gICAqIEBleGFtcGxlXG4gICAqIDxjb2RlPlxuICAgKiB0aGlzLndlY2hhdC5hdXRoLnRoZW4oKHJlcykgPT4geyBhbGVydChyZXMuY29kZSk7IH0pO1xuICAgKiA8L2NvZGU+XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGF1dGgoc2NvcGU6IGFueSwgc3RhdGU6IGFueSk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFNlbmQgYSBwYXltZW50IHJlcXVlc3RcbiAgICpcbiAgICogQHBhcmFtIHBhcmFtc1xuICAgKiBAbGluayBodHRwczovL3BheS53ZWl4aW4ucXEuY29tL3dpa2kvZG9jL2FwaS9hcHAucGhwP2NoYXB0ZXI9OV8xXG4gICAqIEBleGFtcGxlXG4gICAqIDxjb2RlPlxuICAgKiB2YXIgcGFyYW1zID0ge1xuICAgKiAgICAgbWNoX2lkOiAnMTAwMDAxMDAnLCAvLyBtZXJjaGFudCBpZFxuICAgKiAgICAgcHJlcGF5X2lkOiAnd3gyMDE0MTExMDE2Mzk1MDdjYmY2ZmZkOGIwNzc5OTUwODc0JywgLy8gcHJlcGF5IGlkIHJldHVybmVkIGZyb20gc2VydmVyXG4gICAqICAgICBub25jZTogJzFhZGQxYTMwYWM4N2FhMmRiNzJmNTdhMjM3NWQ4ZmVjJywgLy8gbm9uY2Ugc3RyaW5nIHJldHVybmVkIGZyb20gc2VydmVyXG4gICAqICAgICB0aW1lc3RhbXA6ICcxNDM5NTMxMzY0JywgLy8gdGltZXN0YW1wXG4gICAqICAgICBzaWduOiAnMENCMDE1MzNCOEMxRUYxMDMwNjUxNzRGNTBCQ0EwMDEnLCAvLyBzaWduZWQgc3RyaW5nXG4gICAqIH07XG4gICAqIHRoaXMud2VjaGF0LnNlbmRQYXltZW50UmVxdWVzdChwYXJhbXMpLnRoZW4oKCkgPT4ge1xuICAgKiAgICAgY29uc29sZS5sb2coXCJTdWNjZXNzXCIpO1xuICAgKiB9KS5jYXRjaChlcnJvciA9PiB7XG4gICAqICAgICBjb25zb2xlLmxvZyhlcnJvcik7XG4gICAqIH0pO1xuICAgKiA8L2NvZGU+XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHNlbmRQYXltZW50UmVxdWVzdChwYXJhbXM6IGFueSk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIGp1bXBUb0JpelByb2ZpbGUg77yI6Lez6L2s5Yiw5p+Q5Liq5b6u5L+h5YWs5LyX5Y+377yJMjAxNi0xMS0xMSDmtYvor5XmmK/lpLHmlYjnmoTvvIzlm6dcbiAgICpcbiAgICogQHBhcmFtIHVybFxuICAgKiBAbGluayBodHRwczovL3NlZ21lbnRmYXVsdC5jb20vYS8xMTkwMDAwMDA3MjA0NjI0XG4gICAqIEBsaW5rIGh0dHBzOi8vc2VnbWVudGZhdWx0LmNvbS9xLzEwMTAwMDAwMDM5MDc3OTZcbiAgICogQGV4YW1wbGVcbiAgICogPGNvZGU+XG4gICAqIHZhciBwYXJhbXMgPSB7XG4gICAqICAgICBpbmZvOiAnZ2hfeHh4eHh4eCcsIC8vIOWFrOS8l+W4kOWPt+WOn+Wni0lEXG4gICAqICAgICB0eXBlOiAgJ05vcm1hbCcgLy8g5pmu6YCa5Y+3XG4gICAqIH1cbiAgICogb3JcbiAgICogdmFyIHBhcmFtcyA9IHtcbiAgICogICAgIGluZm86ICdleHRNc2cnLCAvLyDnm7jlhbPnmoTnoazku7bkuoznu7TnoIHkuLJcbiAgICogICAgIHR5cGU6ICAnRGV2aWNlJyAvLyDnoazku7blj7dcbiAgICogfTtcbiAgICogdGhpcy53ZWNoYXQuanVtcFRvQml6UHJvZmlsZShwYXJhbXMpLnRoZW4oKCk9PiB7XG4gICAqICAgICBjb25zb2xlLmxvZyhcIlN1Y2Nlc3NcIik7XG4gICAqIH0pLmNhdGNoKGVycm9yID0+IHtcbiAgICogICAgIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgICogfSk7XG4gICAqIDwvY29kZT5cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAganVtcFRvV2VjaGF0KHVybDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogY2hvb3NlSW52b2ljZUZyb21XWCBleHE6Y2hvb3NlIGludm9pY2VzIGZyb20gV2VjaGF0IGNhcmQgbGlzdFxuICAgKlxuICAgKiBAcGFyYW0gcGFyYW1zXG4gICAqIEBleGFtcGxlXG4gICAqIDxjb2RlPlxuICAgKiBwYXJhbXM6IHNpZ25UeXBlLCBjYXJkU2lnbiwgbm9uY2VTdHIsIHRpbWVTdGFtcCAgYWxsIHJlcXVpcmVkXG4gICAqIHRoaXMud2VjaGF0LmNob29zZUludm9pY2VGcm9tV1gocGFyYW1zKS50aGVuKCgpID0+IHtcbiAgICogICAgIGNvbnNvbGUubG9nKFwiU3VjY2Vzc1wiKTtcbiAgICogfSkuY2F0Y2goZXJyb3IgPT4ge1xuICAgKiAgICAgY29uc29sZS5sb2coZXJyb3IpO1xuICAgKiB9KTtcbiAgICogPC9jb2RlPlxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBjaG9vc2VJbnZvaWNlRnJvbVdYKHBhcmFtczogYW55KTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogb3Blbk1pbmlQcm9ncmFtIGV4cTphcHAgb3BlbnMgd2VjaGF0IG1pbmkgcHJvZ3JhbVxuICAgKlxuICAgKiBAcGFyYW0gcGFyYW1zXG4gICAqIEBleGFtcGxlXG4gICAqIDxjb2RlPlxuICAgKiBwYXJhbXM6IHVzZXJOYW1lLCBwYXRoLCBtaW5pcHJvZ3JhbVR5cGUgIGFsbCByZXF1aXJlZFxuICAgKiBXZWNoYXQub3Blbk1pbmlQcm9ncmFtKHBhcmFtcywgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICogICAgIGFsZXJ0KGRhdGEuZXh0TXNnKTtcbiAgICogfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgKiAgICAgYWxlcnQoXCJGYWlsZWQ6IFwiICsgcmVhc29uKTtcbiAgICogfSk7XG4gICAqIDwvY29kZT5cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgb3Blbk1pbmlQcm9ncmFtKHBhcmFtczogYW55KTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cbn1cbiJdfQ==