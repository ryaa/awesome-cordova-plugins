var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var WechatOriginal = /** @class */ (function (_super) {
    __extends(WechatOriginal, _super);
    function WechatOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WechatOriginal.prototype.isInstalled = function () { return cordova(this, "isInstalled", {}, arguments); };
    WechatOriginal.prototype.share = function (params) { return cordova(this, "share", {}, arguments); };
    WechatOriginal.prototype.auth = function (scope, state) { return cordova(this, "auth", {}, arguments); };
    WechatOriginal.prototype.sendPaymentRequest = function (params) { return cordova(this, "sendPaymentRequest", {}, arguments); };
    WechatOriginal.prototype.jumpToWechat = function (url) { return cordova(this, "jumpToWechat", {}, arguments); };
    WechatOriginal.prototype.chooseInvoiceFromWX = function (params) { return cordova(this, "chooseInvoiceFromWX", {}, arguments); };
    WechatOriginal.prototype.openMiniProgram = function (params) { return cordova(this, "openMiniProgram", {}, arguments); };
    WechatOriginal.pluginName = "Wechat";
    WechatOriginal.plugin = "cordova-plugin-wechat";
    WechatOriginal.pluginRef = "Wechat";
    WechatOriginal.repo = "https://github.com/xu-li/cordova-plugin-wechat.git";
    WechatOriginal.install = "cordova plugin add cordova-plugin-wechat --variable wechatappid=YOUR_WECHAT_APPID";
    WechatOriginal.installVariables = ["wechatappid"];
    WechatOriginal.platforms = ["Android", "iOS"];
    return WechatOriginal;
}(AwesomeCordovaNativePlugin));
var Wechat = new WechatOriginal();
export { Wechat };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvd2VjaGF0L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUNBLE9BQU8sdUNBQStDLE1BQU0sK0JBQStCLENBQUM7O0lBZ0NoRSwwQkFBMEI7Ozs7SUF3QnBELDRCQUFXO0lBK0JYLHNCQUFLLGFBQUMsTUFBVztJQWVqQixxQkFBSSxhQUFDLEtBQVUsRUFBRSxLQUFVO0lBMEIzQixtQ0FBa0IsYUFBQyxNQUFXO0lBNkI5Qiw2QkFBWSxhQUFDLEdBQVc7SUFtQnhCLG9DQUFtQixhQUFDLE1BQVc7SUFtQi9CLGdDQUFlLGFBQUMsTUFBVzs7Ozs7Ozs7aUJBcE03QjtFQWlDNEIsMEJBQTBCO1NBQXpDLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb3Jkb3ZhLCBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL2NvcmUnO1xuXG4vKipcbiAqIEBuYW1lIFdlY2hhdFxuICogQGRlc2NyaXB0aW9uXG4gKiBBIGNvcmRvdmEgcGx1Z2luLCBhIEpTIHZlcnNpb24gb2YgV2VjaGF0IFNES1xuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBXZWNoYXQgfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvd2VjaGF0L25neCc7XG4gKlxuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgd2VjaGF0OiBXZWNoYXQpIHsgfVxuICpcbiAqIC4uLlxuICpcbiAqXG4gKiB0aGlzLndlY2hhdC5mdW5jdGlvbk5hbWUoJ0hlbGxvJywgMTIzKVxuICogICAudGhlbigocmVzOiBhbnkpID0+IGNvbnNvbGUubG9nKHJlcykpXG4gKiAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xuICpcbiAqIGBgYFxuICovXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ1dlY2hhdCcsXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLXdlY2hhdCcsXG4gIHBsdWdpblJlZjogJ1dlY2hhdCcsXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20veHUtbGkvY29yZG92YS1wbHVnaW4td2VjaGF0LmdpdCcsXG4gIGluc3RhbGw6ICdjb3Jkb3ZhIHBsdWdpbiBhZGQgY29yZG92YS1wbHVnaW4td2VjaGF0IC0tdmFyaWFibGUgd2VjaGF0YXBwaWQ9WU9VUl9XRUNIQVRfQVBQSUQnLFxuICBpbnN0YWxsVmFyaWFibGVzOiBbJ3dlY2hhdGFwcGlkJ10sXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddLFxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBXZWNoYXQgZXh0ZW5kcyBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiB7XG4gIFNjZW5lOiB7XG4gICAgU0VTU0lPTjogMDsgLy8g6IGK5aSp55WM6Z2iXG4gICAgVElNRUxJTkU6IDE7IC8vIOaci+WPi+WciFxuICAgIEZBVk9SSVRFOiAyOyAvLyDmlLbol49cbiAgfTtcblxuICBUeXBlOiB7XG4gICAgQVBQOiAxO1xuICAgIEVNT1RJT046IDI7XG4gICAgRklMRTogMztcbiAgICBJTUFHRTogNDtcbiAgICBNVVNJQzogNTtcbiAgICBWSURFTzogNjtcbiAgICBXRUJQQUdFOiA3O1xuICB9O1xuXG4gIE1pbmk6IHtcbiAgICBSRUxFQVNFOiAwOyAvLyDmraPlvI/niYhcbiAgICBURVNUOiAxOyAvLyDmtYvor5XniYhcbiAgICBQUkVWSUVXOiAyOyAvLyDkvZPpqozniYhcbiAgfTtcblxuICBAQ29yZG92YSgpXG4gIGlzSW5zdGFsbGVkKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFNoYXJlIGEgbWVzc2FnZSB0byB3ZWNoYXQgYXBwXG4gICAqXG4gICAqIEBwYXJhbSBwYXJhbXNcbiAgICogQGV4YW1wbGVcbiAgICogPGNvZGU+XG4gICAqIHRoaXMud2VjaGF0LnNoYXJlKHtcbiAgICogICAgIG1lc3NhZ2U6IHtcbiAgICogICAgICAgIHRpdGxlOiBcIk1lc3NhZ2UgVGl0bGVcIixcbiAgICogICAgICAgIGRlc2NyaXB0aW9uOiBcIk1lc3NhZ2UgRGVzY3JpcHRpb24ob3B0aW9uYWwpXCIsXG4gICAqICAgICAgICBtZWRpYVRhZ05hbWU6IFwiTWVkaWEgVGFnIE5hbWUob3B0aW9uYWwpXCIsXG4gICAqICAgICAgICB0aHVtYjogXCJodHRwOi8vWU9VUl9USFVNQk5BSUxfSU1BR0VcIixcbiAgICogICAgICAgIG1lZGlhOiB7XG4gICAqICAgICAgICAgICAgdHlwZTogV2VjaGF0LlR5cGUuV0VCUEFHRSwgICAvLyB3ZWJwYWdlXG4gICAqICAgICAgICAgICAgd2VicGFnZVVybDogXCJodHRwczovL2dpdGh1Yi5jb20veHUtbGkvY29yZG92YS1wbHVnaW4td2VjaGF0XCIgICAgLy8gd2VicGFnZVxuICAgKiAgICAgICAgfVxuICAgKiAgICB9LFxuICAgKiAgICBzY2VuZTogdGhpcy53ZWNoYXQuU2NlbmUuVElNRUxJTkUgICAvLyBzaGFyZSB0byBUaW1lbGluZVxuICAgKiB9LnRoZW4oKCkgPT4ge1xuICAgKiAgICAgICBjb25zb2xlLmxvZygnc2hhcmUgc3VjY2VzcycpO1xuICAgKiAgICB9KVxuICAgKiAgICAuY2F0Y2goZXJyb3IgPT4ge1xuICAgKiAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XG4gICAqICAgIH0pO1xuICAgKiA8L2NvZGU+XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHNoYXJlKHBhcmFtczogYW55KTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogU2VuZGluZyBhbiBhdXRoIHJlcXVlc3QgdG8gV2VjaGF0XG4gICAqXG4gICAqIEBwYXJhbSBzY29wZVxuICAgKiBAcGFyYW0gc3RhdGVcbiAgICogQGV4YW1wbGVcbiAgICogPGNvZGU+XG4gICAqIHRoaXMud2VjaGF0LmF1dGgudGhlbigocmVzKSA9PiB7IGFsZXJ0KHJlcy5jb2RlKTsgfSk7XG4gICAqIDwvY29kZT5cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgYXV0aChzY29wZTogYW55LCBzdGF0ZTogYW55KTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogU2VuZCBhIHBheW1lbnQgcmVxdWVzdFxuICAgKlxuICAgKiBAcGFyYW0gcGFyYW1zXG4gICAqIEBsaW5rIGh0dHBzOi8vcGF5LndlaXhpbi5xcS5jb20vd2lraS9kb2MvYXBpL2FwcC5waHA/Y2hhcHRlcj05XzFcbiAgICogQGV4YW1wbGVcbiAgICogPGNvZGU+XG4gICAqIHZhciBwYXJhbXMgPSB7XG4gICAqICAgICBtY2hfaWQ6ICcxMDAwMDEwMCcsIC8vIG1lcmNoYW50IGlkXG4gICAqICAgICBwcmVwYXlfaWQ6ICd3eDIwMTQxMTEwMTYzOTUwN2NiZjZmZmQ4YjA3Nzk5NTA4NzQnLCAvLyBwcmVwYXkgaWQgcmV0dXJuZWQgZnJvbSBzZXJ2ZXJcbiAgICogICAgIG5vbmNlOiAnMWFkZDFhMzBhYzg3YWEyZGI3MmY1N2EyMzc1ZDhmZWMnLCAvLyBub25jZSBzdHJpbmcgcmV0dXJuZWQgZnJvbSBzZXJ2ZXJcbiAgICogICAgIHRpbWVzdGFtcDogJzE0Mzk1MzEzNjQnLCAvLyB0aW1lc3RhbXBcbiAgICogICAgIHNpZ246ICcwQ0IwMTUzM0I4QzFFRjEwMzA2NTE3NEY1MEJDQTAwMScsIC8vIHNpZ25lZCBzdHJpbmdcbiAgICogfTtcbiAgICogdGhpcy53ZWNoYXQuc2VuZFBheW1lbnRSZXF1ZXN0KHBhcmFtcykudGhlbigoKSA9PiB7XG4gICAqICAgICBjb25zb2xlLmxvZyhcIlN1Y2Nlc3NcIik7XG4gICAqIH0pLmNhdGNoKGVycm9yID0+IHtcbiAgICogICAgIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgICogfSk7XG4gICAqIDwvY29kZT5cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgc2VuZFBheW1lbnRSZXF1ZXN0KHBhcmFtczogYW55KTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICoganVtcFRvQml6UHJvZmlsZSDvvIjot7PovazliLDmn5DkuKrlvq7kv6HlhazkvJflj7fvvIkyMDE2LTExLTExIOa1i+ivleaYr+WkseaViOeahO+8jOWbp1xuICAgKlxuICAgKiBAcGFyYW0gdXJsXG4gICAqIEBsaW5rIGh0dHBzOi8vc2VnbWVudGZhdWx0LmNvbS9hLzExOTAwMDAwMDcyMDQ2MjRcbiAgICogQGxpbmsgaHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL3EvMTAxMDAwMDAwMzkwNzc5NlxuICAgKiBAZXhhbXBsZVxuICAgKiA8Y29kZT5cbiAgICogdmFyIHBhcmFtcyA9IHtcbiAgICogICAgIGluZm86ICdnaF94eHh4eHh4JywgLy8g5YWs5LyX5biQ5Y+35Y6f5aeLSURcbiAgICogICAgIHR5cGU6ICAnTm9ybWFsJyAvLyDmma7pgJrlj7dcbiAgICogfVxuICAgKiBvclxuICAgKiB2YXIgcGFyYW1zID0ge1xuICAgKiAgICAgaW5mbzogJ2V4dE1zZycsIC8vIOebuOWFs+eahOehrOS7tuS6jOe7tOeggeS4slxuICAgKiAgICAgdHlwZTogICdEZXZpY2UnIC8vIOehrOS7tuWPt1xuICAgKiB9O1xuICAgKiB0aGlzLndlY2hhdC5qdW1wVG9CaXpQcm9maWxlKHBhcmFtcykudGhlbigoKT0+IHtcbiAgICogICAgIGNvbnNvbGUubG9nKFwiU3VjY2Vzc1wiKTtcbiAgICogfSkuY2F0Y2goZXJyb3IgPT4ge1xuICAgKiAgICAgY29uc29sZS5sb2coZXJyb3IpO1xuICAgKiB9KTtcbiAgICogPC9jb2RlPlxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBqdW1wVG9XZWNoYXQodXJsOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBjaG9vc2VJbnZvaWNlRnJvbVdYIGV4cTpjaG9vc2UgaW52b2ljZXMgZnJvbSBXZWNoYXQgY2FyZCBsaXN0XG4gICAqXG4gICAqIEBwYXJhbSBwYXJhbXNcbiAgICogQGV4YW1wbGVcbiAgICogPGNvZGU+XG4gICAqIHBhcmFtczogc2lnblR5cGUsIGNhcmRTaWduLCBub25jZVN0ciwgdGltZVN0YW1wICBhbGwgcmVxdWlyZWRcbiAgICogdGhpcy53ZWNoYXQuY2hvb3NlSW52b2ljZUZyb21XWChwYXJhbXMpLnRoZW4oKCkgPT4ge1xuICAgKiAgICAgY29uc29sZS5sb2coXCJTdWNjZXNzXCIpO1xuICAgKiB9KS5jYXRjaChlcnJvciA9PiB7XG4gICAqICAgICBjb25zb2xlLmxvZyhlcnJvcik7XG4gICAqIH0pO1xuICAgKiA8L2NvZGU+XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGNob29zZUludm9pY2VGcm9tV1gocGFyYW1zOiBhbnkpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBvcGVuTWluaVByb2dyYW0gZXhxOmFwcCBvcGVucyB3ZWNoYXQgbWluaSBwcm9ncmFtXG4gICAqXG4gICAqIEBwYXJhbSBwYXJhbXNcbiAgICogQGV4YW1wbGVcbiAgICogPGNvZGU+XG4gICAqIHBhcmFtczogdXNlck5hbWUsIHBhdGgsIG1pbmlwcm9ncmFtVHlwZSAgYWxsIHJlcXVpcmVkXG4gICAqIFdlY2hhdC5vcGVuTWluaVByb2dyYW0ocGFyYW1zLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgKiAgICAgYWxlcnQoZGF0YS5leHRNc2cpO1xuICAgKiB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAqICAgICBhbGVydChcIkZhaWxlZDogXCIgKyByZWFzb24pO1xuICAgKiB9KTtcbiAgICogPC9jb2RlPlxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBvcGVuTWluaVByb2dyYW0ocGFyYW1zOiBhbnkpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxufVxuIl19