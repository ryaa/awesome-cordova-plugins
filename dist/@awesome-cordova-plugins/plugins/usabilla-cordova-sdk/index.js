var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var UsabillaOriginal = /** @class */ (function (_super) {
    __extends(UsabillaOriginal, _super);
    function UsabillaOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UsabillaOriginal.prototype.initialize = function (appId, customVars) { return cordova(this, "initialize", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    UsabillaOriginal.prototype.loadFeedbackForm = function (formId) { return cordova(this, "loadFeedbackForm", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    UsabillaOriginal.prototype.loadFeedbackFormWithCurrentViewScreenshot = function (formId) { return cordova(this, "loadFeedbackFormWithCurrentViewScreenshot", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    UsabillaOriginal.prototype.sendEvent = function (eventId) { return cordova(this, "sendEvent", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    UsabillaOriginal.prototype.resetCampaignData = function () { return cordova(this, "resetCampaignData", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    UsabillaOriginal.prototype.dismiss = function () { return cordova(this, "dismiss", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    UsabillaOriginal.prototype.getDefaultDataMasks = function () { return cordova(this, "getDefaultDataMasks", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    UsabillaOriginal.prototype.setDataMasking = function (masks, maskCharacter) { return cordova(this, "setDataMasking", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    UsabillaOriginal.pluginName = "usabilla-cordova";
    UsabillaOriginal.plugin = "usabilla-cordova";
    UsabillaOriginal.pluginRef = "Usabilla";
    UsabillaOriginal.repo = "https://github.com/usabilla/usabilla-u4a-cordova";
    UsabillaOriginal.platforms = ["Android", "iOS"];
    return UsabillaOriginal;
}(AwesomeCordovaNativePlugin));
var Usabilla = new UsabillaOriginal();
export { Usabilla };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvdXNhYmlsbGEtY29yZG92YS1zZGsvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUNBLE9BQU8sdUNBQStDLE1BQU0sK0JBQStCLENBQUM7O0lBeUQ5RCw0QkFBMEI7Ozs7SUFjdEQsNkJBQVUsYUFBQyxLQUFhLEVBQUUsVUFBZTtJQWV6QyxtQ0FBZ0IsYUFBQyxNQUFjO0lBZS9CLDREQUF5QyxhQUFDLE1BQWM7SUFleEQsNEJBQVMsYUFBQyxPQUFlO0lBYXpCLG9DQUFpQjtJQWFqQiwwQkFBTztJQWFQLHNDQUFtQjtJQWlCbkIsaUNBQWMsYUFBQyxLQUFVLEVBQUUsYUFBcUI7Ozs7OzttQkE3S2xEO0VBMEQ4QiwwQkFBMEI7U0FBM0MsUUFBUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFBsdWdpbiwgQ29yZG92YSwgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4gfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvY29yZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXNhYmlsbGFSZXN1bHQge1xuICBjb21wbGV0ZWQ6IGJvb2xlYW4gfCBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVWJDYW1wYWlnblJlc3VsdCB7XG4gIGNvbXBsZXRlZDoge1xuICAgIHJlc3VsdDogVWJSZXN1bHQ7XG4gICAgaXNSZWRpcmVjdFRvQXBwU3RvcmVFbmFibGVkPzogYm9vbGVhbjtcbiAgfTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBVYlJlc3VsdCB7XG4gIHJhdGluZzogbnVtYmVyO1xuICBhYmFuZG9uZWRQYWdlSW5kZXg6IG51bWJlcjtcbiAgc2VudDogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBAbmFtZSBVc2FiaWxsYVxuICogQGRlc2NyaXB0aW9uXG4gKiBVc2FiaWxsYSBTREsgaXMgZGVzaWduZWQgYW5kIGRldmVsb3BlZCB0byBjb2xsZWN0IGZlZWRiYWNrIGZyb20geW91ciB1c2VycyB3aXRoIGdyZWF0IGVhc2UgYW5kIGZsZXhpYmlsaXR5IHRocm91Z2ggeW91ciBtb2JpbGUgYXBwbGljYXRpb24uXG4gKiBUaGlzIGRvY3VtZW50IGRlc2NyaWJlcyBsaWJyYXJ5IGludGVncmF0aW9uIHN0ZXBzIGZvciB5b3VyIENvcmRvdmEgcHJvamVjdC5cbiAqXG4gKiBGb3IgbW9yZSBpbmZvIHNlZSBbQ29yZG92YSBwbHVnaW4gZG9jc10oaHR0cHM6Ly9naXRodWIuY29tL3VzYWJpbGxhL3VzYWJpbGxhLXU0YS1jb3Jkb3ZhKVxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBVc2FiaWxsYSB9IGZyb20gJ0Bhd2Vzb21lLWNvcmRvdmEtcGx1Z2lucy91c2FiaWxsYS1jb3Jkb3ZhLXNkay9uZ3gnO1xuICpcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIHVzYWJpbGxhOiBVc2FiaWxsYSkgeyB9XG4gKlxuICogLi4uXG4gKlxuICpcbiAqICB0aGlzLnVzYWJpbGxhLmluaXRpYWxpemUoXG4gKiAgICBhcHBJRDogJzx5b3VyX2FwcGxpY2F0aW9uX2lkPicsXG4gKiAgICBjdXN0b21fdmFyczoge1xuICogICAgICBcImtleVwiOiBcInZhbHVlXCJcbiAqICAgIH0pO1xuICpcbiAqICB0aGlzLnVzYWJpbGxhLmxvYWRGZWVkYmFja0Zvcm0oXG4gKiAgICBmb3JtSUQgOiAnPHlvdXJfZm9ybV9pZD4nXG4gKiAgICApO1xuICpcbiAqIGBgYFxuICovXG5cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAndXNhYmlsbGEtY29yZG92YScsXG4gIHBsdWdpbjogJ3VzYWJpbGxhLWNvcmRvdmEnLFxuICBwbHVnaW5SZWY6ICdVc2FiaWxsYScsXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vdXNhYmlsbGEvdXNhYmlsbGEtdTRhLWNvcmRvdmEnLFxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXSxcbn0pXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgVXNhYmlsbGEgZXh0ZW5kcyBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiB7XG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyBVc2FiaWxsYSBzZGsgZm9yIGNhcHR1cmluZyBmZWVkYmFja3MuXG4gICAqXG4gICAqIEBuYW1lIGluaXRpYWxpemVcbiAgICogQHBhcmFtIHthcHBJZH0gQVBQX0lEIHVuaXF1ZSBhcHAgaWQgdG8gaW5pdGlhbGl6ZVxuICAgKiBAcGFyYW0gYXBwSWRcbiAgICogQHBhcmFtIGN1c3RvbVZhcnNcbiAgICogQHBhcmFtIHtjdXN0b21WYXJzfSBDVVNUT01fVkFSSUFCTEVTIGZvciB0YXJnZXQgYmFzZWQgZXZlbnQgdHJpZ2dlclxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIHN1Y2Nlc3NJbmRleDogMCxcbiAgICBlcnJvckluZGV4OiAxLFxuICB9KVxuICBpbml0aWFsaXplKGFwcElkOiBzdHJpbmcsIGN1c3RvbVZhcnM6IGFueSk6IFByb21pc2U8VXNhYmlsbGFSZXN1bHQ+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogRGlzcGxheXMgRmVlZGJhY2sgZm9ybSBiYXNlZCBvbiB1bmlxdWUgZm9ybSBpZCBhZnRlciBzZGsgaW5pdGlhbGl6YXRpb24uXG4gICAqXG4gICAqIEBuYW1lIGxvYWRGZWVkYmFja0Zvcm1cbiAgICogQHBhcmFtIGZvcm1JZFxuICAgKiBAcGFyYW0ge2Zvcm1JZH0gRk9STV9JRCB0byBkaXNwbGF5IEZlZWRiYWNrIGZvcm0gZm9yXG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgc3VjY2Vzc0luZGV4OiAwLFxuICAgIGVycm9ySW5kZXg6IDEsXG4gIH0pXG4gIGxvYWRGZWVkYmFja0Zvcm0oZm9ybUlkOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBEaXNwbGF5cyBGZWVkYmFjayBmb3JtIHdpdGggY3VycmVudCBzY3JlZW4ncyBzbmFwc2hvdCBhbmQgYmFzZWQgb24gdW5pcXVlIGZvcm0gaWQsIGFmdGVyIHNkayBpbml0aWFsaXphdGlvbi5cbiAgICpcbiAgICogQG5hbWUgbG9hZEZlZWRiYWNrRm9ybVdpdGhDdXJyZW50Vmlld1NjcmVlbnNob3RcbiAgICogQHBhcmFtIGZvcm1JZFxuICAgKiBAcGFyYW0ge2Zvcm1JZH0gRk9STV9JRCB0byBkaXNwbGF5IEZlZWRiYWNrIGZvcm0gZm9yXG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgc3VjY2Vzc0luZGV4OiAwLFxuICAgIGVycm9ySW5kZXg6IDEsXG4gIH0pXG4gIGxvYWRGZWVkYmFja0Zvcm1XaXRoQ3VycmVudFZpZXdTY3JlZW5zaG90KGZvcm1JZDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogRGlzcGxheXMgQ2FtcGFpZ24gYmFubmVyIHRhcmdldHRlZCBiYXNlZCBvbiBzcGVjaWZpYyBldmVudCBhbmQgdmFyaWFibGVzLCBhZnRlciBzZGsgaW5pdGlhbGl6YXRpb24uXG4gICAqXG4gICAqIEBuYW1lIHNlbmRFdmVudFxuICAgKiBAcGFyYW0gZXZlbnRJZFxuICAgKiBAcGFyYW0ge2V2ZW50SWR9IEVWRU5UX0lEIHRvIGRpc3BsYXkgQ2FtcGFpZ24gYmFubmVyIGZvclxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIHN1Y2Nlc3NJbmRleDogMCxcbiAgICBlcnJvckluZGV4OiAxLFxuICB9KVxuICBzZW5kRXZlbnQoZXZlbnRJZDogc3RyaW5nKTogUHJvbWlzZTxVYkNhbXBhaWduUmVzdWx0PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlc2V0IENhbXBhaWduIGZvciBuZXh0IHRyaWdnZXIuXG4gICAqXG4gICAqIEBuYW1lIHJlc2V0Q2FtcGFpZ25EYXRhXG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgc3VjY2Vzc0luZGV4OiAwLFxuICAgIGVycm9ySW5kZXg6IDEsXG4gIH0pXG4gIHJlc2V0Q2FtcGFpZ25EYXRhKCk6IFByb21pc2U8VXNhYmlsbGFSZXN1bHQ+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogRGlzbWlzcyBvciByZW1vdmVzIHRoZSBGb3JtL0Jhbm5lciBmcm9tIHRoZSB2aWV3LlxuICAgKlxuICAgKiBAbmFtZSBkaXNtaXNzXG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgc3VjY2Vzc0luZGV4OiAwLFxuICAgIGVycm9ySW5kZXg6IDEsXG4gIH0pXG4gIGRpc21pc3MoKTogUHJvbWlzZTxVc2FiaWxsYVJlc3VsdD4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgZGVmYXVsdCBtYXNraW5nIHN0cmF0ZWd5IHRvIGJlIGFwcGxpZWQgZm9yIGRhdGEgbWFza2luZy5cbiAgICpcbiAgICogQG5hbWUgZ2V0RGVmYXVsdERhdGFNYXNrc1xuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIHN1Y2Nlc3NJbmRleDogMCxcbiAgICBlcnJvckluZGV4OiAxLFxuICB9KVxuICBnZXREZWZhdWx0RGF0YU1hc2tzKCk6IFByb21pc2U8VXNhYmlsbGFSZXN1bHQ+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogU2V0IG1hc2tpbmcgc3RyYXRlZ3kgZm9yIGRhdGEgbWFza2luZy5cbiAgICpcbiAgICogQG5hbWUgc2V0RGF0YU1hc2tpbmdcbiAgICogQHBhcmFtIHttYXNrc30gRm9ybWF0IHJlZ2V4IHRvIGJlIGFwcGxpZWQgZm9yIG1hc2tpbmcuXG4gICAqIEBwYXJhbSBtYXNrc1xuICAgKiBAcGFyYW0gbWFza0NoYXJhY3RlclxuICAgKiBAcGFyYW0ge21hc2tDaGFyYWN0ZXJ9IENoYXJhY3RlciB0byBiZSB1c2VkIGFzIGEgbWFza2luZyBjaGFyYWN0ZXJcbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBzdWNjZXNzSW5kZXg6IDAsXG4gICAgZXJyb3JJbmRleDogMSxcbiAgfSlcbiAgc2V0RGF0YU1hc2tpbmcobWFza3M6IGFueSwgbWFza0NoYXJhY3Rlcjogc3RyaW5nKTogUHJvbWlzZTxVc2FiaWxsYVJlc3VsdD4ge1xuICAgIHJldHVybjtcbiAgfVxufVxuIl19