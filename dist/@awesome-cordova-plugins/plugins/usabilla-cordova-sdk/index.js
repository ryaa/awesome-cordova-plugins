var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var UsabillaOriginal = /** @class */ (function (_super) {
    __extends(UsabillaOriginal, _super);
    function UsabillaOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UsabillaOriginal.prototype.initialize = function (appId, customVars) { return cordova(this, "initialize", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    UsabillaOriginal.prototype.loadFeedbackForm = function (formId) { return cordova(this, "loadFeedbackForm", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    UsabillaOriginal.prototype.loadFeedbackFormWithCurrentViewScreenshot = function (formId) { return cordova(this, "loadFeedbackFormWithCurrentViewScreenshot", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    UsabillaOriginal.prototype.sendEvent = function (eventId) { return cordova(this, "sendEvent", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    UsabillaOriginal.prototype.resetCampaignData = function () { return cordova(this, "resetCampaignData", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    UsabillaOriginal.prototype.dismiss = function () { return cordova(this, "dismiss", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    UsabillaOriginal.prototype.getDefaultDataMasks = function () { return cordova(this, "getDefaultDataMasks", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    UsabillaOriginal.prototype.setDataMasking = function (masks, maskCharacter) { return cordova(this, "setDataMasking", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    UsabillaOriginal.pluginName = "usabilla-cordova";
    UsabillaOriginal.plugin = "usabilla-cordova";
    UsabillaOriginal.pluginRef = "Usabilla";
    UsabillaOriginal.repo = "https://github.com/usabilla/usabilla-u4a-cordova";
    UsabillaOriginal.platforms = ["Android", "iOS"];
    return UsabillaOriginal;
}(AwesomeCordovaNativePlugin));
var Usabilla = new UsabillaOriginal();
export { Usabilla };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvdXNhYmlsbGEtY29yZG92YS1zZGsvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQ0EsT0FBTyx1Q0FBK0MsTUFBTSwrQkFBK0IsQ0FBQzs7SUF5RDlELDRCQUEwQjs7OztJQWN0RCw2QkFBVSxhQUFDLEtBQWEsRUFBRSxVQUFlO0lBZXpDLG1DQUFnQixhQUFDLE1BQWM7SUFlL0IsNERBQXlDLGFBQUMsTUFBYztJQWV4RCw0QkFBUyxhQUFDLE9BQWU7SUFhekIsb0NBQWlCO0lBYWpCLDBCQUFPO0lBYVAsc0NBQW1CO0lBaUJuQixpQ0FBYyxhQUFDLEtBQVUsRUFBRSxhQUFxQjs7Ozs7O21CQTdLbEQ7RUEwRDhCLDBCQUEwQjtTQUEzQyxRQUFRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUGx1Z2luLCBDb3Jkb3ZhLCBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiB9IGZyb20gJ0Bhd2Vzb21lLWNvcmRvdmEtcGx1Z2lucy9jb3JlJztcblxuZXhwb3J0IGludGVyZmFjZSBVc2FiaWxsYVJlc3VsdCB7XG4gIGNvbXBsZXRlZDogYm9vbGVhbiB8IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBVYkNhbXBhaWduUmVzdWx0IHtcbiAgY29tcGxldGVkOiB7XG4gICAgcmVzdWx0OiBVYlJlc3VsdDtcbiAgICBpc1JlZGlyZWN0VG9BcHBTdG9yZUVuYWJsZWQ/OiBib29sZWFuO1xuICB9O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFViUmVzdWx0IHtcbiAgcmF0aW5nOiBudW1iZXI7XG4gIGFiYW5kb25lZFBhZ2VJbmRleDogbnVtYmVyO1xuICBzZW50OiBib29sZWFuO1xufVxuXG4vKipcbiAqIEBuYW1lIFVzYWJpbGxhXG4gKiBAZGVzY3JpcHRpb25cbiAqIFVzYWJpbGxhIFNESyBpcyBkZXNpZ25lZCBhbmQgZGV2ZWxvcGVkIHRvIGNvbGxlY3QgZmVlZGJhY2sgZnJvbSB5b3VyIHVzZXJzIHdpdGggZ3JlYXQgZWFzZSBhbmQgZmxleGliaWxpdHkgdGhyb3VnaCB5b3VyIG1vYmlsZSBhcHBsaWNhdGlvbi5cbiAqIFRoaXMgZG9jdW1lbnQgZGVzY3JpYmVzIGxpYnJhcnkgaW50ZWdyYXRpb24gc3RlcHMgZm9yIHlvdXIgQ29yZG92YSBwcm9qZWN0LlxuICpcbiAqIEZvciBtb3JlIGluZm8gc2VlIFtDb3Jkb3ZhIHBsdWdpbiBkb2NzXShodHRwczovL2dpdGh1Yi5jb20vdXNhYmlsbGEvdXNhYmlsbGEtdTRhLWNvcmRvdmEpXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IFVzYWJpbGxhIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3VzYWJpbGxhLWNvcmRvdmEtc2RrL25neCc7XG4gKlxuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgdXNhYmlsbGE6IFVzYWJpbGxhKSB7IH1cbiAqXG4gKiAuLi5cbiAqXG4gKlxuICogIHRoaXMudXNhYmlsbGEuaW5pdGlhbGl6ZShcbiAqICAgIGFwcElEOiAnPHlvdXJfYXBwbGljYXRpb25faWQ+JyxcbiAqICAgIGN1c3RvbV92YXJzOiB7XG4gKiAgICAgIFwia2V5XCI6IFwidmFsdWVcIlxuICogICAgfSk7XG4gKlxuICogIHRoaXMudXNhYmlsbGEubG9hZEZlZWRiYWNrRm9ybShcbiAqICAgIGZvcm1JRCA6ICc8eW91cl9mb3JtX2lkPidcbiAqICAgICk7XG4gKlxuICogYGBgXG4gKi9cblxuQFBsdWdpbih7XG4gIHBsdWdpbk5hbWU6ICd1c2FiaWxsYS1jb3Jkb3ZhJyxcbiAgcGx1Z2luOiAndXNhYmlsbGEtY29yZG92YScsXG4gIHBsdWdpblJlZjogJ1VzYWJpbGxhJyxcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS91c2FiaWxsYS91c2FiaWxsYS11NGEtY29yZG92YScsXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddLFxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBVc2FiaWxsYSBleHRlbmRzIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luIHtcbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIFVzYWJpbGxhIHNkayBmb3IgY2FwdHVyaW5nIGZlZWRiYWNrcy5cbiAgICpcbiAgICogQG5hbWUgaW5pdGlhbGl6ZVxuICAgKiBAcGFyYW0ge2FwcElkfSBBUFBfSUQgdW5pcXVlIGFwcCBpZCB0byBpbml0aWFsaXplXG4gICAqIEBwYXJhbSBhcHBJZFxuICAgKiBAcGFyYW0gY3VzdG9tVmFyc1xuICAgKiBAcGFyYW0ge2N1c3RvbVZhcnN9IENVU1RPTV9WQVJJQUJMRVMgZm9yIHRhcmdldCBiYXNlZCBldmVudCB0cmlnZ2VyXG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgc3VjY2Vzc0luZGV4OiAwLFxuICAgIGVycm9ySW5kZXg6IDEsXG4gIH0pXG4gIGluaXRpYWxpemUoYXBwSWQ6IHN0cmluZywgY3VzdG9tVmFyczogYW55KTogUHJvbWlzZTxVc2FiaWxsYVJlc3VsdD4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBEaXNwbGF5cyBGZWVkYmFjayBmb3JtIGJhc2VkIG9uIHVuaXF1ZSBmb3JtIGlkIGFmdGVyIHNkayBpbml0aWFsaXphdGlvbi5cbiAgICpcbiAgICogQG5hbWUgbG9hZEZlZWRiYWNrRm9ybVxuICAgKiBAcGFyYW0gZm9ybUlkXG4gICAqIEBwYXJhbSB7Zm9ybUlkfSBGT1JNX0lEIHRvIGRpc3BsYXkgRmVlZGJhY2sgZm9ybSBmb3JcbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBzdWNjZXNzSW5kZXg6IDAsXG4gICAgZXJyb3JJbmRleDogMSxcbiAgfSlcbiAgbG9hZEZlZWRiYWNrRm9ybShmb3JtSWQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIERpc3BsYXlzIEZlZWRiYWNrIGZvcm0gd2l0aCBjdXJyZW50IHNjcmVlbidzIHNuYXBzaG90IGFuZCBiYXNlZCBvbiB1bmlxdWUgZm9ybSBpZCwgYWZ0ZXIgc2RrIGluaXRpYWxpemF0aW9uLlxuICAgKlxuICAgKiBAbmFtZSBsb2FkRmVlZGJhY2tGb3JtV2l0aEN1cnJlbnRWaWV3U2NyZWVuc2hvdFxuICAgKiBAcGFyYW0gZm9ybUlkXG4gICAqIEBwYXJhbSB7Zm9ybUlkfSBGT1JNX0lEIHRvIGRpc3BsYXkgRmVlZGJhY2sgZm9ybSBmb3JcbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBzdWNjZXNzSW5kZXg6IDAsXG4gICAgZXJyb3JJbmRleDogMSxcbiAgfSlcbiAgbG9hZEZlZWRiYWNrRm9ybVdpdGhDdXJyZW50Vmlld1NjcmVlbnNob3QoZm9ybUlkOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBEaXNwbGF5cyBDYW1wYWlnbiBiYW5uZXIgdGFyZ2V0dGVkIGJhc2VkIG9uIHNwZWNpZmljIGV2ZW50IGFuZCB2YXJpYWJsZXMsIGFmdGVyIHNkayBpbml0aWFsaXphdGlvbi5cbiAgICpcbiAgICogQG5hbWUgc2VuZEV2ZW50XG4gICAqIEBwYXJhbSBldmVudElkXG4gICAqIEBwYXJhbSB7ZXZlbnRJZH0gRVZFTlRfSUQgdG8gZGlzcGxheSBDYW1wYWlnbiBiYW5uZXIgZm9yXG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgc3VjY2Vzc0luZGV4OiAwLFxuICAgIGVycm9ySW5kZXg6IDEsXG4gIH0pXG4gIHNlbmRFdmVudChldmVudElkOiBzdHJpbmcpOiBQcm9taXNlPFViQ2FtcGFpZ25SZXN1bHQ+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogUmVzZXQgQ2FtcGFpZ24gZm9yIG5leHQgdHJpZ2dlci5cbiAgICpcbiAgICogQG5hbWUgcmVzZXRDYW1wYWlnbkRhdGFcbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBzdWNjZXNzSW5kZXg6IDAsXG4gICAgZXJyb3JJbmRleDogMSxcbiAgfSlcbiAgcmVzZXRDYW1wYWlnbkRhdGEoKTogUHJvbWlzZTxVc2FiaWxsYVJlc3VsdD4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBEaXNtaXNzIG9yIHJlbW92ZXMgdGhlIEZvcm0vQmFubmVyIGZyb20gdGhlIHZpZXcuXG4gICAqXG4gICAqIEBuYW1lIGRpc21pc3NcbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBzdWNjZXNzSW5kZXg6IDAsXG4gICAgZXJyb3JJbmRleDogMSxcbiAgfSlcbiAgZGlzbWlzcygpOiBQcm9taXNlPFVzYWJpbGxhUmVzdWx0PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBkZWZhdWx0IG1hc2tpbmcgc3RyYXRlZ3kgdG8gYmUgYXBwbGllZCBmb3IgZGF0YSBtYXNraW5nLlxuICAgKlxuICAgKiBAbmFtZSBnZXREZWZhdWx0RGF0YU1hc2tzXG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgc3VjY2Vzc0luZGV4OiAwLFxuICAgIGVycm9ySW5kZXg6IDEsXG4gIH0pXG4gIGdldERlZmF1bHREYXRhTWFza3MoKTogUHJvbWlzZTxVc2FiaWxsYVJlc3VsdD4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgbWFza2luZyBzdHJhdGVneSBmb3IgZGF0YSBtYXNraW5nLlxuICAgKlxuICAgKiBAbmFtZSBzZXREYXRhTWFza2luZ1xuICAgKiBAcGFyYW0ge21hc2tzfSBGb3JtYXQgcmVnZXggdG8gYmUgYXBwbGllZCBmb3IgbWFza2luZy5cbiAgICogQHBhcmFtIG1hc2tzXG4gICAqIEBwYXJhbSBtYXNrQ2hhcmFjdGVyXG4gICAqIEBwYXJhbSB7bWFza0NoYXJhY3Rlcn0gQ2hhcmFjdGVyIHRvIGJlIHVzZWQgYXMgYSBtYXNraW5nIGNoYXJhY3RlclxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIHN1Y2Nlc3NJbmRleDogMCxcbiAgICBlcnJvckluZGV4OiAxLFxuICB9KVxuICBzZXREYXRhTWFza2luZyhtYXNrczogYW55LCBtYXNrQ2hhcmFjdGVyOiBzdHJpbmcpOiBQcm9taXNlPFVzYWJpbGxhUmVzdWx0PiB7XG4gICAgcmV0dXJuO1xuICB9XG59XG4iXX0=