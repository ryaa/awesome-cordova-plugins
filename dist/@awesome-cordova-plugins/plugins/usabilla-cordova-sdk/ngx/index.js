import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import * as i0 from "@angular/core";
var Usabilla = /** @class */ (function (_super) {
    __extends(Usabilla, _super);
    function Usabilla() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Usabilla.prototype.initialize = function (appId, customVars) { return cordova(this, "initialize", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    Usabilla.prototype.loadFeedbackForm = function (formId) { return cordova(this, "loadFeedbackForm", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    Usabilla.prototype.loadFeedbackFormWithCurrentViewScreenshot = function (formId) { return cordova(this, "loadFeedbackFormWithCurrentViewScreenshot", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    Usabilla.prototype.sendEvent = function (eventId) { return cordova(this, "sendEvent", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    Usabilla.prototype.resetCampaignData = function () { return cordova(this, "resetCampaignData", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    Usabilla.prototype.dismiss = function () { return cordova(this, "dismiss", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    Usabilla.prototype.getDefaultDataMasks = function () { return cordova(this, "getDefaultDataMasks", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    Usabilla.prototype.setDataMasking = function (masks, maskCharacter) { return cordova(this, "setDataMasking", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    Usabilla.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: Usabilla, deps: null, target: i0.ɵɵFactoryTarget.Injectable });
    Usabilla.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: Usabilla });
    Usabilla.pluginName = "usabilla-cordova";
    Usabilla.plugin = "usabilla-cordova";
    Usabilla.pluginRef = "Usabilla";
    Usabilla.repo = "https://github.com/usabilla/usabilla-u4a-cordova";
    Usabilla.platforms = ["Android", "iOS"];
    Usabilla = __decorate([], Usabilla);
    return Usabilla;
}(AwesomeCordovaNativePlugin));
export { Usabilla };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: Usabilla, decorators: [{
            type: Injectable
        }], propDecorators: { initialize: [], loadFeedbackForm: [], loadFeedbackFormWithCurrentViewScreenshot: [], sendEvent: [], resetCampaignData: [], dismiss: [], getDefaultDataMasks: [], setDataMasking: [] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvdXNhYmlsbGEtY29yZG92YS1zZGsvbmd4L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sdUNBQStDLE1BQU0sK0JBQStCLENBQUM7OztJQXlEOUQsNEJBQTBCOzs7O0lBY3RELDZCQUFVLGFBQUMsS0FBYSxFQUFFLFVBQWU7SUFlekMsbUNBQWdCLGFBQUMsTUFBYztJQWUvQiw0REFBeUMsYUFBQyxNQUFjO0lBZXhELDRCQUFTLGFBQUMsT0FBZTtJQWF6QixvQ0FBaUI7SUFhakIsMEJBQU87SUFhUCxzQ0FBbUI7SUFpQm5CLGlDQUFjLGFBQUMsS0FBVSxFQUFFLGFBQXFCOzBHQW5IckMsUUFBUTs4R0FBUixRQUFROzs7Ozs7SUFBUixRQUFRLGtCQUFSLFFBQVE7bUJBMURyQjtFQTBEOEIsMEJBQTBCO1NBQTNDLFFBQVE7NEZBQVIsUUFBUTtrQkFEcEIsVUFBVTs4QkFlVCxVQUFVLE1BZVYsZ0JBQWdCLE1BZWhCLHlDQUF5QyxNQWV6QyxTQUFTLE1BYVQsaUJBQWlCLE1BYWpCLE9BQU8sTUFhUCxtQkFBbUIsTUFpQm5CLGNBQWMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQbHVnaW4sIENvcmRvdmEsIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL2NvcmUnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFVzYWJpbGxhUmVzdWx0IHtcbiAgY29tcGxldGVkOiBib29sZWFuIHwgc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFViQ2FtcGFpZ25SZXN1bHQge1xuICBjb21wbGV0ZWQ6IHtcbiAgICByZXN1bHQ6IFViUmVzdWx0O1xuICAgIGlzUmVkaXJlY3RUb0FwcFN0b3JlRW5hYmxlZD86IGJvb2xlYW47XG4gIH07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVWJSZXN1bHQge1xuICByYXRpbmc6IG51bWJlcjtcbiAgYWJhbmRvbmVkUGFnZUluZGV4OiBudW1iZXI7XG4gIHNlbnQ6IGJvb2xlYW47XG59XG5cbi8qKlxuICogQG5hbWUgVXNhYmlsbGFcbiAqIEBkZXNjcmlwdGlvblxuICogVXNhYmlsbGEgU0RLIGlzIGRlc2lnbmVkIGFuZCBkZXZlbG9wZWQgdG8gY29sbGVjdCBmZWVkYmFjayBmcm9tIHlvdXIgdXNlcnMgd2l0aCBncmVhdCBlYXNlIGFuZCBmbGV4aWJpbGl0eSB0aHJvdWdoIHlvdXIgbW9iaWxlIGFwcGxpY2F0aW9uLlxuICogVGhpcyBkb2N1bWVudCBkZXNjcmliZXMgbGlicmFyeSBpbnRlZ3JhdGlvbiBzdGVwcyBmb3IgeW91ciBDb3Jkb3ZhIHByb2plY3QuXG4gKlxuICogRm9yIG1vcmUgaW5mbyBzZWUgW0NvcmRvdmEgcGx1Z2luIGRvY3NdKGh0dHBzOi8vZ2l0aHViLmNvbS91c2FiaWxsYS91c2FiaWxsYS11NGEtY29yZG92YSlcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgVXNhYmlsbGEgfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvdXNhYmlsbGEtY29yZG92YS1zZGsvbmd4JztcbiAqXG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSB1c2FiaWxsYTogVXNhYmlsbGEpIHsgfVxuICpcbiAqIC4uLlxuICpcbiAqXG4gKiAgdGhpcy51c2FiaWxsYS5pbml0aWFsaXplKFxuICogICAgYXBwSUQ6ICc8eW91cl9hcHBsaWNhdGlvbl9pZD4nLFxuICogICAgY3VzdG9tX3ZhcnM6IHtcbiAqICAgICAgXCJrZXlcIjogXCJ2YWx1ZVwiXG4gKiAgICB9KTtcbiAqXG4gKiAgdGhpcy51c2FiaWxsYS5sb2FkRmVlZGJhY2tGb3JtKFxuICogICAgZm9ybUlEIDogJzx5b3VyX2Zvcm1faWQ+J1xuICogICAgKTtcbiAqXG4gKiBgYGBcbiAqL1xuXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ3VzYWJpbGxhLWNvcmRvdmEnLFxuICBwbHVnaW46ICd1c2FiaWxsYS1jb3Jkb3ZhJyxcbiAgcGx1Z2luUmVmOiAnVXNhYmlsbGEnLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL3VzYWJpbGxhL3VzYWJpbGxhLXU0YS1jb3Jkb3ZhJyxcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJ10sXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFVzYWJpbGxhIGV4dGVuZHMgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4ge1xuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgVXNhYmlsbGEgc2RrIGZvciBjYXB0dXJpbmcgZmVlZGJhY2tzLlxuICAgKlxuICAgKiBAbmFtZSBpbml0aWFsaXplXG4gICAqIEBwYXJhbSB7YXBwSWR9IEFQUF9JRCB1bmlxdWUgYXBwIGlkIHRvIGluaXRpYWxpemVcbiAgICogQHBhcmFtIGFwcElkXG4gICAqIEBwYXJhbSBjdXN0b21WYXJzXG4gICAqIEBwYXJhbSB7Y3VzdG9tVmFyc30gQ1VTVE9NX1ZBUklBQkxFUyBmb3IgdGFyZ2V0IGJhc2VkIGV2ZW50IHRyaWdnZXJcbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBzdWNjZXNzSW5kZXg6IDAsXG4gICAgZXJyb3JJbmRleDogMSxcbiAgfSlcbiAgaW5pdGlhbGl6ZShhcHBJZDogc3RyaW5nLCBjdXN0b21WYXJzOiBhbnkpOiBQcm9taXNlPFVzYWJpbGxhUmVzdWx0PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIERpc3BsYXlzIEZlZWRiYWNrIGZvcm0gYmFzZWQgb24gdW5pcXVlIGZvcm0gaWQgYWZ0ZXIgc2RrIGluaXRpYWxpemF0aW9uLlxuICAgKlxuICAgKiBAbmFtZSBsb2FkRmVlZGJhY2tGb3JtXG4gICAqIEBwYXJhbSBmb3JtSWRcbiAgICogQHBhcmFtIHtmb3JtSWR9IEZPUk1fSUQgdG8gZGlzcGxheSBGZWVkYmFjayBmb3JtIGZvclxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIHN1Y2Nlc3NJbmRleDogMCxcbiAgICBlcnJvckluZGV4OiAxLFxuICB9KVxuICBsb2FkRmVlZGJhY2tGb3JtKGZvcm1JZDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogRGlzcGxheXMgRmVlZGJhY2sgZm9ybSB3aXRoIGN1cnJlbnQgc2NyZWVuJ3Mgc25hcHNob3QgYW5kIGJhc2VkIG9uIHVuaXF1ZSBmb3JtIGlkLCBhZnRlciBzZGsgaW5pdGlhbGl6YXRpb24uXG4gICAqXG4gICAqIEBuYW1lIGxvYWRGZWVkYmFja0Zvcm1XaXRoQ3VycmVudFZpZXdTY3JlZW5zaG90XG4gICAqIEBwYXJhbSBmb3JtSWRcbiAgICogQHBhcmFtIHtmb3JtSWR9IEZPUk1fSUQgdG8gZGlzcGxheSBGZWVkYmFjayBmb3JtIGZvclxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIHN1Y2Nlc3NJbmRleDogMCxcbiAgICBlcnJvckluZGV4OiAxLFxuICB9KVxuICBsb2FkRmVlZGJhY2tGb3JtV2l0aEN1cnJlbnRWaWV3U2NyZWVuc2hvdChmb3JtSWQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIERpc3BsYXlzIENhbXBhaWduIGJhbm5lciB0YXJnZXR0ZWQgYmFzZWQgb24gc3BlY2lmaWMgZXZlbnQgYW5kIHZhcmlhYmxlcywgYWZ0ZXIgc2RrIGluaXRpYWxpemF0aW9uLlxuICAgKlxuICAgKiBAbmFtZSBzZW5kRXZlbnRcbiAgICogQHBhcmFtIGV2ZW50SWRcbiAgICogQHBhcmFtIHtldmVudElkfSBFVkVOVF9JRCB0byBkaXNwbGF5IENhbXBhaWduIGJhbm5lciBmb3JcbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBzdWNjZXNzSW5kZXg6IDAsXG4gICAgZXJyb3JJbmRleDogMSxcbiAgfSlcbiAgc2VuZEV2ZW50KGV2ZW50SWQ6IHN0cmluZyk6IFByb21pc2U8VWJDYW1wYWlnblJlc3VsdD4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXNldCBDYW1wYWlnbiBmb3IgbmV4dCB0cmlnZ2VyLlxuICAgKlxuICAgKiBAbmFtZSByZXNldENhbXBhaWduRGF0YVxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIHN1Y2Nlc3NJbmRleDogMCxcbiAgICBlcnJvckluZGV4OiAxLFxuICB9KVxuICByZXNldENhbXBhaWduRGF0YSgpOiBQcm9taXNlPFVzYWJpbGxhUmVzdWx0PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIERpc21pc3Mgb3IgcmVtb3ZlcyB0aGUgRm9ybS9CYW5uZXIgZnJvbSB0aGUgdmlldy5cbiAgICpcbiAgICogQG5hbWUgZGlzbWlzc1xuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIHN1Y2Nlc3NJbmRleDogMCxcbiAgICBlcnJvckluZGV4OiAxLFxuICB9KVxuICBkaXNtaXNzKCk6IFByb21pc2U8VXNhYmlsbGFSZXN1bHQ+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogR2V0IGRlZmF1bHQgbWFza2luZyBzdHJhdGVneSB0byBiZSBhcHBsaWVkIGZvciBkYXRhIG1hc2tpbmcuXG4gICAqXG4gICAqIEBuYW1lIGdldERlZmF1bHREYXRhTWFza3NcbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBzdWNjZXNzSW5kZXg6IDAsXG4gICAgZXJyb3JJbmRleDogMSxcbiAgfSlcbiAgZ2V0RGVmYXVsdERhdGFNYXNrcygpOiBQcm9taXNlPFVzYWJpbGxhUmVzdWx0PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCBtYXNraW5nIHN0cmF0ZWd5IGZvciBkYXRhIG1hc2tpbmcuXG4gICAqXG4gICAqIEBuYW1lIHNldERhdGFNYXNraW5nXG4gICAqIEBwYXJhbSB7bWFza3N9IEZvcm1hdCByZWdleCB0byBiZSBhcHBsaWVkIGZvciBtYXNraW5nLlxuICAgKiBAcGFyYW0gbWFza3NcbiAgICogQHBhcmFtIG1hc2tDaGFyYWN0ZXJcbiAgICogQHBhcmFtIHttYXNrQ2hhcmFjdGVyfSBDaGFyYWN0ZXIgdG8gYmUgdXNlZCBhcyBhIG1hc2tpbmcgY2hhcmFjdGVyXG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgc3VjY2Vzc0luZGV4OiAwLFxuICAgIGVycm9ySW5kZXg6IDEsXG4gIH0pXG4gIHNldERhdGFNYXNraW5nKG1hc2tzOiBhbnksIG1hc2tDaGFyYWN0ZXI6IHN0cmluZyk6IFByb21pc2U8VXNhYmlsbGFSZXN1bHQ+IHtcbiAgICByZXR1cm47XG4gIH1cbn1cbiJdfQ==