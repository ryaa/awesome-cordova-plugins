import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import * as i0 from "@angular/core";
var FbSdk = /** @class */ (function (_super) {
    __extends(FbSdk, _super);
    function FbSdk() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.EVENTS = {
            EVENT_NAME_ACTIVATED_APP: 'fb_mobile_activate_app',
            EVENT_NAME_DEACTIVATED_APP: 'fb_mobile_deactivate_app',
            EVENT_NAME_SESSION_INTERRUPTIONS: 'fb_mobile_app_interruptions',
            EVENT_NAME_TIME_BETWEEN_SESSIONS: 'fb_mobile_time_between_sessions',
            EVENT_NAME_COMPLETED_REGISTRATION: 'fb_mobile_complete_registration',
            EVENT_NAME_VIEWED_CONTENT: 'fb_mobile_content_view',
            EVENT_NAME_SEARCHED: 'fb_mobile_search',
            EVENT_NAME_RATED: 'fb_mobile_rate',
            EVENT_NAME_COMPLETED_TUTORIAL: 'fb_mobile_tutorial_completion',
            EVENT_NAME_PUSH_TOKEN_OBTAINED: 'fb_mobile_obtain_push_token',
            EVENT_NAME_ADDED_TO_CART: 'fb_mobile_add_to_cart',
            EVENT_NAME_ADDED_TO_WISHLIST: 'fb_mobile_add_to_wishlist',
            EVENT_NAME_INITIATED_CHECKOUT: 'fb_mobile_initiated_checkout',
            EVENT_NAME_ADDED_PAYMENT_INFO: 'fb_mobile_add_payment_info',
            EVENT_NAME_PURCHASED: 'fb_mobile_purchase',
            EVENT_NAME_ACHIEVED_LEVEL: 'fb_mobile_level_achieved',
            EVENT_NAME_UNLOCKED_ACHIEVEMENT: 'fb_mobile_achievement_unlocked',
            EVENT_NAME_SPENT_CREDITS: 'fb_mobile_spent_credits',
            EVENT_PARAM_CURRENCY: 'fb_currency',
            EVENT_PARAM_REGISTRATION_METHOD: 'fb_registration_method',
            EVENT_PARAM_CONTENT_TYPE: 'fb_content_type',
            EVENT_PARAM_CONTENT_ID: 'fb_content_id',
            EVENT_PARAM_SEARCH_STRING: 'fb_search_string',
            EVENT_PARAM_SUCCESS: 'fb_success',
            EVENT_PARAM_MAX_RATING_VALUE: 'fb_max_rating_value',
            EVENT_PARAM_PAYMENT_INFO_AVAILABLE: 'fb_payment_info_available',
            EVENT_PARAM_NUM_ITEMS: 'fb_num_items',
            EVENT_PARAM_LEVEL: 'fb_level',
            EVENT_PARAM_DESCRIPTION: 'fb_description',
            EVENT_PARAM_SOURCE_APPLICATION: 'fb_mobile_launch_source',
            EVENT_PARAM_VALUE_YES: '1',
            EVENT_PARAM_VALUE_NO: '0',
        };
        return _this;
    }
    FbSdk.prototype.getApplicationId = function () { return cordova(this, "getApplicationId", {}, arguments); };
    FbSdk.prototype.setApplicationId = function (id) { return cordova(this, "setApplicationId", {}, arguments); };
    FbSdk.prototype.getApplicationName = function () { return cordova(this, "getApplicationName", {}, arguments); };
    FbSdk.prototype.setApplicationName = function (name) { return cordova(this, "setApplicationName", {}, arguments); };
    FbSdk.prototype.login = function (permissions) { return cordova(this, "login", {}, arguments); };
    FbSdk.prototype.loginWithLimitedTracking = function (permissions) { return cordova(this, "loginWithLimitedTracking", {}, arguments); };
    FbSdk.prototype.checkHasCorrectPermissions = function (permissions) { return cordova(this, "checkHasCorrectPermissions", {}, arguments); };
    FbSdk.prototype.isDataAccessExpired = function () { return cordova(this, "isDataAccessExpired", {}, arguments); };
    FbSdk.prototype.reauthorizeDataAccess = function () { return cordova(this, "reauthorizeDataAccess", {}, arguments); };
    FbSdk.prototype.logout = function () { return cordova(this, "logout", {}, arguments); };
    FbSdk.prototype.getLoginStatus = function () { return cordova(this, "getLoginStatus", {}, arguments); };
    FbSdk.prototype.getAccessToken = function () { return cordova(this, "getAccessToken", {}, arguments); };
    FbSdk.prototype.getCurrentProfile = function () { return cordova(this, "getCurrentProfile", {}, arguments); };
    FbSdk.prototype.showDialog = function (options) { return cordova(this, "showDialog", {}, arguments); };
    FbSdk.prototype.api = function (requestPath, permissions, httpMethod) { return cordova(this, "api", {}, arguments); };
    FbSdk.prototype.setDataProcessingOptions = function (options, country, state) { return cordova(this, "setDataProcessingOptions", {}, arguments); };
    FbSdk.prototype.setUserData = function (userData) { return cordova(this, "setUserData", {}, arguments); };
    FbSdk.prototype.clearUserData = function () { return cordova(this, "clearUserData", {}, arguments); };
    FbSdk.prototype.logEvent = function (name, params, valueToSum) { return cordova(this, "logEvent", { "successIndex": 3, "errorIndex": 4 }, arguments); };
    FbSdk.prototype.setAutoLogAppEventsEnabled = function (enabled) { return cordova(this, "setAutoLogAppEventsEnabled", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    FbSdk.prototype.setAdvertiserIDCollectionEnabled = function (enabled) { return cordova(this, "setAdvertiserIDCollectionEnabled", {}, arguments); };
    FbSdk.prototype.setAdvertiserTrackingEnabled = function (enabled) { return cordova(this, "setAdvertiserTrackingEnabled", {}, arguments); };
    FbSdk.prototype.logPurchase = function (value, currency, params) { return cordova(this, "logPurchase", {}, arguments); };
    FbSdk.prototype.getDeferredApplink = function () { return cordova(this, "getDeferredApplink", {}, arguments); };
    FbSdk.prototype.activateApp = function () { return cordova(this, "activateApp", {}, arguments); };
    FbSdk.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FbSdk, deps: null, target: i0.ɵɵFactoryTarget.Injectable });
    FbSdk.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FbSdk });
    FbSdk.pluginName = "Facebook";
    FbSdk.plugin = "cordova-plugin-fbsdk";
    FbSdk.pluginRef = "facebookConnectPlugin";
    FbSdk.repo = "https://github.com/MaximBelov/cordova-plugin-fbsdk";
    FbSdk.install = "ionic cordova plugin add cordova-plugin-fbsdk --variable APP_ID=\"123456789\" --variable APP_NAME=\"myApplication\" --variable CLIENT_TOKEN=\"abcd1234\"";
    FbSdk.installVariables = ["APP_ID", "APP_NAME", "CLIENT_TOKEN"];
    FbSdk.platforms = ["Android", "iOS", "Browser"];
    FbSdk = __decorate([], FbSdk);
    return FbSdk;
}(AwesomeCordovaNativePlugin));
export { FbSdk };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FbSdk, decorators: [{
            type: Injectable
        }], propDecorators: { getApplicationId: [], setApplicationId: [], getApplicationName: [], setApplicationName: [], login: [], loginWithLimitedTracking: [], checkHasCorrectPermissions: [], isDataAccessExpired: [], reauthorizeDataAccess: [], logout: [], getLoginStatus: [], getAccessToken: [], getCurrentProfile: [], showDialog: [], api: [], setDataProcessingOptions: [], setUserData: [], clearUserData: [], logEvent: [], setAutoLogAppEventsEnabled: [], setAdvertiserIDCollectionEnabled: [], setAdvertiserTrackingEnabled: [], logPurchase: [], getDeferredApplink: [], activateApp: [] } });
//# sourceMappingURL=data:application/json;base64,