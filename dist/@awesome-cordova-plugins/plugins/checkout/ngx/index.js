import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import * as i0 from "@angular/core";
var Checkout = /** @class */ (function (_super) {
    __extends(Checkout, _super);
    function Checkout() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Checkout.prototype.initSandboxClient = function (publicKey) { return cordova(this, "initSandboxClient", {}, arguments); };
    Checkout.prototype.initLiveClient = function (publicKey) { return cordova(this, "initLiveClient", {}, arguments); };
    Checkout.prototype.generateToken = function (ckoCardTokenRequest) { return cordova(this, "generateToken", {}, arguments); };
    Checkout.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: Checkout, deps: null, target: i0.ɵɵFactoryTarget.Injectable });
    Checkout.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: Checkout });
    Checkout.pluginName = "Checkout";
    Checkout.plugin = "@checkout.com/cordova-plugin-checkout";
    Checkout.pluginRef = "cordova.plugins.Checkout";
    Checkout.repo = "https://github.com/checkout/frames-cordova";
    Checkout.install = "";
    Checkout.installVariables = [];
    Checkout.platforms = ["Android", "iOS"];
    Checkout = __decorate([], Checkout);
    return Checkout;
}(AwesomeCordovaNativePlugin));
export { Checkout };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: Checkout, decorators: [{
            type: Injectable
        }], propDecorators: { initSandboxClient: [], initLiveClient: [], generateToken: [] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvY2hlY2tvdXQvbmd4L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sdUNBQStDLE1BQU0sK0JBQStCLENBQUM7OztJQTRMOUQsNEJBQTBCOzs7O0lBUXRELG9DQUFpQixhQUFDLFNBQWlCO0lBV25DLGlDQUFjLGFBQUMsU0FBaUI7SUFXaEMsZ0NBQWEsYUFBQyxtQkFBd0M7MEdBOUIzQyxRQUFROzhHQUFSLFFBQVE7Ozs7Ozs7O0lBQVIsUUFBUSxrQkFBUixRQUFRO21CQTdMckI7RUE2TDhCLDBCQUEwQjtTQUEzQyxRQUFROzRGQUFSLFFBQVE7a0JBRHBCLFVBQVU7OEJBU1QsaUJBQWlCLE1BV2pCLGNBQWMsTUFXZCxhQUFhIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUGx1Z2luLCBDb3Jkb3ZhLCBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiB9IGZyb20gJ0Bhd2Vzb21lLWNvcmRvdmEtcGx1Z2lucy9jb3JlJztcblxuZXhwb3J0IGludGVyZmFjZSBDa29DYXJkVG9rZW5SZXF1ZXN0IHtcbiAgLyoqXG4gICAqIFRoZSBjYXJkIG51bWJlclxuICAgKi9cbiAgbnVtYmVyOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgZXhwaXJ5IG1vbnRoIG9mIHRoZSBjYXJkXG4gICAqL1xuICBleHBpcnlfbW9udGg6IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSBleHBpcnkgeWVhciBvZiB0aGUgY2FyZFxuICAgKi9cbiAgZXhwaXJ5X3llYXI6IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSBjYXJkIHZlcmlmaWNhdGlvbiB2YWx1ZS9jb2RlLiAzIGRpZ2l0cywgZXhjZXB0IGZvciBBbWV4ICg0IGRpZ2l0cylcbiAgICovXG4gIGN2dj86IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSBjYXJkaG9sZGVyJ3MgbmFtZVxuICAgKi9cbiAgbmFtZT86IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSBjYXJkaG9sZGVyJ3MgYmlsbGluZyBhZGRyZXNzXG4gICAqL1xuICBiaWxsaW5nX2FkZHJlc3M/OiBBZGRyZXNzO1xuICAvKipcbiAgICogVGhlIGNhcmRob2xkZXIncyBwaG9uZSBudW1iZXJcbiAgICovXG4gIHBob25lPzogUGhvbmU7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2tvQ2FyZFRva2VuUmVzcG9uc2Uge1xuICAvKipcbiAgICogVGhlIHRva2VuIHR5cGVcbiAgICovXG4gIHR5cGU6IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSB0b2tlbiB2YWx1ZVxuICAgKi9cbiAgdG9rZW46IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSBleHBpcmF0aW9uIGRhdGV0aW1lIG9mIHRoZSB0b2tlblxuICAgKi9cbiAgZXhwaXJlc19vbjogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIGV4cGlyeSBtb250aCBvZiB0aGUgY2FyZFxuICAgKi9cbiAgZXhwaXJ5X21vbnRoOiBudW1iZXI7XG4gIC8qKlxuICAgKiBUaGUgZXhwaXJ5IHllYXIgb2YgdGhlIGNhcmRcbiAgICovXG4gIGV4cGlyeV95ZWFyOiBudW1iZXI7XG4gIC8qKlxuICAgKiBUaGUgY2FyZGhvbGRlcidzIG5hbWVcbiAgICovXG4gIG5hbWU6IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSBjYXJkIHNjaGVtZVxuICAgKi9cbiAgc2NoZW1lOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgbGFzdCA0IGRpZ2l0IG9mIHRoZSBjYXJkIG51bWJlclxuICAgKi9cbiAgbGFzdDQ6IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSBiaW4gcmFuZ2Ugb2YgdGhlIGNhcmRcbiAgICovXG4gIGJpbjogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIGNhcmQgdHlwZVxuICAgKi9cbiAgY2FyZF90eXBlOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgY2FyZCBjYXRlZ29yeVxuICAgKi9cbiAgY2FyZF9jYXRlZ29yeTogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIGNhcmQgaXNzdWVyIG5hbWVcbiAgICovXG4gIGlzc3Vlcjogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIGNhcmQgaXNzdWVyIGNvdW50cnkgKHR3by1sZXR0ZXIgSVNPKVxuICAgKi9cbiAgaXNzdWVyX2NvdW50cnk6IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSBjYXJkIHByb2R1Y3QgaWRcbiAgICovXG4gIHByb2R1Y3RfaWQ6IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSBjYXJkIHByb2R1Y3QgdHlwZVxuICAgKi9cbiAgcHJvZHVjdF90eXBlOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgY2FyZGhvbGRlcidzIGJpbGxpbmcgYWRkcmVzc1xuICAgKi9cbiAgYmlsbGluZ19hZGRyZXNzOiBBZGRyZXNzO1xuICAvKipcbiAgICogVGhlIGNhcmRob2xkZXIncyBwaG9uZSBudW1iZXJcbiAgICovXG4gIHBob25lOiBQaG9uZTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBZGRyZXNzIHtcbiAgLyoqXG4gICAqIFRoZSBmaXJzdCBsaW5lIG9mIHRoZSBhZGRyZXNzXG4gICAqL1xuICBhZGRyZXNzX2xpbmUxPzogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIHNlY29uZCBsaW5lIG9mIHRoZSBhZGRyZXNzXG4gICAqL1xuICBhZGRyZXNzX2xpbmUyPzogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIGFkZHJlc3MgY2l0eVxuICAgKi9cbiAgY2l0eT86IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSBhZGRyZXNzIHN0YXRlXG4gICAqL1xuICBzdGF0ZT86IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSBhZGRyZXNzIHppcC9wb3N0YWwgY29kZVxuICAgKi9cbiAgemlwPzogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIHR3by1sZXR0ZXIgSVNPIGNvdW50cnkgY29kZSBvZiB0aGUgYWRkcmVzc1xuICAgKi9cbiAgY291bnRyeT86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQaG9uZSB7XG4gIC8qKlxuICAgKiBUaGUgaW50ZXJuYXRpb25hbCBjb3VudHJ5IGNhbGxpbmcgY29kZS4gUmVxdWlyZWQgZm9yIHNvbWUgcmlzayBjaGVja3NcbiAgICovXG4gIGNvdW50cnlfY29kZTogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIHBob25lIG51bWJlclxuICAgKi9cbiAgbnVtYmVyOiBzdHJpbmc7XG59XG5cbi8qKlxuICogQG5hbWUgQ2hlY2tvdXRcbiAqIEBkZXNjcmlwdGlvblxuICogQ2hlY2tvdXQuY29tIGNvcmRvdmEgcGx1Z2luXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IENoZWNrb3V0IH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL2NoZWNrb3V0L25neCc7XG4gKlxuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgY2hlY2tvdXQ6IENoZWNrb3V0KSB7IH1cbiAqXG4gKiAuLi5cbiAqXG4gKlxuICogdGhpcy5jaGVja291dC5pbml0U2FuZGJveENsaWVudChcInBrX3Rlc3RfN2QzOTU4NzEtMGQ2Ni00YjYyLTg1YjYtODQyNGRmNzhiMTI1XCIpXG4gKiAgICAgLnRoZW4oKCkgPT4gdGhpcy5sYWJlbCA9IFwiQ0tPIGluaXQgY29tcGxldGVkXCIpXG4gKiAgICAgLmNhdGNoKGVyciA9PiB0aGlzLmxhYmVsID0gZXJyKVxuICpcbiAqIC4uLlxuICpcbiAqIGxldCB0b2tlblJlcXVlc3Q6IENrb0NhcmRUb2tlblJlcXVlc3QgPSB7XG4gKiAgICAgbnVtYmVyOiBcIjQ1NDM0NzQwMDIyNDk5OTZcIixcbiAqICAgICBjdnY6IFwiMDEwXCIsXG4gKiAgICAgZXhwaXJ5X21vbnRoOiBcIjA4XCIsXG4gKiAgICAgZXhwaXJ5X3llYXI6IFwiMjAyNVwiLFxuICogICAgIGJpbGxpbmdfYWRkcmVzczoge1xuICogICAgICAgY291bnRyeTogXCJGUlwiXG4gKiAgICAgfVxuICogICB9XG4gKlxuICpcbiAqICAgdGhpcy5ja28uZ2VuZXJhdGVUb2tlbih0b2tlblJlcXVlc3QpXG4gKiAgIC50aGVuKHRva2VuUmVzcG9uc2UgPT4gdGhpcy5sYWJlbCA9IFwiVG9rZW46IFwiICsgdG9rZW5SZXNwb25zZS50b2tlbilcbiAqICAgLmNhdGNoKGVyciA9PiB0aGlzLmxhYmVsID0gZXJyKVxuICogYGBgXG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnQ2hlY2tvdXQnLFxuICBwbHVnaW46ICdAY2hlY2tvdXQuY29tL2NvcmRvdmEtcGx1Z2luLWNoZWNrb3V0JyxcbiAgcGx1Z2luUmVmOiAnY29yZG92YS5wbHVnaW5zLkNoZWNrb3V0JyxcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9jaGVja291dC9mcmFtZXMtY29yZG92YScsXG4gIGluc3RhbGw6ICcnLFxuICBpbnN0YWxsVmFyaWFibGVzOiBbXSxcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJ10sXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIENoZWNrb3V0IGV4dGVuZHMgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4ge1xuICAvKipcbiAgICogSW5pdGlhbGl6ZSBGcmFtZXMgcGx1Z2luIGluIFNhbmRib3ggbW9kZVxuICAgKlxuICAgKiBAcGFyYW0gcHVibGljS2V5IHtzdHJpbmd9IE1lcmNoYW50J3Mgc2FuZGJveCBwdWJsaWMga2V5XG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiBGcmFtZXMgaW5pdGlhdGlvbiBpcyBjb21wbGV0ZWRcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgaW5pdFNhbmRib3hDbGllbnQocHVibGljS2V5OiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplIEZyYW1lcyBwbHVnaW4gaW4gTGl2ZSBtb2RlXG4gICAqXG4gICAqIEBwYXJhbSBwdWJsaWNLZXkge3N0cmluZ30gTWVyY2hhbnQncyBsaXZlIHB1YmxpYyBrZXlcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIEZyYW1lcyBpbml0aWF0aW9uIGlzIGNvbXBsZXRlZFxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBpbml0TGl2ZUNsaWVudChwdWJsaWNLZXk6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIEV4Y2hhbmdlIGNhcmQgZGV0YWlscyBmb3IgYSByZWZlcmVuY2UgdG9rZW4gdGhhdCBjYW4gYmUgdXNlZCBsYXRlciB0byByZXF1ZXN0IGEgY2FyZCBwYXltZW50IGZyb20geW91ciBiYWNrZW5kLiBUb2tlbnMgYXJlIHNpbmdsZSB1c2UgYW5kIGV4cGlyZSBhZnRlciAxNSBtaW51dGVzLlxuICAgKlxuICAgKiBAcGFyYW0gY2tvQ2FyZFRva2VuUmVxdWVzdCB7Q2tvQ2FyZFRva2VuUmVxdWVzdH0gQ2FyZCB0b2tlbml6YXRpb24gcmVxdWVzdCBvYmplY3RcbiAgICogQHJldHVybnMge1Byb21pc2U8Q2tvQ2FyZFRva2VuUmVzcG9uc2U+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gVG9rZW4gcmVzcG9uc2Ugb2JqZWN0XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGdlbmVyYXRlVG9rZW4oY2tvQ2FyZFRva2VuUmVxdWVzdDogQ2tvQ2FyZFRva2VuUmVxdWVzdCk6IFByb21pc2U8Q2tvQ2FyZFRva2VuUmVzcG9uc2U+IHtcbiAgICByZXR1cm47XG4gIH1cbn1cbiJdfQ==