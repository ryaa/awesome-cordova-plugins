var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var CheckoutOriginal = /** @class */ (function (_super) {
    __extends(CheckoutOriginal, _super);
    function CheckoutOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CheckoutOriginal.prototype.initSandboxClient = function (publicKey) { return cordova(this, "initSandboxClient", {}, arguments); };
    CheckoutOriginal.prototype.initLiveClient = function (publicKey) { return cordova(this, "initLiveClient", {}, arguments); };
    CheckoutOriginal.prototype.generateToken = function (ckoCardTokenRequest) { return cordova(this, "generateToken", {}, arguments); };
    CheckoutOriginal.pluginName = "Checkout";
    CheckoutOriginal.plugin = "@checkout.com/cordova-plugin-checkout";
    CheckoutOriginal.pluginRef = "cordova.plugins.Checkout";
    CheckoutOriginal.repo = "https://github.com/checkout/frames-cordova";
    CheckoutOriginal.install = "";
    CheckoutOriginal.installVariables = [];
    CheckoutOriginal.platforms = ["Android", "iOS"];
    return CheckoutOriginal;
}(AwesomeCordovaNativePlugin));
var Checkout = new CheckoutOriginal();
export { Checkout };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvY2hlY2tvdXQvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUNBLE9BQU8sdUNBQStDLE1BQU0sK0JBQStCLENBQUM7O0lBNEw5RCw0QkFBMEI7Ozs7SUFRdEQsb0NBQWlCLGFBQUMsU0FBaUI7SUFXbkMsaUNBQWMsYUFBQyxTQUFpQjtJQVdoQyxnQ0FBYSxhQUFDLG1CQUF3Qzs7Ozs7Ozs7bUJBM054RDtFQTZMOEIsMEJBQTBCO1NBQTNDLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQbHVnaW4sIENvcmRvdmEsIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL2NvcmUnO1xuXG5leHBvcnQgaW50ZXJmYWNlIENrb0NhcmRUb2tlblJlcXVlc3Qge1xuICAvKipcbiAgICogVGhlIGNhcmQgbnVtYmVyXG4gICAqL1xuICBudW1iZXI6IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSBleHBpcnkgbW9udGggb2YgdGhlIGNhcmRcbiAgICovXG4gIGV4cGlyeV9tb250aDogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIGV4cGlyeSB5ZWFyIG9mIHRoZSBjYXJkXG4gICAqL1xuICBleHBpcnlfeWVhcjogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIGNhcmQgdmVyaWZpY2F0aW9uIHZhbHVlL2NvZGUuIDMgZGlnaXRzLCBleGNlcHQgZm9yIEFtZXggKDQgZGlnaXRzKVxuICAgKi9cbiAgY3Z2Pzogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIGNhcmRob2xkZXIncyBuYW1lXG4gICAqL1xuICBuYW1lPzogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIGNhcmRob2xkZXIncyBiaWxsaW5nIGFkZHJlc3NcbiAgICovXG4gIGJpbGxpbmdfYWRkcmVzcz86IEFkZHJlc3M7XG4gIC8qKlxuICAgKiBUaGUgY2FyZGhvbGRlcidzIHBob25lIG51bWJlclxuICAgKi9cbiAgcGhvbmU/OiBQaG9uZTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDa29DYXJkVG9rZW5SZXNwb25zZSB7XG4gIC8qKlxuICAgKiBUaGUgdG9rZW4gdHlwZVxuICAgKi9cbiAgdHlwZTogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIHRva2VuIHZhbHVlXG4gICAqL1xuICB0b2tlbjogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIGV4cGlyYXRpb24gZGF0ZXRpbWUgb2YgdGhlIHRva2VuXG4gICAqL1xuICBleHBpcmVzX29uOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgZXhwaXJ5IG1vbnRoIG9mIHRoZSBjYXJkXG4gICAqL1xuICBleHBpcnlfbW9udGg6IG51bWJlcjtcbiAgLyoqXG4gICAqIFRoZSBleHBpcnkgeWVhciBvZiB0aGUgY2FyZFxuICAgKi9cbiAgZXhwaXJ5X3llYXI6IG51bWJlcjtcbiAgLyoqXG4gICAqIFRoZSBjYXJkaG9sZGVyJ3MgbmFtZVxuICAgKi9cbiAgbmFtZTogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIGNhcmQgc2NoZW1lXG4gICAqL1xuICBzY2hlbWU6IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSBsYXN0IDQgZGlnaXQgb2YgdGhlIGNhcmQgbnVtYmVyXG4gICAqL1xuICBsYXN0NDogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIGJpbiByYW5nZSBvZiB0aGUgY2FyZFxuICAgKi9cbiAgYmluOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgY2FyZCB0eXBlXG4gICAqL1xuICBjYXJkX3R5cGU6IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSBjYXJkIGNhdGVnb3J5XG4gICAqL1xuICBjYXJkX2NhdGVnb3J5OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgY2FyZCBpc3N1ZXIgbmFtZVxuICAgKi9cbiAgaXNzdWVyOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgY2FyZCBpc3N1ZXIgY291bnRyeSAodHdvLWxldHRlciBJU08pXG4gICAqL1xuICBpc3N1ZXJfY291bnRyeTogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIGNhcmQgcHJvZHVjdCBpZFxuICAgKi9cbiAgcHJvZHVjdF9pZDogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIGNhcmQgcHJvZHVjdCB0eXBlXG4gICAqL1xuICBwcm9kdWN0X3R5cGU6IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSBjYXJkaG9sZGVyJ3MgYmlsbGluZyBhZGRyZXNzXG4gICAqL1xuICBiaWxsaW5nX2FkZHJlc3M6IEFkZHJlc3M7XG4gIC8qKlxuICAgKiBUaGUgY2FyZGhvbGRlcidzIHBob25lIG51bWJlclxuICAgKi9cbiAgcGhvbmU6IFBob25lO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFkZHJlc3Mge1xuICAvKipcbiAgICogVGhlIGZpcnN0IGxpbmUgb2YgdGhlIGFkZHJlc3NcbiAgICovXG4gIGFkZHJlc3NfbGluZTE/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgc2Vjb25kIGxpbmUgb2YgdGhlIGFkZHJlc3NcbiAgICovXG4gIGFkZHJlc3NfbGluZTI/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgYWRkcmVzcyBjaXR5XG4gICAqL1xuICBjaXR5Pzogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIGFkZHJlc3Mgc3RhdGVcbiAgICovXG4gIHN0YXRlPzogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIGFkZHJlc3MgemlwL3Bvc3RhbCBjb2RlXG4gICAqL1xuICB6aXA/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgdHdvLWxldHRlciBJU08gY291bnRyeSBjb2RlIG9mIHRoZSBhZGRyZXNzXG4gICAqL1xuICBjb3VudHJ5Pzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBob25lIHtcbiAgLyoqXG4gICAqIFRoZSBpbnRlcm5hdGlvbmFsIGNvdW50cnkgY2FsbGluZyBjb2RlLiBSZXF1aXJlZCBmb3Igc29tZSByaXNrIGNoZWNrc1xuICAgKi9cbiAgY291bnRyeV9jb2RlOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgcGhvbmUgbnVtYmVyXG4gICAqL1xuICBudW1iZXI6IHN0cmluZztcbn1cblxuLyoqXG4gKiBAbmFtZSBDaGVja291dFxuICogQGRlc2NyaXB0aW9uXG4gKiBDaGVja291dC5jb20gY29yZG92YSBwbHVnaW5cbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgQ2hlY2tvdXQgfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvY2hlY2tvdXQvbmd4JztcbiAqXG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSBjaGVja291dDogQ2hlY2tvdXQpIHsgfVxuICpcbiAqIC4uLlxuICpcbiAqXG4gKiB0aGlzLmNoZWNrb3V0LmluaXRTYW5kYm94Q2xpZW50KFwicGtfdGVzdF83ZDM5NTg3MS0wZDY2LTRiNjItODViNi04NDI0ZGY3OGIxMjVcIilcbiAqICAgICAudGhlbigoKSA9PiB0aGlzLmxhYmVsID0gXCJDS08gaW5pdCBjb21wbGV0ZWRcIilcbiAqICAgICAuY2F0Y2goZXJyID0+IHRoaXMubGFiZWwgPSBlcnIpXG4gKlxuICogLi4uXG4gKlxuICogbGV0IHRva2VuUmVxdWVzdDogQ2tvQ2FyZFRva2VuUmVxdWVzdCA9IHtcbiAqICAgICBudW1iZXI6IFwiNDU0MzQ3NDAwMjI0OTk5NlwiLFxuICogICAgIGN2djogXCIwMTBcIixcbiAqICAgICBleHBpcnlfbW9udGg6IFwiMDhcIixcbiAqICAgICBleHBpcnlfeWVhcjogXCIyMDI1XCIsXG4gKiAgICAgYmlsbGluZ19hZGRyZXNzOiB7XG4gKiAgICAgICBjb3VudHJ5OiBcIkZSXCJcbiAqICAgICB9XG4gKiAgIH1cbiAqXG4gKlxuICogICB0aGlzLmNrby5nZW5lcmF0ZVRva2VuKHRva2VuUmVxdWVzdClcbiAqICAgLnRoZW4odG9rZW5SZXNwb25zZSA9PiB0aGlzLmxhYmVsID0gXCJUb2tlbjogXCIgKyB0b2tlblJlc3BvbnNlLnRva2VuKVxuICogICAuY2F0Y2goZXJyID0+IHRoaXMubGFiZWwgPSBlcnIpXG4gKiBgYGBcbiAqL1xuQFBsdWdpbih7XG4gIHBsdWdpbk5hbWU6ICdDaGVja291dCcsXG4gIHBsdWdpbjogJ0BjaGVja291dC5jb20vY29yZG92YS1wbHVnaW4tY2hlY2tvdXQnLFxuICBwbHVnaW5SZWY6ICdjb3Jkb3ZhLnBsdWdpbnMuQ2hlY2tvdXQnLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL2NoZWNrb3V0L2ZyYW1lcy1jb3Jkb3ZhJyxcbiAgaW5zdGFsbDogJycsXG4gIGluc3RhbGxWYXJpYWJsZXM6IFtdLFxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXSxcbn0pXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQ2hlY2tvdXQgZXh0ZW5kcyBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiB7XG4gIC8qKlxuICAgKiBJbml0aWFsaXplIEZyYW1lcyBwbHVnaW4gaW4gU2FuZGJveCBtb2RlXG4gICAqXG4gICAqIEBwYXJhbSBwdWJsaWNLZXkge3N0cmluZ30gTWVyY2hhbnQncyBzYW5kYm94IHB1YmxpYyBrZXlcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIEZyYW1lcyBpbml0aWF0aW9uIGlzIGNvbXBsZXRlZFxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBpbml0U2FuZGJveENsaWVudChwdWJsaWNLZXk6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemUgRnJhbWVzIHBsdWdpbiBpbiBMaXZlIG1vZGVcbiAgICpcbiAgICogQHBhcmFtIHB1YmxpY0tleSB7c3RyaW5nfSBNZXJjaGFudCdzIGxpdmUgcHVibGljIGtleVxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gRnJhbWVzIGluaXRpYXRpb24gaXMgY29tcGxldGVkXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGluaXRMaXZlQ2xpZW50KHB1YmxpY0tleTogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogRXhjaGFuZ2UgY2FyZCBkZXRhaWxzIGZvciBhIHJlZmVyZW5jZSB0b2tlbiB0aGF0IGNhbiBiZSB1c2VkIGxhdGVyIHRvIHJlcXVlc3QgYSBjYXJkIHBheW1lbnQgZnJvbSB5b3VyIGJhY2tlbmQuIFRva2VucyBhcmUgc2luZ2xlIHVzZSBhbmQgZXhwaXJlIGFmdGVyIDE1IG1pbnV0ZXMuXG4gICAqXG4gICAqIEBwYXJhbSBja29DYXJkVG9rZW5SZXF1ZXN0IHtDa29DYXJkVG9rZW5SZXF1ZXN0fSBDYXJkIHRva2VuaXphdGlvbiByZXF1ZXN0IG9iamVjdFxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxDa29DYXJkVG9rZW5SZXNwb25zZT59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiBUb2tlbiByZXNwb25zZSBvYmplY3RcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgZ2VuZXJhdGVUb2tlbihja29DYXJkVG9rZW5SZXF1ZXN0OiBDa29DYXJkVG9rZW5SZXF1ZXN0KTogUHJvbWlzZTxDa29DYXJkVG9rZW5SZXNwb25zZT4ge1xuICAgIHJldHVybjtcbiAgfVxufVxuIl19