var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var CheckoutOriginal = /** @class */ (function (_super) {
    __extends(CheckoutOriginal, _super);
    function CheckoutOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CheckoutOriginal.prototype.initSandboxClient = function (publicKey) { return cordova(this, "initSandboxClient", {}, arguments); };
    CheckoutOriginal.prototype.initLiveClient = function (publicKey) { return cordova(this, "initLiveClient", {}, arguments); };
    CheckoutOriginal.prototype.generateToken = function (ckoCardTokenRequest) { return cordova(this, "generateToken", {}, arguments); };
    CheckoutOriginal.pluginName = "Checkout";
    CheckoutOriginal.plugin = "@checkout.com/cordova-plugin-checkout";
    CheckoutOriginal.pluginRef = "cordova.plugins.Checkout";
    CheckoutOriginal.repo = "https://github.com/checkout/frames-cordova";
    CheckoutOriginal.install = "";
    CheckoutOriginal.installVariables = [];
    CheckoutOriginal.platforms = ["Android", "iOS"];
    return CheckoutOriginal;
}(AwesomeCordovaNativePlugin));
var Checkout = new CheckoutOriginal();
export { Checkout };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvY2hlY2tvdXQvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQ0EsT0FBTyx1Q0FBK0MsTUFBTSwrQkFBK0IsQ0FBQzs7SUE0TDlELDRCQUEwQjs7OztJQVF0RCxvQ0FBaUIsYUFBQyxTQUFpQjtJQVduQyxpQ0FBYyxhQUFDLFNBQWlCO0lBV2hDLGdDQUFhLGFBQUMsbUJBQXdDOzs7Ozs7OzttQkEzTnhEO0VBNkw4QiwwQkFBMEI7U0FBM0MsUUFBUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFBsdWdpbiwgQ29yZG92YSwgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4gfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvY29yZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2tvQ2FyZFRva2VuUmVxdWVzdCB7XG4gIC8qKlxuICAgKiBUaGUgY2FyZCBudW1iZXJcbiAgICovXG4gIG51bWJlcjogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIGV4cGlyeSBtb250aCBvZiB0aGUgY2FyZFxuICAgKi9cbiAgZXhwaXJ5X21vbnRoOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgZXhwaXJ5IHllYXIgb2YgdGhlIGNhcmRcbiAgICovXG4gIGV4cGlyeV95ZWFyOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgY2FyZCB2ZXJpZmljYXRpb24gdmFsdWUvY29kZS4gMyBkaWdpdHMsIGV4Y2VwdCBmb3IgQW1leCAoNCBkaWdpdHMpXG4gICAqL1xuICBjdnY/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgY2FyZGhvbGRlcidzIG5hbWVcbiAgICovXG4gIG5hbWU/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgY2FyZGhvbGRlcidzIGJpbGxpbmcgYWRkcmVzc1xuICAgKi9cbiAgYmlsbGluZ19hZGRyZXNzPzogQWRkcmVzcztcbiAgLyoqXG4gICAqIFRoZSBjYXJkaG9sZGVyJ3MgcGhvbmUgbnVtYmVyXG4gICAqL1xuICBwaG9uZT86IFBob25lO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENrb0NhcmRUb2tlblJlc3BvbnNlIHtcbiAgLyoqXG4gICAqIFRoZSB0b2tlbiB0eXBlXG4gICAqL1xuICB0eXBlOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgdG9rZW4gdmFsdWVcbiAgICovXG4gIHRva2VuOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgZXhwaXJhdGlvbiBkYXRldGltZSBvZiB0aGUgdG9rZW5cbiAgICovXG4gIGV4cGlyZXNfb246IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSBleHBpcnkgbW9udGggb2YgdGhlIGNhcmRcbiAgICovXG4gIGV4cGlyeV9tb250aDogbnVtYmVyO1xuICAvKipcbiAgICogVGhlIGV4cGlyeSB5ZWFyIG9mIHRoZSBjYXJkXG4gICAqL1xuICBleHBpcnlfeWVhcjogbnVtYmVyO1xuICAvKipcbiAgICogVGhlIGNhcmRob2xkZXIncyBuYW1lXG4gICAqL1xuICBuYW1lOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgY2FyZCBzY2hlbWVcbiAgICovXG4gIHNjaGVtZTogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIGxhc3QgNCBkaWdpdCBvZiB0aGUgY2FyZCBudW1iZXJcbiAgICovXG4gIGxhc3Q0OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgYmluIHJhbmdlIG9mIHRoZSBjYXJkXG4gICAqL1xuICBiaW46IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSBjYXJkIHR5cGVcbiAgICovXG4gIGNhcmRfdHlwZTogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIGNhcmQgY2F0ZWdvcnlcbiAgICovXG4gIGNhcmRfY2F0ZWdvcnk6IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSBjYXJkIGlzc3VlciBuYW1lXG4gICAqL1xuICBpc3N1ZXI6IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSBjYXJkIGlzc3VlciBjb3VudHJ5ICh0d28tbGV0dGVyIElTTylcbiAgICovXG4gIGlzc3Vlcl9jb3VudHJ5OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgY2FyZCBwcm9kdWN0IGlkXG4gICAqL1xuICBwcm9kdWN0X2lkOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgY2FyZCBwcm9kdWN0IHR5cGVcbiAgICovXG4gIHByb2R1Y3RfdHlwZTogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIGNhcmRob2xkZXIncyBiaWxsaW5nIGFkZHJlc3NcbiAgICovXG4gIGJpbGxpbmdfYWRkcmVzczogQWRkcmVzcztcbiAgLyoqXG4gICAqIFRoZSBjYXJkaG9sZGVyJ3MgcGhvbmUgbnVtYmVyXG4gICAqL1xuICBwaG9uZTogUGhvbmU7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQWRkcmVzcyB7XG4gIC8qKlxuICAgKiBUaGUgZmlyc3QgbGluZSBvZiB0aGUgYWRkcmVzc1xuICAgKi9cbiAgYWRkcmVzc19saW5lMT86IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSBzZWNvbmQgbGluZSBvZiB0aGUgYWRkcmVzc1xuICAgKi9cbiAgYWRkcmVzc19saW5lMj86IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSBhZGRyZXNzIGNpdHlcbiAgICovXG4gIGNpdHk/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgYWRkcmVzcyBzdGF0ZVxuICAgKi9cbiAgc3RhdGU/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgYWRkcmVzcyB6aXAvcG9zdGFsIGNvZGVcbiAgICovXG4gIHppcD86IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSB0d28tbGV0dGVyIElTTyBjb3VudHJ5IGNvZGUgb2YgdGhlIGFkZHJlc3NcbiAgICovXG4gIGNvdW50cnk/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGhvbmUge1xuICAvKipcbiAgICogVGhlIGludGVybmF0aW9uYWwgY291bnRyeSBjYWxsaW5nIGNvZGUuIFJlcXVpcmVkIGZvciBzb21lIHJpc2sgY2hlY2tzXG4gICAqL1xuICBjb3VudHJ5X2NvZGU6IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSBwaG9uZSBudW1iZXJcbiAgICovXG4gIG51bWJlcjogc3RyaW5nO1xufVxuXG4vKipcbiAqIEBuYW1lIENoZWNrb3V0XG4gKiBAZGVzY3JpcHRpb25cbiAqIENoZWNrb3V0LmNvbSBjb3Jkb3ZhIHBsdWdpblxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBDaGVja291dCB9IGZyb20gJ0Bhd2Vzb21lLWNvcmRvdmEtcGx1Z2lucy9jaGVja291dC9uZ3gnO1xuICpcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGNoZWNrb3V0OiBDaGVja291dCkgeyB9XG4gKlxuICogLi4uXG4gKlxuICpcbiAqIHRoaXMuY2hlY2tvdXQuaW5pdFNhbmRib3hDbGllbnQoXCJwa190ZXN0XzdkMzk1ODcxLTBkNjYtNGI2Mi04NWI2LTg0MjRkZjc4YjEyNVwiKVxuICogICAgIC50aGVuKCgpID0+IHRoaXMubGFiZWwgPSBcIkNLTyBpbml0IGNvbXBsZXRlZFwiKVxuICogICAgIC5jYXRjaChlcnIgPT4gdGhpcy5sYWJlbCA9IGVycilcbiAqXG4gKiAuLi5cbiAqXG4gKiBsZXQgdG9rZW5SZXF1ZXN0OiBDa29DYXJkVG9rZW5SZXF1ZXN0ID0ge1xuICogICAgIG51bWJlcjogXCI0NTQzNDc0MDAyMjQ5OTk2XCIsXG4gKiAgICAgY3Z2OiBcIjAxMFwiLFxuICogICAgIGV4cGlyeV9tb250aDogXCIwOFwiLFxuICogICAgIGV4cGlyeV95ZWFyOiBcIjIwMjVcIixcbiAqICAgICBiaWxsaW5nX2FkZHJlc3M6IHtcbiAqICAgICAgIGNvdW50cnk6IFwiRlJcIlxuICogICAgIH1cbiAqICAgfVxuICpcbiAqXG4gKiAgIHRoaXMuY2tvLmdlbmVyYXRlVG9rZW4odG9rZW5SZXF1ZXN0KVxuICogICAudGhlbih0b2tlblJlc3BvbnNlID0+IHRoaXMubGFiZWwgPSBcIlRva2VuOiBcIiArIHRva2VuUmVzcG9uc2UudG9rZW4pXG4gKiAgIC5jYXRjaChlcnIgPT4gdGhpcy5sYWJlbCA9IGVycilcbiAqIGBgYFxuICovXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ0NoZWNrb3V0JyxcbiAgcGx1Z2luOiAnQGNoZWNrb3V0LmNvbS9jb3Jkb3ZhLXBsdWdpbi1jaGVja291dCcsXG4gIHBsdWdpblJlZjogJ2NvcmRvdmEucGx1Z2lucy5DaGVja291dCcsXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vY2hlY2tvdXQvZnJhbWVzLWNvcmRvdmEnLFxuICBpbnN0YWxsOiAnJyxcbiAgaW5zdGFsbFZhcmlhYmxlczogW10sXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddLFxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBDaGVja291dCBleHRlbmRzIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luIHtcbiAgLyoqXG4gICAqIEluaXRpYWxpemUgRnJhbWVzIHBsdWdpbiBpbiBTYW5kYm94IG1vZGVcbiAgICpcbiAgICogQHBhcmFtIHB1YmxpY0tleSB7c3RyaW5nfSBNZXJjaGFudCdzIHNhbmRib3ggcHVibGljIGtleVxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gRnJhbWVzIGluaXRpYXRpb24gaXMgY29tcGxldGVkXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGluaXRTYW5kYm94Q2xpZW50KHB1YmxpY0tleTogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZSBGcmFtZXMgcGx1Z2luIGluIExpdmUgbW9kZVxuICAgKlxuICAgKiBAcGFyYW0gcHVibGljS2V5IHtzdHJpbmd9IE1lcmNoYW50J3MgbGl2ZSBwdWJsaWMga2V5XG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiBGcmFtZXMgaW5pdGlhdGlvbiBpcyBjb21wbGV0ZWRcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgaW5pdExpdmVDbGllbnQocHVibGljS2V5OiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBFeGNoYW5nZSBjYXJkIGRldGFpbHMgZm9yIGEgcmVmZXJlbmNlIHRva2VuIHRoYXQgY2FuIGJlIHVzZWQgbGF0ZXIgdG8gcmVxdWVzdCBhIGNhcmQgcGF5bWVudCBmcm9tIHlvdXIgYmFja2VuZC4gVG9rZW5zIGFyZSBzaW5nbGUgdXNlIGFuZCBleHBpcmUgYWZ0ZXIgMTUgbWludXRlcy5cbiAgICpcbiAgICogQHBhcmFtIGNrb0NhcmRUb2tlblJlcXVlc3Qge0Nrb0NhcmRUb2tlblJlcXVlc3R9IENhcmQgdG9rZW5pemF0aW9uIHJlcXVlc3Qgb2JqZWN0XG4gICAqIEByZXR1cm5zIHtQcm9taXNlPENrb0NhcmRUb2tlblJlc3BvbnNlPn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIFRva2VuIHJlc3BvbnNlIG9iamVjdFxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBnZW5lcmF0ZVRva2VuKGNrb0NhcmRUb2tlblJlcXVlc3Q6IENrb0NhcmRUb2tlblJlcXVlc3QpOiBQcm9taXNlPENrb0NhcmRUb2tlblJlc3BvbnNlPiB7XG4gICAgcmV0dXJuO1xuICB9XG59XG4iXX0=