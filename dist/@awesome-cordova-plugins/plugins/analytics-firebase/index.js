var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova, cordovaPropertyGet, cordovaPropertySet } from '@awesome-cordova-plugins/core';
var AnalyticsFirebaseOriginal = /** @class */ (function (_super) {
    __extends(AnalyticsFirebaseOriginal, _super);
    function AnalyticsFirebaseOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AnalyticsFirebaseOriginal.prototype.logEvent = function (eventName, eventParams) { return cordova(this, "logEvent", {}, arguments); };
    AnalyticsFirebaseOriginal.prototype.resetAnalyticsData = function () { return cordova(this, "resetAnalyticsData", {}, arguments); };
    AnalyticsFirebaseOriginal.prototype.setAnalyticsCollectionEnabled = function (enabled) { return cordova(this, "setAnalyticsCollectionEnabled", {}, arguments); };
    AnalyticsFirebaseOriginal.prototype.setCurrentScreen = function (screenName) { return cordova(this, "setCurrentScreen", {}, arguments); };
    AnalyticsFirebaseOriginal.prototype.setMinimumSessionDuration = function (milliseconds) { return cordova(this, "setMinimumSessionDuration", {}, arguments); };
    AnalyticsFirebaseOriginal.prototype.setSessionTimeoutDuration = function (milliseconds) { return cordova(this, "setSessionTimeoutDuration", {}, arguments); };
    AnalyticsFirebaseOriginal.prototype.setUserId = function (userId) { return cordova(this, "setUserId", {}, arguments); };
    AnalyticsFirebaseOriginal.prototype.setUserProperty = function (userPropertyName, userPropertyValue) { return cordova(this, "setUserProperty", {}, arguments); };
    Object.defineProperty(AnalyticsFirebaseOriginal.prototype, "DEFAULT_EVENTS", {
        get: function () { return cordovaPropertyGet(this, "DEFAULT_EVENTS"); },
        set: function (value) { cordovaPropertySet(this, "DEFAULT_EVENTS", value); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AnalyticsFirebaseOriginal.prototype, "DEFAULT_PARAMS", {
        get: function () { return cordovaPropertyGet(this, "DEFAULT_PARAMS"); },
        set: function (value) { cordovaPropertySet(this, "DEFAULT_PARAMS", value); },
        enumerable: false,
        configurable: true
    });
    AnalyticsFirebaseOriginal.pluginName = "AnalyticsFirebase";
    AnalyticsFirebaseOriginal.plugin = "cordova-plugin-analytics";
    AnalyticsFirebaseOriginal.pluginRef = "analytics";
    AnalyticsFirebaseOriginal.repo = "https://github.com/appfeel/analytics-google";
    AnalyticsFirebaseOriginal.platforms = ["Android", "iOS"];
    return AnalyticsFirebaseOriginal;
}(AwesomeCordovaNativePlugin));
var AnalyticsFirebase = new AnalyticsFirebaseOriginal();
export { AnalyticsFirebase };
//# sourceMappingURL=data:application/json;base64,