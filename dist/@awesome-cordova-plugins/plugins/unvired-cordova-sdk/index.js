var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import { Observable } from 'rxjs';
/**
 * Outbox Lock Result States
 */
export var OutboxLockStatus;
(function (OutboxLockStatus) {
    OutboxLockStatus[OutboxLockStatus["LockApplied"] = 0] = "LockApplied";
    OutboxLockStatus[OutboxLockStatus["DataBeingSent"] = 1] = "DataBeingSent";
    OutboxLockStatus[OutboxLockStatus["DataNotInQueue"] = 2] = "DataNotInQueue";
})(OutboxLockStatus || (OutboxLockStatus = {}));
/**
 * Log levels supported in the sdk.
 */
export var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["important"] = 7] = "important";
    LogLevel[LogLevel["error"] = 8] = "error";
    LogLevel[LogLevel["debug"] = 9] = "debug";
})(LogLevel || (LogLevel = {}));
/**
 * AuthenticateAndActivateResultType Some Documentation
 */
export var AuthenticateAndActivateResultType;
(function (AuthenticateAndActivateResultType) {
    /**
     * This value indicates that UMP was able to validate users credentials & activation of the user is complete.
     * In mobile apps, this also means database is created & apps can proceed with their custom logic.
     */
    AuthenticateAndActivateResultType[AuthenticateAndActivateResultType["auth_activation_success"] = 2] = "auth_activation_success";
    /**
     * This value indicates that UMP was unable to validate users credentials.
     */
    AuthenticateAndActivateResultType[AuthenticateAndActivateResultType["auth_activation_error"] = 3] = "auth_activation_error";
})(AuthenticateAndActivateResultType || (AuthenticateAndActivateResultType = {}));
export var AuthenticateLocalResultType;
(function (AuthenticateLocalResultType) {
    /**
     * This value indicates that UnviredCordovaSDKOriginal was able to validate users credentials and apps can proceed with their custom logic.
     */
    AuthenticateLocalResultType[AuthenticateLocalResultType["login_success"] = 4] = "login_success";
    /**
     * This value indicates that UnviredCordovaSDKOriginal was unable to validate users credentials. You can retrieve the error information from AuthenticateLocalResult.
     */
    AuthenticateLocalResultType[AuthenticateLocalResultType["login_error"] = 5] = "login_error";
})(AuthenticateLocalResultType || (AuthenticateLocalResultType = {}));
export var LoginListenerType;
(function (LoginListenerType) {
    /**
     * This value indicates that there is no user account exists and user needs to authenticate & activate. Call authenticateAndActivate() api to activate the user.
     */
    LoginListenerType[LoginListenerType["auth_activation_required"] = 0] = "auth_activation_required";
    /**
     * Applicable for mobile.
     * This value indicates user needs to login before using the app. This depends on the setting LOCAL_PASSWORD which is set in UMP Admin Cockpit.
     * If LOCAL_PASSWORD is set to true, this type is set everytime user opens the app.
     */
    LoginListenerType[LoginListenerType["app_requires_login"] = 1] = "app_requires_login";
    /**
     * This value indicates app can proceed with its custom logic.
     */
    LoginListenerType[LoginListenerType["login_success"] = 4] = "login_success";
    /**
     * If there are multiple accounts active & no account is specified in the login(), then this value is returned indicating that a current account needs to be specified for the login().
     */
    LoginListenerType[LoginListenerType["app_requires_current_account"] = 6] = "app_requires_current_account";
    /**
     * This value indicates app can proceed with demo mode.
     */
    LoginListenerType[LoginListenerType["login_demo"] = 7] = "login_demo";
})(LoginListenerType || (LoginListenerType = {}));
export var LoginType;
(function (LoginType) {
    /**
     * This value represents authentication using Unvired ID.
     * Example:
     * ```
     * loginParameters.username = 'USER_NAME'
     * loginParameters.password = 'password'
     * loginParameters.company = 'unvired'
     * loginParameters.loginType = LoginType.unvired
     * ```
     */
    LoginType["unvired"] = "UNVIRED_ID";
    /**
     * This value represents authentication using Active Directory Service (ADS).
     * Example:
     * ```
     * loginParameters.username = 'USER_NAME'
     * loginParameters.password = 'password'
     * loginParameters.company = 'unvired'
     * loginParameters.domain = 'ADS_DOMAIN'
     * loginParameters.loginType = LoginType.ads
     * ```
     */
    LoginType["ads"] = "ADS";
    /**
     * This value represents authentication using SAP ID.
     * Example:
     * ```
     * loginParameters.username = 'USER_NAME'
     * loginParameters.password = 'password'
     * loginParameters.company = 'unvired'
     * loginParameters.port = 'SAP_PORT_NAME'
     * loginParameters.domain = 'SAP_DOMAIN'
     * loginParameters.loginType = LoginType.sap
     * ```
     */
    LoginType["sap"] = "SAP";
    /**
     * EMAIL
     * Set the type to email to login based on email id.
     */
    LoginType["email"] = "EMAIL";
    /**
     * SAML 2.0 Login Type
     */
    LoginType["saml2"] = "SAML2";
    /**
     * TODO:
     */
    LoginType["custom"] = "CUSTOM";
})(LoginType || (LoginType = {}));
export var ResultType;
(function (ResultType) {
    /**
     * This value indicates a succesful operation.
     */
    ResultType[ResultType["success"] = 0] = "success";
    /**
     * This value indicates an error.
     */
    ResultType[ResultType["error"] = 1] = "error";
})(ResultType || (ResultType = {}));
export var RequestType;
(function (RequestType) {
    /**
     * Set this type if the data exchange with UMP is 1:1. The header datastructure needs to be sent which also should be present in database prior to the call.
     * You can use UnviredCordovaSDK's db methods to insert data into database.
     */
    RequestType["RQST"] = "RQST";
    /**
     * Set this type if the data exchange with UMP is 1:N pr 0:N. Sending a datastructure is optional and is dependent on the Process Agent function.
     * If the Process Agent function is marked with metadata delete flag, then server data replaces the data in database.
     * If the Process Agent function is NOT marked with metadata delete flag, then this request type behaves the same as QUERY
     */
    RequestType["PULL"] = "PULL";
    /**
     * This request type is for those message which are initiated by the server. You typically do not set this request type in sync.. methods.
     */
    RequestType["PUSH"] = "PUSH";
    /**
     * Set this type if the data exchange with UMP is 1:N pr 0:N. Sending a datastructure is optional and is dependent on the Process Agent function.
     * Unlike PULL, this request type updates the data in database without deleting existing entries.
     */
    RequestType["QUERY"] = "QUERY";
    /**
     * Set this type if the data exchange with UMP is 1:0. This handles the case where no server response is expected.
     */
    RequestType["REQ"] = "REQ";
})(RequestType || (RequestType = {}));
export var NotificationListenerType;
(function (NotificationListenerType) {
    /**
     * Notify successful asynchronous send of data to the server. This type indicates that data has moved from outbox to sent items.
     */
    NotificationListenerType[NotificationListenerType["dataSend"] = 0] = "dataSend";
    /**
     * Notify data changes for each BusinessEntity when received data from server. This type indicates when data is removed from sent items table.
     */
    NotificationListenerType[NotificationListenerType["dataChanged"] = 1] = "dataChanged";
    /**
     * Notify data receive completion on receiving of all BusinessEntities from server. Data would get processed after this step.
     */
    NotificationListenerType[NotificationListenerType["dataReceived"] = 2] = "dataReceived";
    /**
     * Notify application data reset.
     */
    NotificationListenerType[NotificationListenerType["appReset"] = 3] = "appReset";
    /**
     * Notify application with error message and attchment item on attachment download success
     */
    NotificationListenerType[NotificationListenerType["attachmentDownloadSuccess"] = 4] = "attachmentDownloadSuccess";
    /**
     * Notify application with error message and attchment item on attachment download error
     */
    NotificationListenerType[NotificationListenerType["attachmentDownloadError"] = 5] = "attachmentDownloadError";
    /**
     * Notify application when incoming data handling finished
     */
    NotificationListenerType[NotificationListenerType["incomingDataProcessingFinished"] = 6] = "incomingDataProcessingFinished";
    /**
     * Notify application when incoming data handling finished
     */
    NotificationListenerType[NotificationListenerType["attachmentDownloadWaiting"] = 7] = "attachmentDownloadWaiting";
    /**
     * Notify application with any InfoMessages
     */
    NotificationListenerType[NotificationListenerType["infoMessage"] = 8] = "infoMessage";
    /**
     * Notify application with Server errors
     */
    NotificationListenerType[NotificationListenerType["serverError"] = 9] = "serverError";
    /**
     * Notify attachment downloads completed
     */
    NotificationListenerType[NotificationListenerType["attachmentDownloadCompleted"] = 10] = "attachmentDownloadCompleted";
    /**
     * Notify when the sent item count changes.
     */
    NotificationListenerType[NotificationListenerType["SentItemChanged"] = 11] = "SentItemChanged";
    /**
     * Notify that the JWT token is received
     */
    NotificationListenerType[NotificationListenerType["JWTTokenReceived"] = 12] = "JWTTokenReceived";
})(NotificationListenerType || (NotificationListenerType = {}));
export var AttachmentItemStatus;
(function (AttachmentItemStatus) {
    AttachmentItemStatus[AttachmentItemStatus["DEFAULT"] = 0] = "DEFAULT";
    AttachmentItemStatus[AttachmentItemStatus["QUEUED_FOR_DOWNLOAD"] = 1] = "QUEUED_FOR_DOWNLOAD";
    AttachmentItemStatus[AttachmentItemStatus["DOWNLOADED"] = 2] = "DOWNLOADED";
    AttachmentItemStatus[AttachmentItemStatus["ERROR_IN_DOWNLOAD"] = 3] = "ERROR_IN_DOWNLOAD";
    AttachmentItemStatus[AttachmentItemStatus["SAVED_FOR_UPLOAD"] = 4] = "SAVED_FOR_UPLOAD";
    AttachmentItemStatus[AttachmentItemStatus["UPLOADED"] = 5] = "UPLOADED";
    AttachmentItemStatus[AttachmentItemStatus["ERROR_IN_UPLOAD"] = 6] = "ERROR_IN_UPLOAD";
    AttachmentItemStatus[AttachmentItemStatus["MARKED_FOR_DELETE"] = 7] = "MARKED_FOR_DELETE";
    AttachmentItemStatus[AttachmentItemStatus["EXTERNAL"] = 8] = "EXTERNAL";
})(AttachmentItemStatus || (AttachmentItemStatus = {}));
var Settings = /** @class */ (function () {
    function Settings() {
    }
    return Settings;
}());
export { Settings };
var UnviredResult = /** @class */ (function () {
    function UnviredResult() {
    }
    return UnviredResult;
}());
export { UnviredResult };
var OutboxLockResult = /** @class */ (function (_super) {
    __extends(OutboxLockResult, _super);
    function OutboxLockResult() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return OutboxLockResult;
}(UnviredResult));
export { OutboxLockResult };
var LogResult = /** @class */ (function (_super) {
    __extends(LogResult, _super);
    function LogResult() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return LogResult;
}(UnviredResult));
export { LogResult };
var LogDataResult = /** @class */ (function (_super) {
    __extends(LogDataResult, _super);
    function LogDataResult() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return LogDataResult;
}(UnviredResult));
export { LogDataResult };
var NotifResult = /** @class */ (function (_super) {
    __extends(NotifResult, _super);
    function NotifResult() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return NotifResult;
}(UnviredResult));
export { NotifResult };
var SettingsResult = /** @class */ (function (_super) {
    __extends(SettingsResult, _super);
    function SettingsResult() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return SettingsResult;
}(UnviredResult));
export { SettingsResult };
var SyncResult = /** @class */ (function (_super) {
    __extends(SyncResult, _super);
    function SyncResult() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return SyncResult;
}(UnviredResult));
export { SyncResult };
var DbResult = /** @class */ (function (_super) {
    __extends(DbResult, _super);
    function DbResult() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return DbResult;
}(UnviredResult));
export { DbResult };
var LoginParameters = /** @class */ (function () {
    function LoginParameters() {
    }
    return LoginParameters;
}());
export { LoginParameters };
var LoginResult = /** @class */ (function (_super) {
    __extends(LoginResult, _super);
    function LoginResult() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return LoginResult;
}(UnviredResult));
export { LoginResult };
var AuthenticateActivateResult = /** @class */ (function (_super) {
    __extends(AuthenticateActivateResult, _super);
    function AuthenticateActivateResult() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return AuthenticateActivateResult;
}(UnviredResult));
export { AuthenticateActivateResult };
var AuthenticateLocalResult = /** @class */ (function (_super) {
    __extends(AuthenticateLocalResult, _super);
    function AuthenticateLocalResult() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return AuthenticateLocalResult;
}(UnviredResult));
export { AuthenticateLocalResult };
var UnviredCredential = /** @class */ (function () {
    function UnviredCredential() {
    }
    return UnviredCredential;
}());
export { UnviredCredential };
var UnviredCordovaSDKOriginal = /** @class */ (function (_super) {
    __extends(UnviredCordovaSDKOriginal, _super);
    function UnviredCordovaSDKOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UnviredCordovaSDKOriginal.prototype.logDebug = function (sourceClass, method, message) { return cordova(this, "logDebug", {}, arguments); };
    UnviredCordovaSDKOriginal.prototype.logError = function (sourceClass, method, message) { return cordova(this, "logError", {}, arguments); };
    UnviredCordovaSDKOriginal.prototype.logInfo = function (sourceClass, method, message) { return cordova(this, "logInfo", {}, arguments); };
    UnviredCordovaSDKOriginal.prototype.logRead = function () { return cordova(this, "logRead", {}, arguments); };
    UnviredCordovaSDKOriginal.prototype.logDelete = function () { return cordova(this, "logDelete", {}, arguments); };
    UnviredCordovaSDKOriginal.prototype.sendLogToServer = function () { return cordova(this, "sendLogToServer", {}, arguments); };
    UnviredCordovaSDKOriginal.prototype.sendLogViaEmail = function () { return cordova(this, "sendLogViaEmail", {}, arguments); };
    UnviredCordovaSDKOriginal.prototype.getLogLevel = function () { return cordova(this, "getLogLevel", {}, arguments); };
    UnviredCordovaSDKOriginal.prototype.getLogFilePath = function () { return cordova(this, "getLogFilePath", {}, arguments); };
    UnviredCordovaSDKOriginal.prototype.setLogLevel = function (logLevel) { return cordova(this, "setLogLevel", {}, arguments); };
    UnviredCordovaSDKOriginal.prototype.login = function (loginParameters) { return cordova(this, "login", {}, arguments); };
    UnviredCordovaSDKOriginal.prototype.loginWithDemoData = function (loginParameters) { return cordova(this, "loginWithDemoData", {}, arguments); };
    UnviredCordovaSDKOriginal.prototype.logout = function () { return cordova(this, "logout", {}, arguments); };
    UnviredCordovaSDKOriginal.prototype.authenticateAndActivate = function (loginParameters) { return cordova(this, "authenticateAndActivate", {}, arguments); };
    UnviredCordovaSDKOriginal.prototype.authenticateLocal = function (loginParameters) { return cordova(this, "authenticateLocal", {}, arguments); };
    UnviredCordovaSDKOriginal.prototype.getAllAccounts = function () { return cordova(this, "getAllAccounts", {}, arguments); };
    UnviredCordovaSDKOriginal.prototype.switchAccount = function (account) { return cordova(this, "switchAccount", {}, arguments); };
    UnviredCordovaSDKOriginal.prototype.deleteAccount = function (account) { return cordova(this, "deleteAccount", {}, arguments); };
    UnviredCordovaSDKOriginal.prototype.getInfoMessages = function (headerName, lid) { return cordova(this, "getInfoMessages", {}, arguments); };
    UnviredCordovaSDKOriginal.prototype.showSettings = function () { return cordova(this, "showSettings", {}, arguments); };
    UnviredCordovaSDKOriginal.prototype.userSettings = function () { return cordova(this, "userSettings", {}, arguments); };
    UnviredCordovaSDKOriginal.prototype.updateSystemCredentials = function (credentials) { return cordova(this, "updateSystemCredentials", {}, arguments); };
    UnviredCordovaSDKOriginal.prototype.getSystemCredentials = function () { return cordova(this, "getSystemCredentials", {}, arguments); };
    UnviredCordovaSDKOriginal.prototype.getVersionNumbers = function () { return cordova(this, "getVersionNumbers", {}, arguments); };
    UnviredCordovaSDKOriginal.prototype.clearData = function () { return cordova(this, "clearData", {}, arguments); };
    UnviredCordovaSDKOriginal.prototype.hasInternet = function () { return cordova(this, "hasInternet", {}, arguments); };
    UnviredCordovaSDKOriginal.prototype.guid = function () { return cordova(this, "guid", { "sync": true }, arguments); };
    UnviredCordovaSDKOriginal.prototype.pullDb = function () { return cordova(this, "pullDb", {}, arguments); };
    UnviredCordovaSDKOriginal.prototype.pushDb = function () { return cordova(this, "pushDb", {}, arguments); };
    UnviredCordovaSDKOriginal.prototype.dbSelect = function (tableName, whereClause) { return cordova(this, "dbSelect", {}, arguments); };
    UnviredCordovaSDKOriginal.prototype.dbInsert = function (tableName, structureObject, isHeader) { return cordova(this, "dbInsert", {}, arguments); };
    UnviredCordovaSDKOriginal.prototype.dbInsertOrUpdate = function (tableName, structureObject, isHeader) { return cordova(this, "dbInsertOrUpdate", {}, arguments); };
    UnviredCordovaSDKOriginal.prototype.dbDelete = function (tableName, whereClause) { return cordova(this, "dbDelete", {}, arguments); };
    UnviredCordovaSDKOriginal.prototype.dbUpdate = function (tableName, updatedObject, whereClause) { return cordova(this, "dbUpdate", {}, arguments); };
    UnviredCordovaSDKOriginal.prototype.dbExecuteStatement = function (query) { return cordova(this, "dbExecuteStatement", {}, arguments); };
    UnviredCordovaSDKOriginal.prototype.dbCreateSavePoint = function (savePoint) { return cordova(this, "dbCreateSavePoint", {}, arguments); };
    UnviredCordovaSDKOriginal.prototype.dbReleaseSavePoint = function (savePoint) { return cordova(this, "dbReleaseSavePoint", {}, arguments); };
    UnviredCordovaSDKOriginal.prototype.dbRollbackToSavePoint = function (savePoint) { return cordova(this, "dbRollbackToSavePoint", {}, arguments); };
    UnviredCordovaSDKOriginal.prototype.dbBeginTransaction = function () { return cordova(this, "dbBeginTransaction", {}, arguments); };
    UnviredCordovaSDKOriginal.prototype.dbEndTransaction = function () { return cordova(this, "dbEndTransaction", {}, arguments); };
    UnviredCordovaSDKOriginal.prototype.dbSaveWebData = function () { return cordova(this, "dbSaveWebData", {}, arguments); };
    UnviredCordovaSDKOriginal.prototype.dbExportWebData = function () { return cordova(this, "dbExportWebData", {}, arguments); };
    UnviredCordovaSDKOriginal.prototype.launchFile = function (filePath) { return cordova(this, "launchFile", {}, arguments); };
    UnviredCordovaSDKOriginal.prototype.launchBase64 = function (base64string, fileName, extension) { return cordova(this, "launchBase64", {}, arguments); };
    UnviredCordovaSDKOriginal.prototype.unzip = function (srcPath, destPath) { return cordova(this, "unzip", {}, arguments); };
    UnviredCordovaSDKOriginal.prototype.getAttachmentFolderPath = function () { return cordova(this, "getAttachmentFolderPath", {}, arguments); };
    UnviredCordovaSDKOriginal.prototype.createAttachmentItem = function (tableName, structureObject) { return cordova(this, "createAttachmentItem", {}, arguments); };
    UnviredCordovaSDKOriginal.prototype.uploadAttachment = function (tableName, structureObject, isAsync) { return cordova(this, "uploadAttachment", {}, arguments); };
    UnviredCordovaSDKOriginal.prototype.downloadAttachment = function (tableName, structureObject) { return cordova(this, "downloadAttachment", {}, arguments); };
    UnviredCordovaSDKOriginal.prototype.syncForeground = function (reqype, header, customData, paFunction, autoSave) { return cordova(this, "syncForeground", {}, arguments); };
    UnviredCordovaSDKOriginal.prototype.syncBackground = function (reqype, header, customData, paFunction, beName, belid, bypassAttachment) { return cordova(this, "syncBackground", {}, arguments); };
    UnviredCordovaSDKOriginal.prototype.getSynchronizationState = function () { return cordova(this, "getSynchronizationState", { "observable": true }, arguments); };
    UnviredCordovaSDKOriginal.prototype.dbReload = function () { return cordova(this, "dbReload", {}, arguments); };
    UnviredCordovaSDKOriginal.prototype.generateUBJson = function (headerName, header, itemName, items) { return cordova(this, "generateUBJson", {}, arguments); };
    UnviredCordovaSDKOriginal.prototype.parseRawUBJson = function (json) { return cordova(this, "parseRawUBJson", {}, arguments); };
    UnviredCordovaSDKOriginal.prototype.dbGetCollection = function (tableName) { return cordova(this, "dbGetCollection", {}, arguments); };
    UnviredCordovaSDKOriginal.prototype.getMessages = function () { return cordova(this, "getMessages", {}, arguments); };
    UnviredCordovaSDKOriginal.prototype.registerNotifListener = function () { return cordova(this, "registerNotifListener", { "observable": true }, arguments); };
    UnviredCordovaSDKOriginal.prototype.isInOutBox = function (beLid) { return cordova(this, "isInOutBox", {}, arguments); };
    UnviredCordovaSDKOriginal.prototype.outBoxItemCount = function () { return cordova(this, "outBoxItemCount", {}, arguments); };
    UnviredCordovaSDKOriginal.prototype.isInSentItem = function (beLid) { return cordova(this, "isInSentItem", {}, arguments); };
    UnviredCordovaSDKOriginal.prototype.sentItemCount = function () { return cordova(this, "sentItemCount", {}, arguments); };
    UnviredCordovaSDKOriginal.prototype.inBoxItemCount = function () { return cordova(this, "inBoxItemCount", {}, arguments); };
    UnviredCordovaSDKOriginal.prototype.deleteOutBoxEntry = function (beLid) { return cordova(this, "deleteOutBoxEntry", {}, arguments); };
    UnviredCordovaSDKOriginal.prototype.resetApplicationSyncData = function () { return cordova(this, "resetApplicationSyncData", {}, arguments); };
    UnviredCordovaSDKOriginal.prototype.reCreateAppDB = function () { return cordova(this, "reCreateAppDB", {}, arguments); };
    UnviredCordovaSDKOriginal.prototype.startInboxHandler = function () { return cordova(this, "startInboxHandler", {}, arguments); };
    UnviredCordovaSDKOriginal.prototype.startDataSender = function () { return cordova(this, "startDataSender", {}, arguments); };
    UnviredCordovaSDKOriginal.prototype.platform = function () { return cordova(this, "platform", {}, arguments); };
    UnviredCordovaSDKOriginal.prototype.testPushNotification = function () { return cordova(this, "testPushNotification", {}, arguments); };
    UnviredCordovaSDKOriginal.prototype.lockDataSender = function (beLid) { return cordova(this, "lockDataSender", {}, arguments); };
    UnviredCordovaSDKOriginal.prototype.unlockDataSender = function () { return cordova(this, "unlockDataSender", {}, arguments); };
    UnviredCordovaSDKOriginal.prototype.removeOutObjectBasedOnLid = function (lid) { return cordova(this, "removeOutObjectBasedOnLid", {}, arguments); };
    UnviredCordovaSDKOriginal.prototype.startDiscoveryService = function () { return cordova(this, "startDiscoveryService", {}, arguments); };
    UnviredCordovaSDKOriginal.prototype.setClientCredentials = function (credentials) { return cordova(this, "setClientCredentials", {}, arguments); };
    UnviredCordovaSDKOriginal.prototype.isClientCredentialsSet = function () { return cordova(this, "isClientCredentialsSet", {}, arguments); };
    UnviredCordovaSDKOriginal.prototype.encrypt = function (stringToBeEncrypted) { return cordova(this, "encrypt", {}, arguments); };
    UnviredCordovaSDKOriginal.prototype.decrypt = function (stringToBeDecrypted) { return cordova(this, "decrypt", {}, arguments); };
    UnviredCordovaSDKOriginal.prototype.registerForPushNotification = function () { return cordova(this, "registerForPushNotification", {}, arguments); };
    UnviredCordovaSDKOriginal.pluginName = "UnviredCordovaSDK";
    UnviredCordovaSDKOriginal.plugin = "cordova-plugin-unvired-sdk";
    UnviredCordovaSDKOriginal.pluginRef = "ump";
    UnviredCordovaSDKOriginal.repo = "https://github.com/unvired/cordova-plugin-unvired-sdk/";
    UnviredCordovaSDKOriginal.install = "ionic cordova plugin add @awesome-cordova-plugins/unvired-cordova-sdk";
    UnviredCordovaSDKOriginal.installVariables = [];
    UnviredCordovaSDKOriginal.platforms = ["iOS", "Android", "Windows", "Browser"];
    return UnviredCordovaSDKOriginal;
}(AwesomeCordovaNativePlugin));
var UnviredCordovaSDK = new UnviredCordovaSDKOriginal();
export { UnviredCordovaSDK };
//# sourceMappingURL=data:application/json;base64,