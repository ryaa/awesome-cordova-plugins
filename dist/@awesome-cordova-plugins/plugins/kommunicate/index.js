var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var KommunicateOriginal = /** @class */ (function (_super) {
    __extends(KommunicateOriginal, _super);
    function KommunicateOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    KommunicateOriginal.prototype.login = function (kmUser) { return cordova(this, "login", {}, arguments); };
    KommunicateOriginal.prototype.registerPushNotification = function () { return cordova(this, "registerPushNotification", {}, arguments); };
    KommunicateOriginal.prototype.isLoggedIn = function () { return cordova(this, "isLoggedIn", {}, arguments); };
    KommunicateOriginal.prototype.updatePushNotificationToken = function (token) { return cordova(this, "updatePushNotificationToken", {}, arguments); };
    KommunicateOriginal.prototype.launchConversation = function () { return cordova(this, "launchConversation", {}, arguments); };
    KommunicateOriginal.prototype.launchParticularConversation = function (conversationObject) { return cordova(this, "launchParticularConversation", {}, arguments); };
    KommunicateOriginal.prototype.startNewConversation = function (conversationParams) { return cordova(this, "startNewConversation", {}, arguments); };
    KommunicateOriginal.prototype.processPushNotification = function (data) { return cordova(this, "processPushNotification", { "sync": true }, arguments); };
    KommunicateOriginal.prototype.logout = function () { return cordova(this, "logout", {}, arguments); };
    KommunicateOriginal.prototype.startSingleChat = function (data) { return cordova(this, "startSingleChat", {}, arguments); };
    KommunicateOriginal.prototype.conversationBuilder = function (converationObject) { return cordova(this, "conversationBuilder", {}, arguments); };
    KommunicateOriginal.pluginName = "Kommunicate";
    KommunicateOriginal.plugin = "kommunicate-cordova-plugin";
    KommunicateOriginal.pluginRef = "kommunicate";
    KommunicateOriginal.repo = "https://github.com/Kommunicate-io/Kommunicate-Cordova-Ionic-PhoneGap-Chat-Plugin";
    KommunicateOriginal.platforms = ["Android", "Browser", "iOS"];
    return KommunicateOriginal;
}(AwesomeCordovaNativePlugin));
var Kommunicate = new KommunicateOriginal();
export { Kommunicate };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMva29tbXVuaWNhdGUvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUNBLE9BQU8sdUNBQStDLE1BQU0sK0JBQStCLENBQUM7O0lBNEMzRCwrQkFBMEI7Ozs7SUFrQnpELDJCQUFLLGFBQUMsTUFBVztJQVVqQiw4Q0FBd0I7SUFVeEIsZ0NBQVU7SUFXVixpREFBMkIsYUFBQyxLQUFhO0lBVXpDLHdDQUFrQjtJQWdCbEIsa0RBQTRCLGFBQUMsa0JBQXVCO0lBYXBELDBDQUFvQixhQUFDLGtCQUF1QjtJQVc1Qyw2Q0FBdUIsYUFBQyxJQUFTO0lBVWpDLDRCQUFNO0lBWU4scUNBQWUsYUFBQyxJQUFTO0lBa0J6Qix5Q0FBbUIsYUFBQyxpQkFBc0I7Ozs7OztzQkF4TDVDO0VBNkNpQywwQkFBMEI7U0FBOUMsV0FBVyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFBsdWdpbiwgQ29yZG92YSwgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4gfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5cbi8qKlxuICogQG5hbWUgS29tbXVuaWNhdGVcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIHBsdWdpbiBmb3IgdGhlIEtvbW11bmljYXRlIFNESy5cbiAqIFdpdGggdGhlIGhlbHAgb2YgdGhpcyBwbHVnaW4sIHlvdSBjYW4gZWFzaWx5IGFkZCBodW1hbiArIGJvdCBjaGF0IHN1cHBvcnQgZnVuY3Rpb25hbGl0eSB0byB5b3UgYXBwLlxuICogUmVmZXIgdG86IFRPRE86IGluc2VydCBzaXRlIGxpbmtcbiAqIEZvciBkb2N1bWVudGF0aW9uOiBUT0RPOiBpbnNlcnQgbGlua1xuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBLb21tdW5pY2F0ZSB9IGZyb20gJ0Bhd2Vzb21lLWNvcmRvdmEtcGx1Z2lucy9Lb21tdW5pY2F0ZSc7XG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSBrb21tdW5pY2F0ZTogS29tbXVuaWNhdGUpIHsgfVxuICogLy9hbHNvIGFkZCBbLi4uLCBLb21tdW5pY2F0ZSwgLi4uIF0gaW5zaWRlIHRoZSBwcm92aWRlcnMgYXJyYXksIGlmIHJlcXVpcmVkXG4gKlxuICogdmFyIGttVXNlciA9IHtcbiAqICAgIHVzZXJJZCA6ICdyYW5kb21zdHJpbmcnLFxuICogICAgYXV0aGVudGljYXRpb25UeXBlSWQgOiAxXG4gKiB9O1xuICpcbiAqIHRoaXMua29tbXVuaWNhdGUubG9naW4oa21Vc2VyKVxuICogICAudGhlbigocmVzOiBhbnkpID0+IGNvbnNvbGUubG9nKFwiU3VjZXNzZnVsbHkgbG9nZ2VkIGluLlwiICsgcmVzKSlcbiAqICAgLmNhdGNoKChlcnJvcjogYW55KSA9PiBjb25zb2xlLmVycm9yKFwiRXJyb3IgbG9nZ2luZyBpbi5cIiArIGVycm9yKSk7XG4gKlxuICogdmFyIGNvbnZlcnNhdGlvbk9iamVjdCA9IHtcbiAqICAgIGlzVW5pcXVlIDogZmFsc2VcbiAqIH07XG4gKlxuICogdGhpcy5rb21tdW5pY2F0ZS5jb252ZXJzYXRpb25CdWlsZGVyKGNvbnZlcmF0aW9uT2JqZWN0KVxuICogICAudGhlbigoY2xpZW50Q2hhbm5lbEtleTogYW55KSA9PiBjb25zb2xlLmxvZyhcIktvbW11bmljYXRlIGNyZWF0ZSBjb252ZXJzYXRpb24gc3VjY2Vzc2Z1bCB0aGUgY2xpZW50Q2hhbm5lbEtleSBpcyA6IFwiICsgY2xpZW50Q2hhbm5lbEtleSkpXG4gKiAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5lcnJvcihcIkVycm9yIGNyZWF0aW5nIGNvbnZlcnNhdGlvbi5cIiArIGVycm9yKSk7XG4gKlxuICogYGBgXG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnS29tbXVuaWNhdGUnLFxuICBwbHVnaW46ICdrb21tdW5pY2F0ZS1jb3Jkb3ZhLXBsdWdpbicsXG4gIHBsdWdpblJlZjogJ2tvbW11bmljYXRlJyxcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9Lb21tdW5pY2F0ZS1pby9Lb21tdW5pY2F0ZS1Db3Jkb3ZhLUlvbmljLVBob25lR2FwLUNoYXQtUGx1Z2luJyxcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnQnJvd3NlcicsICdpT1MnXSxcbn0pXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgS29tbXVuaWNhdGUgZXh0ZW5kcyBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiB7XG4gIC8qKlxuICAgKiBMb2dpbiB0aGUgdXNlciB3aXRoIHRoZSBkZXRhaWxzIHBhc3NlZCBpblxuICAgKiBDcmVhdGVzIGEgbmV3IHVzZXIgd2l0aCB0aGUgZGV0YWlscyBwcm92aWRlZCB0aGVyZSBpcyBubyBleGlzdGluZyB1c2VyXG4gICAqXG4gICAqIHZhciBrbVVzZXIgPSB7XG4gICAqICAgICd1c2VySWQnIDogJ3VzZXJJZCcsICAgLy9SZXBsYWNlIGl0IHdpdGggdGhlIHVzZXJJZCBvZiB0aGUgbG9nZ2VkIGluIHVzZXJcbiAgICogICAgJ3Bhc3N3b3JkJyA6ICdwYXNzd29yZCcsICAvL3JlcGxhY2Ugd2l0aCBwYXNzd29yZFxuICAgKiAgICAnYXV0aGVudGljYXRpb25UeXBlSWQnIDogMSxcbiAgICogICAgJ2ltYWdlTGluaycgOiA8aW1hZ2UtbGluay1mb3ItdXNlcj5cbiAgICogICAgJ2FwcGxpY2F0aW9uSWQnIDogJzxBUFBfSUQ+JywgIC8vcmVwbGFjZSB0aGlzIHdpdGggeW91ciBBUFBfSUQgZnJvbSBBcHBsb3ppYyBEYXNoYm9hcmRcbiAgICogICAgJ2RldmljZUFwbnNUeXBlJyA6IDAgICAgLy9TZXQgMCBmb3IgRGV2ZWxvcG1lbnQgYW5kIDEgZm9yIERpc3RyaWJ1dGlvbiAoUmVsZWFzZSlcbiAgICogfTtcbiAgICpcbiAgICogQHBhcmFtIGttVXNlciB7YW55fSB0aGUgdXNlciBkZXRhaWxzXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGxvZ2luKGttVXNlcjogYW55KTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogUmVnaXN0ZXIgZm9yIHB1c2ggbm90aWZpY2F0aW9uXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHJlZ2lzdGVyUHVzaE5vdGlmaWNhdGlvbigpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhbnkgdXNlciBpcyBsb2dnZWQgaW4gb3Igbm90XG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGlzTG9nZ2VkSW4oKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIHRoZSB0b2tlbiBmb3IgcHVzaCBub3RpZmljYXRpb25zXG4gICAqXG4gICAqIEBwYXJhbSB0b2tlbiB7c3RyaW5nfSB0aGUgdXNlciBkZXRhaWxzXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHVwZGF0ZVB1c2hOb3RpZmljYXRpb25Ub2tlbih0b2tlbjogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogTGF1bmNoIHRoZSBjb252ZXJzYXRpb24gc2NyZWVuIChpdCBjb250YWlucyBhbGwgdGhlIGV4aXN0aW5nIGNvbnZlcnNhdGlvbnMpXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGxhdW5jaENvbnZlcnNhdGlvbigpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBMYXVuY2ggdGhlIGNvbnZlcnNhdGlvbiBpZGVudGlmaWVkIGJ5IHRoZSBnaXZlbiBjaGFubmVsKGNvbnZlcnNhdGlvbikga2V5XG4gICAqXG4gICAqIGxldCBjb252T2JqID0ge1xuICAgKiAgICdjbGllbnRDaGFubmVsS2V5JyA6IGNsaWVudENoYW5uZWxLZXksIC8vcGFzcyB0aGUgY2xpZW50Q2hhbm5lbEtleSBoZXJlXG4gICAqICAgJ3Rha2VPcmRlcicgOiB0cnVlIC8vc2tpcCBjaGF0IGxpc3Qgb24gYmFjayBwcmVzcywgcGFzcyBmYWxzZSBpZiB5b3Ugd2FudCB0byBzaG93IGNoYXQgbGlzdCBvbiBiYWNrIHByZXNzXG4gICAqIH07XG4gICAqXG4gICAqIEBwYXJhbSBjb252ZXJzYXRpb25PYmplY3Qge2FueX0gdGhlIGNoYW5uZWwga2V5IGFuZCBvdGhlciBpbmZvcm1hdGlvblxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBsYXVuY2hQYXJ0aWN1bGFyQ29udmVyc2F0aW9uKGNvbnZlcnNhdGlvbk9iamVjdDogYW55KTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogU3RhcnQgYSBuZXcgY29udmVyc2F0aW9uLCBkZXRhaWxzIGFib3V0IHRoZSBjb252ZXJzYXRpb24gdG8gYmUgcGFzc2VkIGFzIHBhcmFtZXRlcnNcbiAgICpcbiAgICogQGRlcHJlY2F0ZWRcbiAgICogQHBhcmFtIGNvbnZlcnNhdGlvblBhcmFtc1xuICAgKiBAcGFyYW0gY29udmVyYXRpb25QYXJhbXMge2FueX0gdGhlIHVzZXIgZGV0YWlsc1xuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBzdGFydE5ld0NvbnZlcnNhdGlvbihjb252ZXJzYXRpb25QYXJhbXM6IGFueSk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFByb2Nlc3MgcHVzaCBub3RpZmljYXRpb25zXG4gICAqXG4gICAqIEBwYXJhbSBkYXRhIHthbnl9IHRoZSB1c2VyIGRldGFpbHNcbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgdHJ1ZS9mYWxzZVxuICAgKi9cbiAgQENvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXG4gIHByb2Nlc3NQdXNoTm90aWZpY2F0aW9uKGRhdGE6IGFueSk6IGJvb2xlYW4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBMb2dvdXQgdGhlIGN1cnJlbnQgdXNlclxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBsb2dvdXQoKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogU3RhcnQgYSBzaW5nbGUgY2hhdCAoY29udmVyc2F0aW9uKVxuICAgKlxuICAgKiBAZGVwcmVjYXRlZFxuICAgKiBAcGFyYW0gZGF0YSB7YW55fSB0aGUgdXNlciBkZXRhaWxzXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHN0YXJ0U2luZ2xlQ2hhdChkYXRhOiBhbnkpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBMYXVuY2hlcyBhIGNvbnZlcnNhdGlvbiB3aXRoIHRoZSBwcm9wZXJ0aWVzIHBhc3NlZCBpbiB0aGUgY29udmVyc2F0aW9uIHBhcmFtXG4gICAqXG4gICAqIHZhciBjb252ZXJzYXRpb25PYmplY3QgPSB7XG4gICAqICAgJ2lzVW5pcXVlJyA6IGZhbHNlLFxuICAgKiAgICdhZ2VudElkcyc6Wyc8QUdFTlRfSUQ+J10sICAvL0xpc3Qgb2YgYWdlbnRJZHMuIEFHRU5UX0lEIGlzIHRoZSBlbWFpbElEIHVzZWQgdG8gc2lnbnVwIG9uIEtvbW11bmljYXRlXG4gICAqICAgJ2JvdElkcyc6IFsnPEJPVF9JRD4nXSAgLy9MaXN0IG9mIGJvdElkcy4gR28gdG8gTWFuYWdlIEJvdHMoaHR0cHM6Ly9kYXNoYm9hcmQua29tbXVuaWNhdGUuaW8vYm90cy9tYW5hZ2UtYm90cykgLT4gQ29weSBib3RJRFxuICAgKiB9O1xuICAgKlxuICAgKiBAcGFyYW0gY29udmVyc2F0aW9uT2JqZWN0IHthbnl9IHRoZSB1c2VyIGRldGFpbHNcbiAgICogQHBhcmFtIGNvbnZlcmF0aW9uT2JqZWN0XG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGNvbnZlcnNhdGlvbkJ1aWxkZXIoY29udmVyYXRpb25PYmplY3Q6IGFueSk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG59XG4iXX0=