var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import { Observable } from 'rxjs';
/**
 * ANDROID** - Privacy setting for how the notification should be shown on the lockscreen of Android 5+ devices.
 */
export var OSLockScreenVisibility;
(function (OSLockScreenVisibility) {
    /**
     * Fully visible (default)
     */
    OSLockScreenVisibility[OSLockScreenVisibility["Public"] = 1] = "Public";
    /**
     * Contents are hidden
     */
    OSLockScreenVisibility[OSLockScreenVisibility["Private"] = 0] = "Private";
    /**
     * Not shown
     */
    OSLockScreenVisibility[OSLockScreenVisibility["Secret"] = -1] = "Secret";
})(OSLockScreenVisibility || (OSLockScreenVisibility = {}));
/**
 * How the notification was displayed to the user. Part of OSNotification. See inFocusDisplaying for more information on how this is used.
 */
export var OSDisplayType;
(function (OSDisplayType) {
    /**
     * notification is silent, or inFocusDisplaying is disabled.
     */
    OSDisplayType[OSDisplayType["None"] = 0] = "None";
    /**
     * (**DEFAULT**) - native alert dialog display.
     */
    OSDisplayType[OSDisplayType["InAppAlert"] = 1] = "InAppAlert";
    /**
     * native notification display.
     */
    OSDisplayType[OSDisplayType["Notification"] = 2] = "Notification";
})(OSDisplayType || (OSDisplayType = {}));
export var OSActionType;
(function (OSActionType) {
    OSActionType[OSActionType["Opened"] = 0] = "Opened";
    OSActionType[OSActionType["ActionTake"] = 1] = "ActionTake";
})(OSActionType || (OSActionType = {}));
var OneSignalOriginal = /** @class */ (function (_super) {
    __extends(OneSignalOriginal, _super);
    function OneSignalOriginal() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * constants to use in inFocusDisplaying()
         *
         * @hidden
         */
        _this.OSInFocusDisplayOption = {
            None: 0,
            InAppAlert: 1,
            Notification: 2,
        };
        return _this;
    }
    OneSignalOriginal.prototype.startInit = function (appId, googleProjectNumber) { return cordova(this, "startInit", { "sync": true }, arguments); };
    OneSignalOriginal.prototype.handleNotificationReceived = function () { return cordova(this, "handleNotificationReceived", { "observable": true }, arguments); };
    OneSignalOriginal.prototype.handleNotificationOpened = function () { return cordova(this, "handleNotificationOpened", { "observable": true }, arguments); };
    OneSignalOriginal.prototype.handleInAppMessageClicked = function () { return cordova(this, "handleInAppMessageClicked", { "observable": true }, arguments); };
    OneSignalOriginal.prototype.iOSSettings = function (settings) { return cordova(this, "iOSSettings", { "sync": true, "platforms": ["iOS"] }, arguments); };
    OneSignalOriginal.prototype.endInit = function () { return cordova(this, "endInit", { "sync": true }, arguments); };
    OneSignalOriginal.prototype.promptForPushNotificationsWithUserResponse = function () { return cordova(this, "promptForPushNotificationsWithUserResponse", { "platforms": ["iOS"] }, arguments); };
    OneSignalOriginal.prototype.getTags = function () { return cordova(this, "getTags", {}, arguments); };
    OneSignalOriginal.prototype.getIds = function () { return cordova(this, "getIds", {}, arguments); };
    OneSignalOriginal.prototype.sendTag = function (key, value) { return cordova(this, "sendTag", { "sync": true }, arguments); };
    OneSignalOriginal.prototype.sendTags = function (json) { return cordova(this, "sendTags", { "sync": true }, arguments); };
    OneSignalOriginal.prototype.deleteTag = function (key) { return cordova(this, "deleteTag", { "sync": true }, arguments); };
    OneSignalOriginal.prototype.deleteTags = function (keys) { return cordova(this, "deleteTags", { "sync": true }, arguments); };
    OneSignalOriginal.prototype.registerForPushNotifications = function () { return cordova(this, "registerForPushNotifications", { "sync": true }, arguments); };
    OneSignalOriginal.prototype.enableVibrate = function (enable) { return cordova(this, "enableVibrate", { "sync": true }, arguments); };
    OneSignalOriginal.prototype.enableSound = function (enable) { return cordova(this, "enableSound", { "sync": true }, arguments); };
    OneSignalOriginal.prototype.inFocusDisplaying = function (displayOption) { return cordova(this, "inFocusDisplaying", { "sync": true }, arguments); };
    OneSignalOriginal.prototype.setSubscription = function (enable) { return cordova(this, "setSubscription", { "sync": true }, arguments); };
    OneSignalOriginal.prototype.getPermissionSubscriptionState = function () { return cordova(this, "getPermissionSubscriptionState", {}, arguments); };
    OneSignalOriginal.prototype.postNotification = function (notificationObj) { return cordova(this, "postNotification", {}, arguments); };
    OneSignalOriginal.prototype.cancelNotification = function (notificationId) { return cordova(this, "cancelNotification", { "sync": true }, arguments); };
    OneSignalOriginal.prototype.promptLocation = function () { return cordova(this, "promptLocation", { "sync": true }, arguments); };
    OneSignalOriginal.prototype.syncHashedEmail = function (email) { return cordova(this, "syncHashedEmail", { "sync": true }, arguments); };
    OneSignalOriginal.prototype.setLogLevel = function (logLevel) { return cordova(this, "setLogLevel", { "sync": true }, arguments); };
    OneSignalOriginal.prototype.setLocationShared = function (shared) { return cordova(this, "setLocationShared", { "sync": true }, arguments); };
    OneSignalOriginal.prototype.addPermissionObserver = function () { return cordova(this, "addPermissionObserver", { "observable": true }, arguments); };
    OneSignalOriginal.prototype.addSubscriptionObserver = function () { return cordova(this, "addSubscriptionObserver", { "observable": true }, arguments); };
    OneSignalOriginal.prototype.setEmail = function (email, emailAuthToken) { return cordova(this, "setEmail", {}, arguments); };
    OneSignalOriginal.prototype.logoutEmail = function () { return cordova(this, "logoutEmail", {}, arguments); };
    OneSignalOriginal.prototype.addEmailSubscriptionObserver = function () { return cordova(this, "addEmailSubscriptionObserver", { "observable": true }, arguments); };
    OneSignalOriginal.prototype.clearOneSignalNotifications = function () { return cordova(this, "clearOneSignalNotifications", { "sync": true }, arguments); };
    OneSignalOriginal.prototype.setRequiresUserPrivacyConsent = function (required) { return cordova(this, "setRequiresUserPrivacyConsent", {}, arguments); };
    OneSignalOriginal.prototype.provideUserConsent = function (granted) { return cordova(this, "provideUserConsent", {}, arguments); };
    OneSignalOriginal.prototype.userProvidedPrivacyConsent = function (callback) { return cordova(this, "userProvidedPrivacyConsent", {}, arguments); };
    OneSignalOriginal.prototype.setExternalUserId = function (externalId) { return cordova(this, "setExternalUserId", {}, arguments); };
    OneSignalOriginal.prototype.removeExternalUserId = function () { return cordova(this, "removeExternalUserId", {}, arguments); };
    OneSignalOriginal.prototype.addTrigger = function (key, value) { return cordova(this, "addTrigger", { "sync": true }, arguments); };
    OneSignalOriginal.prototype.addTriggers = function (triggers) { return cordova(this, "addTriggers", { "sync": true }, arguments); };
    OneSignalOriginal.prototype.removeTriggerForKey = function (key) { return cordova(this, "removeTriggerForKey", { "sync": true }, arguments); };
    OneSignalOriginal.prototype.removeTriggersForKeys = function (keys) { return cordova(this, "removeTriggersForKeys", { "sync": true }, arguments); };
    OneSignalOriginal.prototype.getTriggerValueForKey = function (key) { return cordova(this, "getTriggerValueForKey", {}, arguments); };
    OneSignalOriginal.prototype.pauseInAppMessages = function (pause) { return cordova(this, "pauseInAppMessages", { "sync": true }, arguments); };
    OneSignalOriginal.pluginName = "OneSignal";
    OneSignalOriginal.plugin = "onesignal-cordova-plugin";
    OneSignalOriginal.pluginRef = "plugins.OneSignal";
    OneSignalOriginal.repo = "https://github.com/OneSignal/OneSignal-Cordova-SDK";
    OneSignalOriginal.platforms = ["Amazon Fire OS", "Android", "iOS", "Windows"];
    return OneSignalOriginal;
}(AwesomeCordovaNativePlugin));
var OneSignal = new OneSignalOriginal();
export { OneSignal };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvb25lc2lnbmFsL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFDQSxPQUFPLHVDQUErQyxNQUFNLCtCQUErQixDQUFDO0FBQzVGLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7QUEwRmxDOztHQUVHO0FBQ0gsTUFBTSxDQUFOLElBQVksc0JBYVg7QUFiRCxXQUFZLHNCQUFzQjtJQUNoQzs7T0FFRztJQUNILHVFQUFVLENBQUE7SUFDVjs7T0FFRztJQUNILHlFQUFXLENBQUE7SUFDWDs7T0FFRztJQUNILHdFQUFXLENBQUE7QUFDYixDQUFDLEVBYlcsc0JBQXNCLEtBQXRCLHNCQUFzQixRQWFqQztBQUVEOztHQUVHO0FBQ0gsTUFBTSxDQUFOLElBQVksYUFhWDtBQWJELFdBQVksYUFBYTtJQUN2Qjs7T0FFRztJQUNILGlEQUFRLENBQUE7SUFDUjs7T0FFRztJQUNILDZEQUFjLENBQUE7SUFDZDs7T0FFRztJQUNILGlFQUFnQixDQUFBO0FBQ2xCLENBQUMsRUFiVyxhQUFhLEtBQWIsYUFBYSxRQWF4QjtBQThLRCxNQUFNLENBQU4sSUFBWSxZQUdYO0FBSEQsV0FBWSxZQUFZO0lBQ3RCLG1EQUFVLENBQUE7SUFDViwyREFBYyxDQUFBO0FBQ2hCLENBQUMsRUFIVyxZQUFZLEtBQVosWUFBWSxRQUd2Qjs7SUF1SThCLDZCQUEwQjs7O1FBQ3ZEOzs7O1dBSUc7UUFDSCw0QkFBc0IsR0FBRztZQUN2QixJQUFJLEVBQUUsQ0FBQztZQUNQLFVBQVUsRUFBRSxDQUFDO1lBQ2IsWUFBWSxFQUFFLENBQUM7U0FDaEIsQ0FBQzs7O0lBVUYsNkJBQVMsYUFBQyxLQUFhLEVBQUUsbUJBQTRCO0lBWXJELDhDQUEwQjtJQWMxQiw0Q0FBd0I7SUFZeEIsNkNBQXlCO0lBcUJ6QiwrQkFBVyxhQUFDLFFBQXNGO0lBVWxHLDJCQUFPO0lBWVAsOERBQTBDO0lBWTFDLDJCQUFPO0lBZVAsMEJBQU07SUFjTiwyQkFBTyxhQUFDLEdBQVcsRUFBRSxLQUFhO0lBVWxDLDRCQUFRLGFBQUMsSUFBUztJQVNsQiw2QkFBUyxhQUFDLEdBQVc7SUFTckIsOEJBQVUsYUFBQyxJQUFjO0lBT3pCLGdEQUE0QjtJQWE1QixpQ0FBYSxhQUFDLE1BQWU7SUFhN0IsK0JBQVcsYUFBQyxNQUFlO0lBVTNCLHFDQUFpQixhQUFDLGFBQTRCO0lBVzlDLG1DQUFlLGFBQUMsTUFBZTtJQVEvQixrREFBOEI7SUFXOUIsb0NBQWdCLGFBQUMsZUFBK0I7SUFVaEQsc0NBQWtCLGFBQUMsY0FBc0I7SUFNekMsa0NBQWM7SUFPZCxtQ0FBZSxhQUFDLEtBQWE7SUFjN0IsK0JBQVcsYUFBQyxRQUFtRDtJQVEvRCxxQ0FBaUIsYUFBQyxNQUFlO0lBY2pDLHlDQUFxQjtJQWlCckIsMkNBQXVCO0lBV3ZCLDRCQUFRLGFBQUMsS0FBYSxFQUFFLGNBQXVCO0lBUS9DLCtCQUFXO0lBaUJYLGdEQUE0QjtJQVE1QiwrQ0FBMkI7SUFTM0IsaURBQTZCLGFBQUMsUUFBaUI7SUFTL0Msc0NBQWtCLGFBQUMsT0FBZ0I7SUFRbkMsOENBQTBCLGFBQUMsUUFBa0I7SUFTN0MscUNBQWlCLGFBQUMsVUFBa0I7SUFNcEMsd0NBQW9CO0lBV3BCLDhCQUFVLGFBQUMsR0FBVyxFQUFFLEtBQStCO0lBVXZELCtCQUFXLGFBQUMsUUFBZ0I7SUFVNUIsdUNBQW1CLGFBQUMsR0FBVztJQVUvQix5Q0FBcUIsYUFBQyxJQUFjO0lBU3BDLHlDQUFxQixhQUFDLEdBQVc7SUFhakMsc0NBQWtCLGFBQUMsS0FBYzs7Ozs7O29CQXo0Qm5DO0VBc2IrQiwwQkFBMEI7U0FBNUMsU0FBUyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvcmRvdmEsIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgT1NOb3RpZmljYXRpb24ge1xuICAvKipcbiAgICogV2FzIGFwcCBpbiBmb2N1cy5cbiAgICovXG4gIGlzQXBwSW5Gb2N1cz86IGJvb2xlYW47XG4gIC8qKlxuICAgKiBXYXMgbm90aWZpY2F0aW9uIHNob3duIHRvIHRoZSB1c2VyLiBXaWxsIGJlIGZhbHNlIGZvciBzaWxlbnQgbm90aWZpY2F0aW9ucy5cbiAgICovXG4gIHNob3duPzogYm9vbGVhbjtcbiAgLyoqXG4gICAqIEFORFJPSUQqKiAtIEFuZHJvaWQgTm90aWZpY2F0aW9uIGFzc2lnbmVkIHRvIHRoZSBub3RpZmljYXRpb24uIENhbiBiZSB1c2VkIHRvIGNhbmNlbCBvciByZXBsYWNlIHRoZSBub3RpZmljYXRpb24uXG4gICAqL1xuICBhbmRyb2lkTm90aWZpY2F0aW9uSWQ/OiBudW1iZXI7XG4gIC8qKlxuICAgKiBQYXlsb2FkIHJlY2VpdmVkIGZyb20gT25lU2lnbmFsLlxuICAgKi9cbiAgcGF5bG9hZD86IE9TTm90aWZpY2F0aW9uUGF5bG9hZDtcbiAgLyoqXG4gICAqIEhvdyB0aGUgbm90aWZpY2F0aW9uIHdhcyBkaXNwbGF5ZWQgdG8gdGhlIHVzZXIuIENhbiBiZSBzZXQgdG8gYE5vdGlmaWNhdGlvbmAsIGBJbkFwcEFsZXJ0YCwgb3IgYE5vbmVgIGlmIGl0IHdhcyBub3QgZGlzcGxheWVkLlxuICAgKi9cbiAgZGlzcGxheVR5cGU/OiBPU0Rpc3BsYXlUeXBlO1xuICAvKipcbiAgICogQU5EUk9JRCoqIC0gTm90aWZpY2F0aW9uIGlzIGEgc3VtbWFyeSBub3RpZmljYXRpb24gZm9yIGEgZ3JvdXAgdGhpcyB3aWxsIGNvbnRhaW4gYWxsIG5vdGlmaWNhdGlvbiBwYXlsb2FkcyBpdCB3YXMgY3JlYXRlZCBmcm9tLlxuICAgKi9cbiAgZ3JvdXBlZE5vdGlmaWNhdGlvbnM/OiBPU05vdGlmaWNhdGlvblBheWxvYWRbXTtcbiAgYXBwX2lkPzogc3RyaW5nO1xuICBjb250ZW50cz86IGFueTtcbiAgaGVhZGluZ3M/OiBhbnk7XG4gIGlzSW9zPzogYm9vbGVhbjtcbiAgaXNBbmRyb2lkPzogYm9vbGVhbjtcbiAgaXNXUD86IGJvb2xlYW47XG4gIGlzV1BfV05TPzogYm9vbGVhbjtcbiAgaXNBZG0/OiBib29sZWFuO1xuICBpc0Nocm9tZT86IGJvb2xlYW47XG4gIGlzQ2hyb21lV2ViPzogYm9vbGVhbjtcbiAgaXNTYWZhcmk/OiBib29sZWFuO1xuICBpc0FueVdlYj86IGJvb2xlYW47XG4gIGluY2x1ZGVkX3NlZ21lbnRzPzogc3RyaW5nW107XG4gIGV4Y2x1ZGVkX3NlZ21lbnRzPzogc3RyaW5nW107XG4gIGluY2x1ZGVfcGxheWVyX2lkcz86IHN0cmluZ1tdO1xuICBpbmNsdWRlX2lvc190b2tlbnM/OiBzdHJpbmdbXTtcbiAgaW5jbHVkZV9hbmRyb2lkX3JlZ19pZHM/OiBzdHJpbmdbXTtcbiAgaW5jbHVkZV93cF91cmlzPzogc3RyaW5nW107XG4gIGluY2x1ZGVfd3Bfd25zX3VyaXM/OiBzdHJpbmdbXTtcbiAgaW5jbHVkZV9hbWF6b25fcmVnX2lkcz86IHN0cmluZ1tdO1xuICBpbmNsdWRlX2Nocm9tZV9yZWdfaWRzPzogc3RyaW5nW107XG4gIGluY2x1ZGVfY2hyb21lX3dlYl9yZWdfaWRzPzogc3RyaW5nW107XG4gIGFwcF9pZHM/OiBzdHJpbmdbXTtcbiAgdGFncz86IGFueVtdO1xuICBpb3NfYmFkZ2VUeXBlPzogc3RyaW5nO1xuICBpb3NfYmFkZ2VDb3VudD86IG51bWJlcjtcbiAgaW9zX3NvdW5kPzogc3RyaW5nO1xuICBhbmRyb2lkX3NvdW5kPzogc3RyaW5nO1xuICBhZG1fc291bmQ/OiBzdHJpbmc7XG4gIHdwX3NvdW5kPzogc3RyaW5nO1xuICB3cF93bnNfc291bmQ/OiBzdHJpbmc7XG4gIGRhdGE/OiBhbnk7XG4gIGJ1dHRvbnM/OiBhbnk7XG4gIGNvbGxhcHNlX2lkPzogc3RyaW5nO1xuICBzbWFsbF9pY29uPzogc3RyaW5nO1xuICBsYXJnZV9pY29uPzogc3RyaW5nO1xuICBiaWdfcGljdHVyZT86IHN0cmluZztcbiAgYWRtX3NtYWxsX2ljb24/OiBzdHJpbmc7XG4gIGFkbV9sYXJnZV9pY29uPzogc3RyaW5nO1xuICBhZG1fYmlnX3BpY3R1cmU/OiBzdHJpbmc7XG4gIGNocm9tZV9pY29uPzogc3RyaW5nO1xuICBjaHJvbWVfYmlnX3BpY3R1cmU/OiBzdHJpbmc7XG4gIGNocm9tZV93ZWJfaWNvbj86IHN0cmluZztcbiAgZmlyZWZveF9pY29uPzogc3RyaW5nO1xuICB1cmw/OiBzdHJpbmc7XG4gIHNlbmRfYWZ0ZXI/OiBzdHJpbmc7XG4gIGRlbGF5ZWRfb3B0aW9uPzogc3RyaW5nO1xuICBkZWxpdmVyeV90aW1lX29mX2RheT86IHN0cmluZztcbiAgYW5kcm9pZF9sZWRfY29sb3I/OiBzdHJpbmc7XG4gIGFuZHJvaWRfYWNjZW50X2NvbG9yPzogc3RyaW5nO1xuICBhbmRyb2lkX3Zpc2liaWxpdHk/OiBudW1iZXI7XG4gIGNvbnRlbnRfYXZhaWxhYmxlPzogYm9vbGVhbjtcbiAgYW1hem9uX2JhY2tncm91bmRfZGF0YT86IGJvb2xlYW47XG4gIHRlbXBsYXRlX2lkPzogc3RyaW5nO1xuICBhbmRyb2lkX2dyb3VwPzogc3RyaW5nO1xuICBhbmRyb2lkX2dyb3VwX21lc3NhZ2U/OiBhbnk7XG4gIGFkbV9ncm91cD86IHN0cmluZztcbiAgYWRtX2dyb3VwX21lc3NhZ2U/OiBhbnk7XG4gIHR0bD86IG51bWJlcjtcbiAgcHJpb3JpdHk/OiBudW1iZXI7XG4gIGlvc19jYXRlZ29yeT86IHN0cmluZztcbn1cblxuLyoqXG4gKiBBTkRST0lEKiogLSBQcml2YWN5IHNldHRpbmcgZm9yIGhvdyB0aGUgbm90aWZpY2F0aW9uIHNob3VsZCBiZSBzaG93biBvbiB0aGUgbG9ja3NjcmVlbiBvZiBBbmRyb2lkIDUrIGRldmljZXMuXG4gKi9cbmV4cG9ydCBlbnVtIE9TTG9ja1NjcmVlblZpc2liaWxpdHkge1xuICAvKipcbiAgICogRnVsbHkgdmlzaWJsZSAoZGVmYXVsdClcbiAgICovXG4gIFB1YmxpYyA9IDEsXG4gIC8qKlxuICAgKiBDb250ZW50cyBhcmUgaGlkZGVuXG4gICAqL1xuICBQcml2YXRlID0gMCxcbiAgLyoqXG4gICAqIE5vdCBzaG93blxuICAgKi9cbiAgU2VjcmV0ID0gLTEsXG59XG5cbi8qKlxuICogSG93IHRoZSBub3RpZmljYXRpb24gd2FzIGRpc3BsYXllZCB0byB0aGUgdXNlci4gUGFydCBvZiBPU05vdGlmaWNhdGlvbi4gU2VlIGluRm9jdXNEaXNwbGF5aW5nIGZvciBtb3JlIGluZm9ybWF0aW9uIG9uIGhvdyB0aGlzIGlzIHVzZWQuXG4gKi9cbmV4cG9ydCBlbnVtIE9TRGlzcGxheVR5cGUge1xuICAvKipcbiAgICogbm90aWZpY2F0aW9uIGlzIHNpbGVudCwgb3IgaW5Gb2N1c0Rpc3BsYXlpbmcgaXMgZGlzYWJsZWQuXG4gICAqL1xuICBOb25lID0gMCxcbiAgLyoqXG4gICAqICgqKkRFRkFVTFQqKikgLSBuYXRpdmUgYWxlcnQgZGlhbG9nIGRpc3BsYXkuXG4gICAqL1xuICBJbkFwcEFsZXJ0ID0gMSxcbiAgLyoqXG4gICAqIG5hdGl2ZSBub3RpZmljYXRpb24gZGlzcGxheS5cbiAgICovXG4gIE5vdGlmaWNhdGlvbiA9IDIsXG59XG5cbi8qKlxuICogQ29udGVudHMgYW5kIHNldHRpbmdzIG9mIHRoZSBub3RpZmljYXRpb24gdGhlIHVzZXIgcmVjZWl2ZWQuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgT1NOb3RpZmljYXRpb25QYXlsb2FkIHtcbiAgLyoqXG4gICAqIE9uZVNpZ25hbCBub3RpZmljYXRpb24gVVVJRC5cbiAgICovXG4gIG5vdGlmaWNhdGlvbklEOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaXRsZSBvZiB0aGUgbm90aWZpY2F0aW9uLlxuICAgKi9cbiAgdGl0bGU6IHN0cmluZztcbiAgLyoqXG4gICAqIEJvZHkgb2YgdGhlIG5vdGlmaWNhdGlvbi5cbiAgICovXG4gIGJvZHk6IHN0cmluZztcbiAgLyoqXG4gICAqIEN1c3RvbSBhZGRpdGlvbmFsIGRhdGEgdGhhdCB3YXMgc2VudCB3aXRoIHRoZSBub3RpZmljYXRpb24uIFNldCBvbiB0aGUgZGFzaGJvYXJkIHVuZGVyIE9wdGlvbnMgPiBBZGRpdGlvbmFsIERhdGFcbiAgICogb3Igd2l0aCB0aGUgJ2RhdGEnIGZpZWxkIG9uIHRoZSBSRVNUIEFQSS5cbiAgICovXG4gIGFkZGl0aW9uYWxEYXRhPzogYW55O1xuICAvKipcbiAgICogQU5EUk9JRCoqIC0gU21hbGwgaWNvbiByZXNvdXJjZSBuYW1lIHNldCBvbiB0aGUgbm90aWZpY2F0aW9uLlxuICAgKi9cbiAgc21hbGxJY29uPzogc3RyaW5nO1xuICAvKipcbiAgICogQU5EUk9JRCoqIC0gTGFyZ2UgaWNvbiBzZXQgb24gdGhlIG5vdGlmaWNhdGlvbi5cbiAgICovXG4gIGxhcmdlSWNvbj86IHN0cmluZztcbiAgLyoqXG4gICAqIEFORFJPSUQqKiAtIEJpZyBwaWN0dXJlIGltYWdlIHNldCBvbiB0aGUgbm90aWZpY2F0aW9uLlxuICAgKi9cbiAgYmlnUGljdHVyZT86IHN0cmluZztcbiAgLyoqXG4gICAqIEFORFJPSUQqKiAtIEFjY2VudCBjb2xvciBzaG93biBhcm91bmQgc21hbGwgbm90aWZpY2F0aW9uIGljb24gb24gQW5kcm9pZCA1KyBkZXZpY2VzLiBBUkdCIGZvcm1hdC5cbiAgICovXG4gIHNtYWxsSWNvbkFjY2VudENvbG9yPzogc3RyaW5nO1xuICAvKipcbiAgICogVVJMIHRvIG9wZW4gd2hlbiBvcGVuaW5nIHRoZSBub3RpZmljYXRpb24uXG4gICAqL1xuICBsYXVuY2hVUkw/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBTb3VuZCByZXNvdXJjZSB0byBwbGF5IHdoZW4gdGhlIG5vdGlmaWNhdGlvbiBpcyBzaG93bi5cbiAgICovXG4gIHNvdW5kOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBBTkRST0lEKiogLSBEZXZpY2VzIHRoYXQgaGF2ZSBhIG5vdGlmaWNhdGlvbiBMRUQgd2lsbCBibGluayBpbiB0aGlzIGNvbG9yLiBBUkdCIGZvcm1hdC5cbiAgICovXG4gIGxlZENvbG9yPzogc3RyaW5nO1xuICBsb2NrU2NyZWVuVmlzaWJpbGl0eT86IE9TTG9ja1NjcmVlblZpc2liaWxpdHk7XG4gIC8qKlxuICAgKiBBTkRST0lEKiogLSBOb3RpZmljYXRpb25zIHdpdGggdGhpcyBzYW1lIGtleSB3aWxsIGJlIGdyb3VwZWQgdG9nZXRoZXIgYXMgYSBzaW5nbGUgc3VtbWFyeSBub3RpZmljYXRpb24uXG4gICAqL1xuICBncm91cEtleT86IHN0cmluZztcbiAgLyoqXG4gICAqIEFORFJPSUQqKiAtIFN1bW1hcnkgdGV4dCBkaXNwbGF5ZWQgaW4gdGhlIHN1bW1hcnkgbm90aWZpY2F0aW9uLlxuICAgKi9cbiAgZ3JvdXBNZXNzYWdlPzogc3RyaW5nO1xuICAvKipcbiAgICogTGlzdCBvZiBhY3Rpb24gYnV0dG9ucyBvbiB0aGUgbm90aWZpY2F0aW9uLlxuICAgKi9cbiAgYWN0aW9uQnV0dG9uczogT1NBY3Rpb25CdXR0b25bXTtcbiAgLyoqXG4gICAqIEFORFJPSUQqKiAtIFRoZSBHb29nbGUgcHJvamVjdCBudW1iZXIgdGhlIG5vdGlmaWNhdGlvbiB3YXMgc2VudCB1bmRlci5cbiAgICovXG4gIGZyb21Qcm9qZWN0TnVtYmVyPzogc3RyaW5nO1xuICAvKipcbiAgICogQU5EUk9JRCoqIC0gSWYgYSBiYWNrZ3JvdW5kIGltYWdlIHdhcyBzZXQgdGhpcyBvYmplY3Qgd2lsbCBiZSBhdmFpbGFibGUuXG4gICAqL1xuICBiYWNrZ3JvdW5kSW1hZ2VMYXlvdXQ/OiBPU0JhY2tncm91bmRJbWFnZUxheW91dDtcbiAgcHJpb3JpdHk/OiBudW1iZXI7XG4gIC8qKlxuICAgKiBMaXN0IG9mIGFjdGlvbiBidXR0b25zIG9uIHRoZSBub3RpZmljYXRpb24uXG4gICAqL1xuICByYXdQYXlsb2FkOiBzdHJpbmc7XG59XG5cbi8qKlxuICogTGlzdCBvZiBhY3Rpb24gYnV0dG9ucyBvbiB0aGUgbm90aWZpY2F0aW9uLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIE9TQWN0aW9uQnV0dG9uIHtcbiAgLyoqXG4gICAqIElkIGFzc2lnbmVkIHRvIHRoZSBidXR0b24uXG4gICAqL1xuICBpZDogc3RyaW5nO1xuICAvKipcbiAgICogVGV4dCBzaG93IG9uIHRoZSBidXR0b24gdG8gdGhlIHVzZXIuXG4gICAqL1xuICB0ZXh0OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBBTkRST0lEKiogLSBJY29uIHNob3duIG9uIHRoZSBidXR0b24uXG4gICAqL1xuICBpY29uOiBzdHJpbmc7XG59XG5cbi8qKlxuICogT1NQZXJtaXNzaW9uU3RhdGVcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBPU1Blcm1pc3Npb25TdGF0ZSB7XG4gIC8qKlxuICAgKiBVc2VyIHdhcyBwcm9tcHRlZC5cbiAgICovXG4gIGhhc1Byb21wdGVkOiBib29sZWFuO1xuICAvKipcbiAgICogUGVybWlzc2lvbnMgU3RhdHVzIChpT1MgT25seSlcbiAgICovXG4gIHN0YXR1czogYW55O1xuICAvKipcbiAgICogUGVybWlzc2lvbnMgU3RhdGUgKEFuZHJvaWQgT25seSlcbiAgICovXG4gIHN0YXRlOiBhbnk7XG59XG5cbi8qKlxuICogT1NTdWJzY3JpcHRpb25TdGF0ZVxuICovXG5leHBvcnQgaW50ZXJmYWNlIE9TU3Vic2NyaXB0aW9uU3RhdGUge1xuICBzdWJzY3JpYmVkOiBib29sZWFuO1xuICB1c2VyU3Vic2NyaXB0aW9uU2V0dGluZzogYW55O1xuICB1c2VySWQ6IGFueTtcbiAgcHVzaFRva2VuOiBhbnk7XG59XG5cbi8qKlxuICogU3Vic2NyaXB0aW9uIGFuZCBwZXJtaXNzaW9ucyBzdGF0dXNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBPU1Blcm1pc3Npb25TdWJzY3JpcHRpb25TdGF0ZSB7XG4gIC8qKlxuICAgKiBJZCBhc3NpZ25lZCB0byB0aGUgYnV0dG9uLlxuICAgKi9cbiAgcGVybWlzc2lvblN0YXR1czogT1NQZXJtaXNzaW9uU3RhdGU7XG4gIC8qKlxuICAgKiBUZXh0IHNob3cgb24gdGhlIGJ1dHRvbiB0byB0aGUgdXNlci5cbiAgICovXG4gIHN1YnNjcmlwdGlvblN0YXR1czogT1NTdWJzY3JpcHRpb25TdGF0ZTtcbn1cblxuLyoqXG4gKiBBTkRST0lEKiogLSBJZiBhIGJhY2tncm91bmQgaW1hZ2Ugd2FzIHNldCwgdGhpcyBvYmplY3Qgd2lsbCBiZSBhdmFpbGFibGUuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgT1NCYWNrZ3JvdW5kSW1hZ2VMYXlvdXQge1xuICAvKipcbiAgICogSW1hZ2UgVVJMIG9yIG5hbWUgdXNlZCBhcyB0aGUgYmFja2dyb3VuZCBpbWFnZS5cbiAgICovXG4gIGltYWdlOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUZXh0IGNvbG9yIG9mIHRoZSB0aXRsZSBvbiB0aGUgbm90aWZpY2F0aW9uLiBBUkdCIEZvcm1hdC5cbiAgICovXG4gIHRpdGxlVGV4dENvbG9yOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUZXh0IGNvbG9yIG9mIHRoZSBib2R5IG9uIHRoZSBub3RpZmljYXRpb24uIEFSR0IgRm9ybWF0LlxuICAgKi9cbiAgYm9keVRleHRDb2xvcjogc3RyaW5nO1xufVxuXG4vKipcbiAqIFRoZSBpbmZvcm1hdGlvbiByZXR1cm5lZCBmcm9tIGEgbm90aWZpY2F0aW9uIHRoZSB1c2VyIHJlY2VpdmVkLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIE9TTm90aWZpY2F0aW9uT3BlbmVkUmVzdWx0IHtcbiAgYWN0aW9uOiB7XG4gICAgLyoqXG4gICAgICogV2FzIHRoZSBub3RpZmljYXRpb24gb3BlbmVkIG5vcm1hbGx5IChgT3BlbmVkYCkgb3Igd2FzIGEgYnV0dG9uIHByZXNzZWQgb24gdGhlIG5vdGlmaWNhdGlvbiAoYEFjdGlvblRha2VuYCkuXG4gICAgICovXG4gICAgdHlwZTogT1NBY3Rpb25UeXBlO1xuICAgIC8qKlxuICAgICAqIElmIGB0eXBlYCA9PSBgQWN0aW9uVGFrZW5gIHRoZW4gdGhpcyB3aWxsIGNvbnRhaW4gdGhlIGlkIG9mIHRoZSBidXR0b24gcHJlc3NlZC5cbiAgICAgKi9cbiAgICBhY3Rpb25JRD86IHN0cmluZztcbiAgfTtcbiAgbm90aWZpY2F0aW9uOiBPU05vdGlmaWNhdGlvbjtcbn1cblxuZXhwb3J0IGVudW0gT1NBY3Rpb25UeXBlIHtcbiAgT3BlbmVkID0gMCxcbiAgQWN0aW9uVGFrZSA9IDEsXG59XG5cbi8qKlxuICogRGV0YWlscyBhYm91dCB0aGUgSW4tQXBwIE1lc3NhZ2UgYWN0aW9uIGVsZW1lbnQgKGJ1dHRvbiBvciBpbWFnZSkgdGhhdCB3YXMgdGFwcGVkIG9uLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIE9TSW5BcHBNZXNzYWdlQWN0aW9uIHtcbiAgLyoqXG4gICAqIEFuIG9wdGlvbmFsIGNsaWNrIG5hbWUgZGVmaW5lZCBmb3IgdGhlIGFjdGlvbiBlbGVtZW50LiBudWxsIG9yIG5pbCAoaU9TKSBpZiBub3Qgc2V0LlxuICAgKi9cbiAgY2xpY2tfbmFtZTogc3RyaW5nO1xuICAvKipcbiAgICogQW4gb3B0aW9uYWwgVVJMIHRoYXQgb3BlbnMgd2hlbiB0aGUgYWN0aW9uIHRha2VzIHBsYWNlLiBudWxsIG9yIG5pbCAoaU9TKSBpZiBub3Qgc2V0LlxuICAgKi9cbiAgY2xpY2tfdXJsOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBgdHJ1ZWAgaWYgdGhpcyBpcyB0aGUgZmlyc3QgdGltZSB0aGUgdXNlciBoYXMgcHJlc3NlZCBhbnkgYWN0aW9uIG9uIHRoZSBJbi1BcHAgTWVzc2FnZS5cbiAgICovXG4gIGZpcnN0X2NsaWNrOiBib29sZWFuO1xuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgSW4tQXBwIE1lc3NhZ2Ugd2lsbCBhbmltYXRlIG9mZiB0aGUgc2NyZWVuLiBJZiBgZmFsc2VgLCB0aGUgSW4tQXBwIE1lc3NhZ2Ugd2lsbCBzdGF5IG9uIHNjcmVlbiB1bnRpbCB0aGUgdXNlciBkaXNtaXNzZXMgaXQuXG4gICAqL1xuICBjbG9zZXNfbWVzc2FnZTogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBAbmFtZSBPbmVTaWduYWxcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIE9uZVNpZ25hbCBwbHVnaW4gaXMgYW4gY2xpZW50IGltcGxlbWVudGF0aW9uIGZvciB1c2luZyB0aGUgW09uZVNpZ25hbF0oaHR0cHM6Ly9vbmVzaWduYWwuY29tLykgU2VydmljZS5cbiAqIE9uZVNpZ25hbCBpcyBhIHNpbXBsZSBpbXBsZW1lbnRhdGlvbiBmb3IgZGVsaXZlcmluZyBwdXNoIG5vdGlmaWNhdGlvbnMuXG4gKlxuICogUGxlYXNlIHZpZXcgdGhlIG9mZmljaWFsIFtPbmVTaWduYWwgSW9uaWMgU0RLIEluc3RhbGxhdGlvbl0oaHR0cHM6Ly9kb2N1bWVudGF0aW9uLm9uZXNpZ25hbC5jb20vZG9jcy9pb25pYy1zZGstc2V0dXApIGd1aWRlXG4gKiBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAqXG4gKiAjIyMjIEljb25zXG4gKiBJZiB5b3Ugd2FudCB0byB1c2UgZ2VuZXJhdGVkIGljb25zIHdpdGggY29tbWFuZCBgaW9uaWMgY29yZG92YSByZXNvdXJjZXNgOlxuICpcbiAqIDEuIEFkZCBhIGZpbGUgdG8geW91ciBgaG9va3NgIGRpcmVjdG9yeSBjYWxsZWQgYGNvcHlfYW5kcm9pZF9ub3RpZmljYXRpb25faWNvbnMuanNgXG4gKlxuICogMi4gQ29uZmlndXJlIHRoZSBob29rIGluIHlvdXIgY29uZmlnLnhtbFxuICogYGBgXG4gKiAgICAgPHBsYXRmb3JtIG5hbWU9XCJhbmRyb2lkXCI+XG4gKiAgICAgICAgIDxob29rIHR5cGU9XCJhZnRlcl9wcmVwYXJlXCIgc3JjPVwiaG9va3MvY29weV9hbmRyb2lkX25vdGlmaWNhdGlvbl9pY29ucy5qc1wiIC8+XG4gKiAgICAgPC9wbGF0Zm9ybT5cbiAqIGBgYFxuICpcbiAqIDMuIFB1dCB0aGUgZm9sbG93aW5nIGNvZGUgaW4gaXQ6XG4gKlxuICogYGBgXG4gKiAjIS91c3IvYmluL2VudiBub2RlXG4gKlxuICogdmFyIGZzID0gcmVxdWlyZSgnZnMnKTtcbiAqIHZhciBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuICpcbiAqIHZhciBmaWxlc3RvY29weSA9IFt7XG4gKiAgICAgXCJyZXNvdXJjZXMvYW5kcm9pZC9pY29uL2RyYXdhYmxlLWhkcGktaWNvbi5wbmdcIjpcbiAqICAgICAgICAgXCJwbGF0Zm9ybXMvYW5kcm9pZC9hcHAvc3JjL21haW4vcmVzL2RyYXdhYmxlLWhkcGkvaWNfc3RhdF9vbmVzaWduYWxfZGVmYXVsdC5wbmdcIlxuICogfSwge1xuICogICAgIFwicmVzb3VyY2VzL2FuZHJvaWQvaWNvbi9kcmF3YWJsZS1tZHBpLWljb24ucG5nXCI6XG4gKiAgICAgICAgIFwicGxhdGZvcm1zL2FuZHJvaWQvYXBwL3NyYy9tYWluL3Jlcy9kcmF3YWJsZS1tZHBpL2ljX3N0YXRfb25lc2lnbmFsX2RlZmF1bHQucG5nXCJcbiAqIH0sIHtcbiAqICAgICBcInJlc291cmNlcy9hbmRyb2lkL2ljb24vZHJhd2FibGUteGhkcGktaWNvbi5wbmdcIjpcbiAqICAgICAgICAgXCJwbGF0Zm9ybXMvYW5kcm9pZC9hcHAvc3JjL21haW4vcmVzL2RyYXdhYmxlLXhoZHBpL2ljX3N0YXRfb25lc2lnbmFsX2RlZmF1bHQucG5nXCJcbiAqIH0sIHtcbiAqICAgICBcInJlc291cmNlcy9hbmRyb2lkL2ljb24vZHJhd2FibGUteHhoZHBpLWljb24ucG5nXCI6XG4gKiAgICAgICAgIFwicGxhdGZvcm1zL2FuZHJvaWQvYXBwL3NyYy9tYWluL3Jlcy9kcmF3YWJsZS14eGhkcGkvaWNfc3RhdF9vbmVzaWduYWxfZGVmYXVsdC5wbmdcIlxuICogfSwge1xuICogICAgIFwicmVzb3VyY2VzL2FuZHJvaWQvaWNvbi9kcmF3YWJsZS14eHhoZHBpLWljb24ucG5nXCI6XG4gKiAgICAgICAgIFwicGxhdGZvcm1zL2FuZHJvaWQvYXBwL3NyYy9tYWluL3Jlcy9kcmF3YWJsZS14eHhoZHBpL2ljX3N0YXRfb25lc2lnbmFsX2RlZmF1bHQucG5nXCJcbiAqIH0gXTtcbiAqXG4gKiBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGNvbnRleHQpIHtcbiAqXG4gKiAgICAgLy8gbm8gbmVlZCB0byBjb25maWd1cmUgYmVsb3dcbiAqICAgICB2YXIgcm9vdGRpciA9IGNvbnRleHQub3B0cy5wcm9qZWN0Um9vdDtcbiAqXG4gKiAgICAgZmlsZXN0b2NvcHkuZm9yRWFjaChmdW5jdGlvbihvYmopIHtcbiAqICAgICAgICAgT2JqZWN0LmtleXMob2JqKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICogICAgICAgICAgICAgdmFyIHZhbCA9IG9ialtrZXldO1xuICogICAgICAgICAgICAgdmFyIHNyY2ZpbGUgPSBwYXRoLmpvaW4ocm9vdGRpciwga2V5KTtcbiAqICAgICAgICAgICAgIHZhciBkZXN0ZmlsZSA9IHBhdGguam9pbihyb290ZGlyLCB2YWwpO1xuICogICAgICAgICAgICAgY29uc29sZS5sb2coXCJjb3B5aW5nIFwiK3NyY2ZpbGUrXCIgdG8gXCIrZGVzdGZpbGUpO1xuICogICAgICAgICAgICAgdmFyIGRlc3RkaXIgPSBwYXRoLmRpcm5hbWUoZGVzdGZpbGUpO1xuICogICAgICAgICAgICAgaWYgKGZzLmV4aXN0c1N5bmMoc3JjZmlsZSkgJiYgZnMuZXhpc3RzU3luYyhkZXN0ZGlyKSkge1xuICogICAgICAgICAgICAgICAgIGZzLmNyZWF0ZVJlYWRTdHJlYW0oc3JjZmlsZSkucGlwZShcbiAqICAgICAgICAgICAgICAgICAgICAgZnMuY3JlYXRlV3JpdGVTdHJlYW0oZGVzdGZpbGUpKTtcbiAqICAgICAgICAgICAgIH1cbiAqICAgICAgICAgfSk7XG4gKiAgICAgfSk7XG4gKlxuICogfTtcbiAqIGBgYFxuICpcbiAqIDMuIEZyb20gdGhlIHJvb3Qgb2YgeW91ciBwcm9qZWN0IG1ha2UgdGhlIGZpbGUgZXhlY3V0YWJsZTpcbiAqIGAkIGNobW9kICt4IGhvb2tzL2NvcHlfYW5kcm9pZF9ub3RpZmljYXRpb25faWNvbnMuanNgXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IE9uZVNpZ25hbCB9IGZyb20gJ0Bhd2Vzb21lLWNvcmRvdmEtcGx1Z2lucy9vbmVzaWduYWwvbmd4JztcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIG9uZVNpZ25hbDogT25lU2lnbmFsKSB7IH1cbiAqXG4gKiAuLi5cbiAqXG4gKiB0aGlzLm9uZVNpZ25hbC5zdGFydEluaXQoJ2IyZjdmOTY2LWQ4Y2MtMTFlNC1iZWQxLWRmOGYwNWJlNTViYScsICc3MDMzMjI3NDQyNjEnKTtcbiAqXG4gKiB0aGlzLm9uZVNpZ25hbC5pbkZvY3VzRGlzcGxheWluZyh0aGlzLm9uZVNpZ25hbC5PU0luRm9jdXNEaXNwbGF5T3B0aW9uLkluQXBwQWxlcnQpO1xuICpcbiAqIHRoaXMub25lU2lnbmFsLmhhbmRsZU5vdGlmaWNhdGlvblJlY2VpdmVkKCkuc3Vic2NyaWJlKCgpID0+IHtcbiAqICAvLyBkbyBzb21ldGhpbmcgd2hlbiBub3RpZmljYXRpb24gaXMgcmVjZWl2ZWRcbiAqIH0pO1xuICpcbiAqIHRoaXMub25lU2lnbmFsLmhhbmRsZU5vdGlmaWNhdGlvbk9wZW5lZCgpLnN1YnNjcmliZSgoKSA9PiB7XG4gKiAgIC8vIGRvIHNvbWV0aGluZyB3aGVuIGEgbm90aWZpY2F0aW9uIGlzIG9wZW5lZFxuICogfSk7XG4gKlxuICogdGhpcy5vbmVTaWduYWwuZW5kSW5pdCgpO1xuICogYGBgXG4gKiBAaW50ZXJmYWNlc1xuICogT1NOb3RpZmljYXRpb25cbiAqIE9TTG9ja1NjcmVlblZpc2liaWxpdHlcbiAqIE9TRGlzcGxheVR5cGVcbiAqIE9TTm90aWZpY2F0aW9uUGF5bG9hZFxuICogT1NBY3Rpb25CdXR0b25cbiAqIE9TQmFja2dyb3VuZEltYWdlTGF5b3V0XG4gKiBPU05vdGlmaWNhdGlvbk9wZW5lZFJlc3VsdFxuICogT1NBY3Rpb25UeXBlXG4gKiBPU0luQXBwTWVzc2FnZUFjdGlvblxuICovXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ09uZVNpZ25hbCcsXG4gIHBsdWdpbjogJ29uZXNpZ25hbC1jb3Jkb3ZhLXBsdWdpbicsXG4gIHBsdWdpblJlZjogJ3BsdWdpbnMuT25lU2lnbmFsJyxcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9PbmVTaWduYWwvT25lU2lnbmFsLUNvcmRvdmEtU0RLJyxcbiAgcGxhdGZvcm1zOiBbJ0FtYXpvbiBGaXJlIE9TJywgJ0FuZHJvaWQnLCAnaU9TJywgJ1dpbmRvd3MnXSxcbn0pXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgT25lU2lnbmFsIGV4dGVuZHMgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4ge1xuICAvKipcbiAgICogY29uc3RhbnRzIHRvIHVzZSBpbiBpbkZvY3VzRGlzcGxheWluZygpXG4gICAqXG4gICAqIEBoaWRkZW5cbiAgICovXG4gIE9TSW5Gb2N1c0Rpc3BsYXlPcHRpb24gPSB7XG4gICAgTm9uZTogMCxcbiAgICBJbkFwcEFsZXJ0OiAxLFxuICAgIE5vdGlmaWNhdGlvbjogMixcbiAgfTtcblxuICAvKipcbiAgICogU3RhcnQgdGhlIGluaXRpYWxpemF0aW9uIHByb2Nlc3MuIE9uY2UgeW91IGFyZSBkb25lIGNvbmZpZ3VyaW5nIE9uZVNpZ25hbCwgY2FsbCB0aGUgYGVuZEluaXRgIGZ1bmN0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gYXBwSWQgWW91ciBPbmVTaWduYWwgYXBwIGlkXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBnb29nbGVQcm9qZWN0TnVtYmVyICoqQU5EUk9JRCoqIC0geW91ciBHb29nbGUgcHJvamVjdCBudW1iZXI7IG9ubHkgcmVxdWlyZWQgZm9yIEFuZHJvaWQgR0NNL0ZDTSBwdXNoZXMuXG4gICAqIEByZXR1cm5zIHthbnl9XG4gICAqL1xuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcbiAgc3RhcnRJbml0KGFwcElkOiBzdHJpbmcsIGdvb2dsZVByb2plY3ROdW1iZXI/OiBzdHJpbmcpOiBhbnkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayB0byBydW4gd2hlbiBhIG5vdGlmaWNhdGlvbiBpcyByZWNlaXZlZCwgd2hldGhlciBpdCB3YXMgZGlzcGxheWVkIG9yIG5vdC5cbiAgICpcbiAgICogQHJldHVybnMge09ic2VydmFibGU8T25lU2lnbmFsUmVjZWl2ZWROb3RpZmljYXRpb24+fVxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIG9ic2VydmFibGU6IHRydWUsXG4gIH0pXG4gIGhhbmRsZU5vdGlmaWNhdGlvblJlY2VpdmVkKCk6IE9ic2VydmFibGU8T1NOb3RpZmljYXRpb24+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogQ2FsbGJhY2sgdG8gcnVuIHdoZW4gYSBub3RpZmljYXRpb24gaXMgdGFwcGVkIG9uIGZyb20gdGhlIG5vdGlmaWNhdGlvbiBzaGFkZSAoKipBTkRST0lEKiopIG9yIG5vdGlmaWNhdGlvblxuICAgKiBjZW50ZXIgKCoqaU9TKiopLCBvciB3aGVuIGNsb3NpbmcgYW4gQWxlcnQgbm90aWZpY2F0aW9uIHNob3duIGluIHRoZSBhcHAgKGlmIEluQXBwQWxlcnQgaXMgZW5hYmxlZCBpblxuICAgKiBpbkZvY3VzRGlzcGxheWluZykuXG4gICAqXG4gICAqIEByZXR1cm5zIHtPYnNlcnZhYmxlPE9uZVNpZ25hbE9wZW5lZE5vdGlmaWNhdGlvbj59XG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgb2JzZXJ2YWJsZTogdHJ1ZSxcbiAgfSlcbiAgaGFuZGxlTm90aWZpY2F0aW9uT3BlbmVkKCk6IE9ic2VydmFibGU8T1NOb3RpZmljYXRpb25PcGVuZWRSZXN1bHQ+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogVXNlIHRvIHByb2Nlc3MgYW4gSW4tQXBwIE1lc3NhZ2UgdGhlIHVzZXIganVzdCB0YXBwZWQgb24uXG4gICAqXG4gICAqIEByZXR1cm5zIHtPYnNlcnZhYmxlPE9TSW5BcHBNZXNzYWdlQWN0aW9uPn1cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBvYnNlcnZhYmxlOiB0cnVlLFxuICB9KVxuICBoYW5kbGVJbkFwcE1lc3NhZ2VDbGlja2VkKCk6IE9ic2VydmFibGU8T1NJbkFwcE1lc3NhZ2VBY3Rpb24+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogaU9TKiogLSBTZXR0aW5ncyBmb3IgaU9TIGFwcHNcbiAgICpcbiAgICogQHBhcmFtIHNldHRpbmdzXG4gICAqICBrT1NTZXR0aW5nc0tleUF1dG9Qcm9tcHQ6IGJvb2xlYW4gPSB0cnVlXG4gICAqICBBdXRvIHByb21wdCB1c2VyIGZvciBub3RpZmljYXRpb24gcGVybWlzc2lvbnMuXG4gICAqXG4gICAqICBrT1NTZXR0aW5nc0tleUluQXBwTGF1bmNoVVJMOiBib29sZWFuID0gZmFsc2VcbiAgICogIExhdW5jaCBub3RpZmljYXRpb25zIHdpdGggYSBsYXVuY2ggVVJMIGFzIGFuIGluIGFwcCB3ZWJ2aWV3LlxuICAgKiBAcGFyYW0gc2V0dGluZ3Mua09TU2V0dGluZ3NLZXlBdXRvUHJvbXB0XG4gICAqIEBwYXJhbSBzZXR0aW5ncy5rT1NTZXR0aW5nc0tleUluQXBwTGF1bmNoVVJMXG4gICAqIEByZXR1cm5zIHthbnl9XG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgc3luYzogdHJ1ZSxcbiAgICBwbGF0Zm9ybXM6IFsnaU9TJ10sXG4gIH0pXG4gIGlPU1NldHRpbmdzKHNldHRpbmdzOiB7IGtPU1NldHRpbmdzS2V5QXV0b1Byb21wdDogYm9vbGVhbjsga09TU2V0dGluZ3NLZXlJbkFwcExhdW5jaFVSTDogYm9vbGVhbiB9KTogYW55IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogTXVzdCBiZSBjYWxsZWQgYWZ0ZXIgYHN0YXJ0SW5pdGAgdG8gY29tcGxldGUgaW5pdGlhbGl6YXRpb24gb2YgT25lU2lnbmFsLlxuICAgKlxuICAgKiBAcmV0dXJucyB7YW55fVxuICAgKi9cbiAgQENvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXG4gIGVuZEluaXQoKTogYW55IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogUHJvbXB0IHRoZSB1c2VyIGZvciBub3RpZmljYXRpb24gcGVybWlzc2lvbnMuIENhbGxiYWNrIGZpcmVzIGFzIHNvb24gYXMgdGhlIHVzZXIgYWNjZXB0cyBvciBkZWNsaW5lcyBub3RpZmljYXRpb25zLlxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxib29sZWFuPn1cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBwbGF0Zm9ybXM6IFsnaU9TJ10sXG4gIH0pXG4gIHByb21wdEZvclB1c2hOb3RpZmljYXRpb25zV2l0aFVzZXJSZXNwb25zZSgpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogUmV0cmlldmUgYSBsaXN0IG9mIHRhZ3MgdGhhdCBoYXZlIGJlZW4gc2V0IG9uIHRoZSB1c2VyIGZyb20gdGhlIE9uZVNpZ25hbCBzZXJ2ZXIuXG4gICAqXG4gICAqIFF1aXJrKio6IFlvdSBtdXN0IHdhaXQgZm9yIGBnZXRUYWdzYCB0byByZXNvbHZlIGJlZm9yZSBjYWxsaW5nIGl0IGFnYWluLCBhcyB0aGUgcGx1Z2luIHdpbGwgb25seSBwcm9jZXNzIHRoZSBsYXN0IG1ldGhvZCBjYWxsIGFuZCBkaXNjYXJkIGFueSBwcmV2aW91cyBvbmVzLlxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gdGFncyBhcmUgcmVjaWV2ZWQuXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGdldFRhZ3MoKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogTGV0cyB5b3UgcmV0cmlldmUgdGhlIE9uZVNpZ25hbCB1c2VyIGlkIGFuZCBkZXZpY2UgdG9rZW4uXG4gICAqIFlvdXIgaGFuZGxlciBpcyBjYWxsZWQgYWZ0ZXIgdGhlIGRldmljZSBpcyBzdWNjZXNzZnVsbHkgcmVnaXN0ZXJlZCB3aXRoIE9uZVNpZ25hbC5cbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0Pn0gUmV0dXJucyBhIFByb21pc2UgdGhhdCByZXNvbHZlcyBpZiB0aGUgZGV2aWNlIHdhcyBzdWNjZXNzZnVsbHkgcmVnaXN0ZXJlZC5cbiAgICpcbiAgICogIHVzZXJJZCB7c3RyaW5nfSBPbmVTaWduYWwgdXNlcklkIGlzIGEgVVVJRCBmb3JtYXR0ZWQgc3RyaW5nLiAodW5pcXVlIHBlciBkZXZpY2UgcGVyIGFwcClcbiAgICpcbiAgICogIHB1c2hUb2tlbiB7c3RyaW5nfSBBIHB1c2ggdG9rZW4gaXMgYSBHb29nbGUvQXBwbGUgYXNzaWduZWQgaWRlbnRpZmllcih1bmlxdWUgcGVyIGRldmljZSBwZXIgYXBwKS5cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgZ2V0SWRzKCk6IFByb21pc2U8eyB1c2VySWQ6IHN0cmluZzsgcHVzaFRva2VuOiBzdHJpbmcgfT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBUYWcgYSB1c2VyIGJhc2VkIG9uIGFuIGFwcCBldmVudCBvZiB5b3VyIGNob29zaW5nIHNvIGxhdGVyIHlvdSBjYW4gY3JlYXRlIHNlZ21lbnRzIG9uIFtvbmVzaWduYWwuY29tXShodHRwczovL29uZXNpZ25hbC5jb20vKSB0byB0YXJnZXQgdGhlc2UgdXNlcnMuXG4gICAqIFJlY29tbWVuZCB1c2luZyBzZW5kVGFncyBvdmVyIHNlbmRUYWcgaWYgeW91IG5lZWQgdG8gc2V0IG1vcmUgdGhhbiBvbmUgdGFnIG9uIGEgdXNlciBhdCBhIHRpbWUuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBLZXkgb2YgeW91ciBjaG9vc2luZyB0byBjcmVhdGUgb3IgdXBkYXRlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gVmFsdWUgdG8gc2V0IG9uIHRoZSBrZXkuIE5PVEU6IFBhc3NpbmcgaW4gYSBibGFuayBTdHJpbmcgZGVsZXRlcyB0aGUga2V5LCB5b3UgY2FuIGFsc28gY2FsbCBkZWxldGVUYWcuXG4gICAqIEBwYXJhbSBrZXlcbiAgICogQHBhcmFtIHZhbHVlXG4gICAqL1xuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcbiAgc2VuZFRhZyhrZXk6IHN0cmluZywgdmFsdWU6IHN0cmluZyk6IHZvaWQge31cblxuICAvKipcbiAgICogVGFnIGEgdXNlciBiYXNlZCBvbiBhbiBhcHAgZXZlbnQgb2YgeW91ciBjaG9vc2luZyBzbyBsYXRlciB5b3UgY2FuIGNyZWF0ZSBzZWdtZW50cyBvbiBbb25lc2lnbmFsLmNvbV0oaHR0cHM6Ly9vbmVzaWduYWwuY29tLykgdG8gdGFyZ2V0IHRoZXNlIHVzZXJzLlxuICAgKiBSZWNvbW1lbmQgdXNpbmcgc2VuZFRhZ3Mgb3ZlciBzZW5kVGFnIGlmIHlvdSBuZWVkIHRvIHNldCBtb3JlIHRoYW4gb25lIHRhZyBvbiBhIHVzZXIgYXQgYSB0aW1lLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gUGFzcyBhIGpzb24gb2JqZWN0IHdpdGgga2V5L3ZhbHVlIHBhaXJzIGxpa2U6IHtrZXk6IFwidmFsdWVcIiwga2V5MjogXCJ2YWx1ZTJcIn1cbiAgICogQHBhcmFtIGpzb25cbiAgICovXG4gIEBDb3Jkb3ZhKHsgc3luYzogdHJ1ZSB9KVxuICBzZW5kVGFncyhqc29uOiBhbnkpOiB2b2lkIHt9XG5cbiAgLyoqXG4gICAqIERlbGV0ZXMgYSB0YWcgdGhhdCB3YXMgcHJldmlvdXNseSBzZXQgb24gYSB1c2VyIHdpdGggYHNlbmRUYWdgIG9yIGBzZW5kVGFnc2AuIFVzZSBgZGVsZXRlVGFnc2AgaWYgeW91IG5lZWQgdG8gZGVsZXRlIG1vcmUgdGhhbiBvbmUuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBLZXkgdG8gcmVtb3ZlLlxuICAgKiBAcGFyYW0ga2V5XG4gICAqL1xuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcbiAgZGVsZXRlVGFnKGtleTogc3RyaW5nKTogdm9pZCB7fVxuXG4gIC8qKlxuICAgKiBEZWxldGVzIHRhZ3MgdGhhdCB3ZXJlIHByZXZpb3VzbHkgc2V0IG9uIGEgdXNlciB3aXRoIGBzZW5kVGFnYCBvciBgc2VuZFRhZ3NgLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBLZXlzIHRvIHJlbW92ZS5cbiAgICogQHBhcmFtIGtleXNcbiAgICovXG4gIEBDb3Jkb3ZhKHsgc3luYzogdHJ1ZSB9KVxuICBkZWxldGVUYWdzKGtleXM6IHN0cmluZ1tdKTogdm9pZCB7fVxuXG4gIC8qKlxuICAgKiBDYWxsIHRoaXMgd2hlbiB5b3Ugd291bGQgbGlrZSB0byBwcm9tcHQgYW4gaU9TIHVzZXIgdG8gYWNjZXB0IHB1c2ggbm90aWZpY2F0aW9ucyB3aXRoIHRoZSBkZWZhdWx0IHN5c3RlbSBwcm9tcHQuXG4gICAqIE9ubHkgd29ya3MgaWYgeW91IHNldCBga09TU2V0dGluZ3NBdXRvUHJvbXB0YCB0byBgZmFsc2VgIGluIGBpT1NTZXR0aW5nc2BcbiAgICovXG4gIEBDb3Jkb3ZhKHsgc3luYzogdHJ1ZSB9KVxuICByZWdpc3RlckZvclB1c2hOb3RpZmljYXRpb25zKCk6IHZvaWQge31cblxuICAvKipcbiAgICogV2FybmluZzpcbiAgICogT25seSBhcHBsaWVzIHRvIEFuZHJvaWQgYW5kIEFtYXpvbi4gWW91IGNhbiBjYWxsIHRoaXMgZnJvbSB5b3VyIFVJIGZyb20gYSBidXR0b24gcHJlc3MgZm9yIGV4YW1wbGUgdG8gZ2l2ZSB5b3VyIHVzZXIncyBvcHRpb25zIGZvciB5b3VyIG5vdGlmaWNhdGlvbnMuXG4gICAqXG4gICAqIEJ5IGRlZmF1bHQgT25lU2lnbmFsIGFsd2F5cyB2aWJyYXRlcyB0aGUgZGV2aWNlIHdoZW4gYSBub3RpZmljYXRpb24gaXMgZGlzcGxheWVkIHVubGVzcyB0aGUgZGV2aWNlIGlzIGluIGEgdG90YWwgc2lsZW50IG1vZGUuXG4gICAqIFBhc3NpbmcgZmFsc2UgbWVhbnMgdGhhdCB0aGUgZGV2aWNlIHdpbGwgb25seSB2aWJyYXRlIGxpZ2h0bHkgd2hlbiB0aGUgZGV2aWNlIGlzIGluIGl0J3MgdmlicmF0ZSBvbmx5IG1vZGUuXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gZmFsc2UgdG8gZGlzYWJsZSB2aWJyYXRlLCB0cnVlIHRvIHJlLWVuYWJsZSBpdC5cbiAgICogQHBhcmFtIGVuYWJsZVxuICAgKi9cbiAgQENvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXG4gIGVuYWJsZVZpYnJhdGUoZW5hYmxlOiBib29sZWFuKTogdm9pZCB7fVxuXG4gIC8qKlxuICAgKiBXYXJuaW5nOlxuICAgKiBPbmx5IGFwcGxpZXMgdG8gQW5kcm9pZCBhbmQgQW1hem9uLiBZb3UgY2FuIGNhbGwgdGhpcyBmcm9tIHlvdXIgVUkgZnJvbSBhIGJ1dHRvbiBwcmVzcyBmb3IgZXhhbXBsZSB0byBnaXZlIHlvdXIgdXNlcidzIG9wdGlvbnMgZm9yIHlvdXIgbm90aWZpY2F0aW9ucy5cbiAgICpcbiAgICogQnkgZGVmYXVsdCBPbmVTaWduYWwgcGxheXMgdGhlIHN5c3RlbSdzIGRlZmF1bHQgbm90aWZpY2F0aW9uIHNvdW5kIHdoZW4gdGhlIGRldmljZSdzIG5vdGlmaWNhdGlvbiBzeXN0ZW0gdm9sdW1lIGlzIHR1cm5lZCBvbi5cbiAgICogUGFzc2luZyBmYWxzZSBtZWFucyB0aGF0IHRoZSBkZXZpY2Ugd2lsbCBvbmx5IHZpYnJhdGUgdW5sZXNzIHRoZSBkZXZpY2UgaXMgc2V0IHRvIGEgdG90YWwgc2lsZW50IG1vZGUuXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gZmFsc2UgdG8gZGlzYWJsZSBzb3VuZCwgdHJ1ZSB0byByZS1lbmFibGUgaXQuXG4gICAqIEBwYXJhbSBlbmFibGVcbiAgICovXG4gIEBDb3Jkb3ZhKHsgc3luYzogdHJ1ZSB9KVxuICBlbmFibGVTb3VuZChlbmFibGU6IGJvb2xlYW4pOiB2b2lkIHt9XG5cbiAgLyoqXG4gICAqXG4gICAqIFNldHRpbmcgdG8gY29udHJvbCBob3cgT25lU2lnbmFsIG5vdGlmaWNhdGlvbnMgd2lsbCBiZSBzaG93biB3aGVuIG9uZSBpcyByZWNlaXZlZCB3aGlsZSB5b3VyIGFwcCBpcyBpbiBmb2N1cy4gQnkgZGVmYXVsdCB0aGlzIGlzIHNldCB0byBpbkFwcEFsZXJ0LCB3aGljaCBjYW4gYmUgaGVscGZ1bCBkdXJpbmcgZGV2ZWxvcG1lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7RGlzcGxheVR5cGV9IGRpc3BsYXlPcHRpb25cbiAgICogQHJldHVybnMge2FueX1cbiAgICovXG4gIEBDb3Jkb3ZhKHsgc3luYzogdHJ1ZSB9KVxuICBpbkZvY3VzRGlzcGxheWluZyhkaXNwbGF5T3B0aW9uOiBPU0Rpc3BsYXlUeXBlKTogYW55IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogWW91IGNhbiBjYWxsIHRoaXMgbWV0aG9kIHdpdGggZmFsc2UgdG8gb3B0IHVzZXJzIG91dCBvZiByZWNlaXZpbmcgYWxsIG5vdGlmaWNhdGlvbnMgdGhyb3VnaCBPbmVTaWduYWwuXG4gICAqIFlvdSBjYW4gcGFzcyB0cnVlIGxhdGVyIHRvIG9wdCB1c2VycyBiYWNrIGludG8gbm90aWZpY2F0aW9ucy5cbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFufSBlbmFibGVcbiAgICovXG4gIEBDb3Jkb3ZhKHsgc3luYzogdHJ1ZSB9KVxuICBzZXRTdWJzY3JpcHRpb24oZW5hYmxlOiBib29sZWFuKTogdm9pZCB7fVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGN1cnJlbnQgbm90aWZpY2F0aW9uIGFuZCBwZXJtaXNzaW9uIHN0YXRlLiBSZXR1cm5zIGEgT1NQZXJtaXNzaW9uU3Vic2NyaXB0aW9uU3RhdGUgdHlwZSBkZXNjcmliZWQgYmVsb3cuXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPE9TUGVybWlzc2lvblN1YnNjcmlwdGlvblN0YXRlPn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgZ2V0UGVybWlzc2lvblN1YnNjcmlwdGlvblN0YXRlKCk6IFByb21pc2U8T1NQZXJtaXNzaW9uU3Vic2NyaXB0aW9uU3RhdGU+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHtub3RpZmljYXRpb25PYmp9IFBhcmFtZXRlcnMgc2VlIFBPU1QgW2RvY3VtZW50YXRpb25dKGh0dHBzOi8vZG9jdW1lbnRhdGlvbi5vbmVzaWduYWwuY29tL3YyLjAvZG9jcy9ub3RpZmljYXRpb25zLWNyZWF0ZS1ub3RpZmljYXRpb24pXG4gICAqIEBwYXJhbSBub3RpZmljYXRpb25PYmpcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIFByb21pc2UgdGhhdCByZXNvbHZlcyBpZiB0aGUgbm90aWZpY2F0aW9uIHdhcyBzZW5kIHN1Y2Nlc3NmdWxseS5cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgcG9zdE5vdGlmaWNhdGlvbihub3RpZmljYXRpb25PYmo6IE9TTm90aWZpY2F0aW9uKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogQ2FuY2VscyBhIHNpbmdsZSBPbmVTaWduYWwgbm90aWZpY2F0aW9uIGJhc2VkIG9uIGl0cyBBbmRyb2lkIG5vdGlmaWNhdGlvbiBpbnRlZ2VyIGlkLiBVc2UgaW5zdGVhZCBvZiBOb3RpZmljYXRpb25NYW5hZ2VyLmNhbmNlbChpZCk7IG90aGVyd2lzZSB0aGUgbm90aWZpY2F0aW9uIHdpbGwgYmUgcmVzdG9yZWQgd2hlbiB5b3VyIGFwcCBpcyByZXN0YXJ0ZWQuXG4gICAqXG4gICAqIEBwYXJhbSBub3RpZmljYXRpb25JZCB7c3RyaW5nfVxuICAgKi9cbiAgQENvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXG4gIGNhbmNlbE5vdGlmaWNhdGlvbihub3RpZmljYXRpb25JZDogc3RyaW5nKTogdm9pZCB7fVxuXG4gIC8qKlxuICAgKiBQcm9tcHRzIHRoZSB1c2VyIGZvciBsb2NhdGlvbiBwZXJtaXNzaW9uIHRvIGFsbG93IGdlb3RhZ2dpbmcgYmFzZWQgb24gdGhlIFwiTG9jYXRpb24gcmFkaXVzXCIgZmlsdGVyIG9uIHRoZSBPbmVTaWduYWwgZGFzaGJvYXJkLlxuICAgKi9cbiAgQENvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXG4gIHByb21wdExvY2F0aW9uKCk6IHZvaWQge31cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIGVtYWlsIHtzdHJpbmd9XG4gICAqL1xuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcbiAgc3luY0hhc2hlZEVtYWlsKGVtYWlsOiBzdHJpbmcpOiB2b2lkIHt9XG5cbiAgLyoqXG4gICAqIEVuYWJsZSBsb2dnaW5nIHRvIGhlbHAgZGVidWcgaWYgeW91IHJ1biBpbnRvIGFuIGlzc3VlIHNldHRpbmcgdXAgT25lU2lnbmFsLlxuICAgKiBUaGUgbG9nZ2luZyBsZXZlbHMgYXJlIGFzIGZvbGxvd3M6IDAgPSBOb25lLCAxPSBGYXRhbCwgMiA9IEVycm9ycywgMyA9IFdhcm5pbmdzLCA0ID0gSW5mbywgNSA9IERlYnVnLCA2ID0gVmVyYm9zZVxuICAgKlxuICAgKiBUaGUgaGlnaGVyIHRoZSB2YWx1ZSB0aGUgbW9yZSBpbmZvcm1hdGlvbiBpcyBzaG93bi5cbiAgICpcbiAgICogQHBhcmFtIHtsb2dsZXZlbH0gY29udGFpbnMgdHdvIHByb3BlcnRpZXM6IGxvZ0xldmVsIChmb3IgY29uc29sZSBsb2dnaW5nKSBhbmQgdmlzdWFsTGV2ZWwgKGZvciBkaWFsb2cgbWVzc2FnZXMpXG4gICAqIEBwYXJhbSBsb2dMZXZlbFxuICAgKiBAcGFyYW0gbG9nTGV2ZWwubG9nTGV2ZWxcbiAgICogQHBhcmFtIGxvZ0xldmVsLnZpc3VhbExldmVsXG4gICAqL1xuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcbiAgc2V0TG9nTGV2ZWwobG9nTGV2ZWw6IHsgbG9nTGV2ZWw6IG51bWJlcjsgdmlzdWFsTGV2ZWw6IG51bWJlciB9KTogdm9pZCB7fVxuXG4gIC8qKlxuICAgKiBEaXNhYmxlIG9yIGVuYWJsZSBsb2NhdGlvbiBjb2xsZWN0aW9uIChEZWZhdWx0cyB0byBlbmFibGVkKSBpZiB5b3VyIGFwcCBoYXMgbG9jYXRpb24gcGVybWlzc2lvbi5cbiAgICpcbiAgICogQHBhcmFtIHNoYXJlZCB7Ym9vbGVhbn1cbiAgICovXG4gIEBDb3Jkb3ZhKHsgc3luYzogdHJ1ZSB9KVxuICBzZXRMb2NhdGlvblNoYXJlZChzaGFyZWQ6IGJvb2xlYW4pOiB2b2lkIHt9XG5cbiAgLyoqXG4gICAqIFRoZSBwYXNzZWQgaW4gZnVuY3Rpb24gd2lsbCBiZSBmaXJlZCB3aGVuIGEgbm90aWZpY2F0aW9uIHBlcm1pc3Npb24gc2V0dGluZyBjaGFuZ2VzLlxuICAgKiBUaGlzIGluY2x1ZGVzIHRoZSBmb2xsb3dpbmcgZXZlbnRzOlxuICAgKiAtIE5vdGlmaWNhdGlvbiBwZXJtaXNzaW9uIHByb21wdCBzaG93blxuICAgKiAtIFRoZSB1c2VyIGFjY2VwdGluZyBvciBkZWNsaW5pbmcgdGhlIHBlcm1pc3Npb24gcHJvbXB0XG4gICAqIC0gRW5hYmxpbmcvZGlzYWJsaW5nIG5vdGlmaWNhdGlvbnMgZm9yIHlvdXIgYXBwIGluIHRoZSBkZXZpY2UgU2V0dGluZ3MgYWZ0ZXIgcmV0dXJuaW5nIHRvIHlvdXIgYXBwLlxuICAgKlxuICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIG9ic2VydmFibGU6IHRydWUsXG4gIH0pXG4gIGFkZFBlcm1pc3Npb25PYnNlcnZlcigpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgcGFzc2VkIGluIGZ1bmN0aW9uIHdpbGwgYmUgZmlyZWQgd2hlbiBhIG5vdGlmaWNhdGlvbiBzdWJzY3JpcHRpb24gcHJvcGVydHkgY2hhbmdlcy5cbiAgICogVGhpcyBpbmNsdWRlcyB0aGUgZm9sbG93aW5nIGV2ZW50czpcbiAgICogLSBHZXR0aW5nIGEgcHVzaCB0b2tlbiBmcm9tIEFwcGxlIC8gR29vZ2xlLlxuICAgKiAtIEdldHRpbmcgYSBwbGF5ZXIgLyB1c2VyIGlkIGZyb20gT25lU2lnbmFsXG4gICAqIC0gT25lU2lnbmFsLnNldFN1YnNjcmlwdGlvbiBpcyBjYWxsZWRcbiAgICogLSBVc2VyIGRpc2FibGVzIG9yIGVuYWJsZXMgbm90aWZpY2F0aW9uc1xuICAgKlxuICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIG9ic2VydmFibGU6IHRydWUsXG4gIH0pXG4gIGFkZFN1YnNjcmlwdGlvbk9ic2VydmVyKCk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIENsZWFycyBhbGwgT25lU2lnbmFsIG5vdGlmaWNhdGlvbnNcbiAgICpcbiAgICogQHBhcmFtIGVtYWlsXG4gICAqIEBwYXJhbSBlbWFpbEF1dGhUb2tlblxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBzZXRFbWFpbChlbWFpbDogc3RyaW5nLCBlbWFpbEF1dGhUb2tlbj86IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIElmIHlvdXIgYXBwIGltcGxlbWVudHMgbG9nb3V0IGZ1bmN0aW9uYWxpdHksIHlvdSBjYW4gY2FsbCBsb2dvdXRFbWFpbCB0byBkaXNzb2NpYXRlIHRoZSBlbWFpbCBmcm9tIHRoZSBkZXZpY2VcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgbG9nb3V0RW1haWwoKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogVGhlIHBhc3NlZCBpbiBmdW5jdGlvbiB3aWxsIGJlIGZpcmVkIHdoZW4gYSBub3RpZmljYXRpb24gc3Vic2NyaXB0aW9uIHByb3BlcnR5IGNoYW5nZXMuXG4gICAqIFRoaXMgaW5jbHVkZXMgdGhlIGZvbGxvd2luZyBldmVudHM6XG4gICAqIC0gR2V0dGluZyBhIHB1c2ggdG9rZW4gZnJvbSBBcHBsZSAvIEdvb2dsZS5cbiAgICogLSBHZXR0aW5nIGEgcGxheWVyIC8gdXNlciBpZCBmcm9tIE9uZVNpZ25hbFxuICAgKiAtIE9uZVNpZ25hbC5zZXRTdWJzY3JpcHRpb24gaXMgY2FsbGVkXG4gICAqIC0gVXNlciBkaXNhYmxlcyBvciBlbmFibGVzIG5vdGlmaWNhdGlvbnNcbiAgICpcbiAgICogQHJldHVybnMge09ic2VydmFibGU8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBvYnNlcnZhYmxlOiB0cnVlLFxuICB9KVxuICBhZGRFbWFpbFN1YnNjcmlwdGlvbk9ic2VydmVyKCk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIENsZWFycyBhbGwgT25lU2lnbmFsIG5vdGlmaWNhdGlvbnNcbiAgICovXG4gIEBDb3Jkb3ZhKHsgc3luYzogdHJ1ZSB9KVxuICBjbGVhck9uZVNpZ25hbE5vdGlmaWNhdGlvbnMoKTogdm9pZCB7fVxuXG4gIC8qKlxuICAgKiBBbGxvd3MgeW91IHRvIGRlbGF5IHRoZSBpbml0aWFsaXphdGlvbiBvZiB0aGUgU0RLIHVudGlsIHRoZSB1c2VyIHByb3ZpZGVzIHByaXZhY3kgY29uc2VudC5cbiAgICogVGhlIFNESyB3aWxsIG5vdCBiZSBmdWxseSBpbml0aWFsaXplZCB1bnRpbCB0aGUgcHJvdmlkZVVzZXJDb25zZW50KHRydWUpIG1ldGhvZCBpcyBjYWxsZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gcmVxdWlyZWRcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgc2V0UmVxdWlyZXNVc2VyUHJpdmFjeUNvbnNlbnQocmVxdWlyZWQ6IGJvb2xlYW4pOiB2b2lkIHt9XG5cbiAgLyoqXG4gICAqIElmIHlvdXIgYXBwbGljYXRpb24gaXMgc2V0IHRvIHJlcXVpcmUgdGhlIHVzZXIncyBwcml2YWN5IGNvbnNlbnQsIHlvdSBjYW4gcHJvdmlkZSB0aGlzIGNvbnNlbnQgdXNpbmcgdGhpcyBtZXRob2QuXG4gICAqIFVudGlsIHlvdSBjYWxsIHByb3ZpZGVVc2VyQ29uc2VudCh0cnVlKSwgdGhlIFNESyB3aWxsIG5vdCBmdWxseSBpbml0aWFsaXplIGFuZCB3aWxsIG5vdCBzZW5kIGFueSBkYXRhIHRvIE9uZVNpZ25hbC5cbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFufSBncmFudGVkXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHByb3ZpZGVVc2VyQ29uc2VudChncmFudGVkOiBib29sZWFuKTogdm9pZCB7fVxuXG4gIC8qKlxuICAgKiBBY2NlcHRzIGEgY2FsbGJhY2ssIHdoaWNoIHJldHVybnMgYSBib29sZWFuIHZhcmlhYmxlIGluZGljYXRpbmcgaWYgdGhlIHVzZXIgaGFzIGdpdmVuIHByaXZhY3kgY29uc2VudCB5ZXQuXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHVzZXJQcm92aWRlZFByaXZhY3lDb25zZW50KGNhbGxiYWNrOiBGdW5jdGlvbik6IHZvaWQge31cblxuICAvKipcbiAgICogQWxsb3dzIHlvdSB0byB1c2UgeW91ciBvd24gc3lzdGVtJ3MgdXNlciBJRCdzIHRvIHNlbmQgcHVzaCBub3RpZmljYXRpb25zIHRvIHlvdXIgdXNlcnMuXG4gICAqIFRvIHRpZSBhIHVzZXIgdG8gYSBnaXZlbiB1c2VyIElELCB5b3UgY2FuIHVzZSB0aGlzIG1ldGhvZC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGV4dGVybmFsSWRcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgc2V0RXh0ZXJuYWxVc2VySWQoZXh0ZXJuYWxJZDogc3RyaW5nKTogdm9pZCB7fVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIHdoYXRldmVyIHdhcyBzZXQgYXMgdGhlIGN1cnJlbnQgdXNlcidzIGV4dGVybmFsIHVzZXIgSUQuXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHJlbW92ZUV4dGVybmFsVXNlcklkKCk6IHZvaWQge31cblxuICAvKipcbiAgICogQWRkIGEgdHJpZ2dlci4gTWF5IHNob3cgYW4gSW4tQXBwIE1lc3NhZ2UgaWYgaXRzIHRyaWdnZXIgY29uZGl0aW9ucyB3ZXJlIG1ldC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBLZXkgZm9yIHRoZSB0cmlnZ2VyLlxuICAgKiBAcGFyYW0ge3N0cmluZyB8IG51bWJlciB8IE9iamVjdH0gdmFsdWUgVmFsdWUgZm9yIHRoZSB0cmlnZ2VyLiBTdHJpbmcgb3IgbnVtYmVyIHJlY29tbWVuZGVkLiBPYmplY3QgcGFzc2VkIGluIHdpbGwgYmUgY29udmVydGVkIHRvIGEgc3RyaW5nLlxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIHN5bmM6IHRydWUsXG4gIH0pXG4gIGFkZFRyaWdnZXIoa2V5OiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcgfCBudW1iZXIgfCBPYmplY3QpOiB2b2lkIHt9XG5cbiAgLyoqXG4gICAqIEFkZCBhIG1hcCBvZiB0cmlnZ2Vycy4gTWF5IHNob3cgYW4gSW4tQXBwIE1lc3NhZ2UgaWYgaXRzIHRyaWdnZXIgY29uZGl0aW9ucyB3ZXJlIG1ldC5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywgc3RyaW5nIHwgbnVtYmVyIHwgT2JqZWN0Pn0gdHJpZ2dlcnMgQWxsb3dzIHlvdSB0byBzZXQgbXVsdGlwbGUgdHJpZ2dlciBrZXkvdmFsdWUgcGFpcnMgc2ltdWx0YW5lb3VzbHkuIFBhc3MgYSBqc29uIG9iamVjdCB3aXRoIGtleS92YWx1ZSBwYWlycyBsaWtlOiBge1wia2V5XCI6IFwidmFsdWVcIiwgXCJrZXkyXCI6IFwidmFsdWUyXCJ9YC5cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBzeW5jOiB0cnVlLFxuICB9KVxuICBhZGRUcmlnZ2Vycyh0cmlnZ2VyczogT2JqZWN0KTogdm9pZCB7fVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGEgc2luZ2xlIHRyaWdnZXIgZm9yIHRoZSBnaXZlbiBrZXkuIE1heSBzaG93IGFuIEluLUFwcCBNZXNzYWdlIGlmIGl0cyB0cmlnZ2VyIGNvbmRpdGlvbnMgd2VyZSBtZXQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgS2V5IGZvciB0cmlnZ2VyIHRvIHJlbW92ZS5cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBzeW5jOiB0cnVlLFxuICB9KVxuICByZW1vdmVUcmlnZ2VyRm9yS2V5KGtleTogc3RyaW5nKTogdm9pZCB7fVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGEgbGlzdCBvZiB0cmlnZ2VycyBiYXNlZCBvbiBhIGNvbGxlY3Rpb24gKGFycmF5KSBvZiBrZXlzLiBNYXkgc2hvdyBhbiBJbi1BcHAgTWVzc2FnZSBpZiBpdHMgdHJpZ2dlciBjb25kaXRpb25zIHdlcmUgbWV0LlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBrZXlzIFJlbW92ZXMgYSBjb2xsZWN0aW9uIG9mIHRyaWdnZXJzIGZyb20gdGhlaXIga2V5cy4gUGFzcyBhbiBhcnJheSBvZiB0cmlnZ2VyIGtleXMgbGlrZTogYFtcImtleTFcIiwgXCJrZXkyXCIsIFwia2V5M1wiXWAuXG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgc3luYzogdHJ1ZSxcbiAgfSlcbiAgcmVtb3ZlVHJpZ2dlcnNGb3JLZXlzKGtleXM6IHN0cmluZ1tdKTogdm9pZCB7fVxuXG4gIC8qKlxuICAgKiBHZXRzIGEgdHJpZ2dlciB2YWx1ZSBmb3IgYSBwcm92aWRlZCB0cmlnZ2VyIGtleS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBLZXkgZm9yIHRyaWdnZXIgdG8gZ2V0IHZhbHVlLlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxzdHJpbmcgfCBudW1iZXIgfCBPYmplY3Q+fSBSZXR1cm4gdmFsdWUgc2V0IHdpdGggYGFkZFRyaWdnZXJgLCBvciBgbnVsbGAvYG5pbGAgKGlPUykgaWYgbmV2ZXIgc2V0IG9yIHJlbW92ZWQuXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGdldFRyaWdnZXJWYWx1ZUZvcktleShrZXk6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nIHwgbnVtYmVyIHwgT2JqZWN0PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIEFsbG93cyB5b3UgdG8gdGVtcG9yYXJpbHkgcGF1c2UgYWxsIEluLUFwcCBNZXNzYWdlcy4gWW91IG1heSB3YW50IHRvIGRvIHRoaXMgd2hpbGUgdGhlIHVzZXIgaXMgZW5nYWdlZCBpbiBhbiBhY3Rpdml0eSB0aGF0IHlvdSBkb24ndCB3YW50IGEgbWVzc2FnZSB0byBpbnRlcnJ1cHQgKHN1Y2ggYXMgd2F0Y2hpbmcgYSB2aWRlbykuXG4gICAqIEFuIEluLUFwcCBNZXNzYWdlIHRoYXQgd291bGQgZGlzcGxheSBpZiBub3QgcGF1c2VkIHdpbGwgZGlzcGxheSByaWdodCBhZnRlciByZXN1bWUgaWYgaXRzIGNvbmRpdGlvbnMgdG8gZGlzcGxheSByZW1haW5zIHNhdGlzZmllZC5cbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFufSBwYXVzZSBUbyBwYXVzZSwgc2V0IGB0cnVlYC4gVG8gcmVzdW1lLCBzZXQgYGZhbHNlYC5cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBzeW5jOiB0cnVlLFxuICB9KVxuICBwYXVzZUluQXBwTWVzc2FnZXMocGF1c2U6IGJvb2xlYW4pOiB2b2lkIHt9XG59XG4iXX0=