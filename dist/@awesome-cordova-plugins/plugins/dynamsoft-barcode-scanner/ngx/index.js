import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import { Observable } from 'rxjs';
import * as i0 from "@angular/core";
export var EnumResolution;
(function (EnumResolution) {
    EnumResolution[EnumResolution["RESOLUTION_AUTO"] = 0] = "RESOLUTION_AUTO";
    EnumResolution[EnumResolution["RESOLUTION_480P"] = 1] = "RESOLUTION_480P";
    EnumResolution[EnumResolution["RESOLUTION_720P"] = 2] = "RESOLUTION_720P";
    EnumResolution[EnumResolution["RESOLUTION_1080P"] = 3] = "RESOLUTION_1080P";
    EnumResolution[EnumResolution["RESOLUTION_2K"] = 4] = "RESOLUTION_2K";
    EnumResolution[EnumResolution["RESOLUTION_4K"] = 5] = "RESOLUTION_4K";
})(EnumResolution || (EnumResolution = {}));
var BarcodeScanner = /** @class */ (function (_super) {
    __extends(BarcodeScanner, _super);
    function BarcodeScanner() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BarcodeScanner.prototype.init = function (license) { return cordova(this, "init", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    BarcodeScanner.prototype.initRuntimeSettingsWithString = function (settings) { return cordova(this, "initRuntimeSettingsWithString", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    BarcodeScanner.prototype.outputSettingsToString = function () { return cordova(this, "outputSettingsToString", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    BarcodeScanner.prototype.destroy = function () { return cordova(this, "destroy", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    BarcodeScanner.prototype.startScanning = function (options) { return cordova(this, "startScanning", { "successIndex": 1, "errorIndex": 2, "observable": true }, arguments); };
    BarcodeScanner.prototype.stopScanning = function () { return cordova(this, "stopScanning", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    BarcodeScanner.prototype.resumeScanning = function () { return cordova(this, "resumeScanning", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    BarcodeScanner.prototype.pauseScanning = function () { return cordova(this, "pauseScanning", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    BarcodeScanner.prototype.getResolution = function () { return cordova(this, "getResolution", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    BarcodeScanner.prototype.switchTorch = function (desiredStatus) { return cordova(this, "switchTorch", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    BarcodeScanner.prototype.setZoom = function (factor) { return cordova(this, "setZoom", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    BarcodeScanner.prototype.setFocus = function (point) { return cordova(this, "setFocus", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    BarcodeScanner.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BarcodeScanner, deps: null, target: i0.ɵɵFactoryTarget.Injectable });
    BarcodeScanner.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BarcodeScanner });
    BarcodeScanner.pluginName = "dynamsoft-barcode-scanner";
    BarcodeScanner.plugin = "cordova-plugin-dynamsoft-barcode-reader";
    BarcodeScanner.pluginRef = "cordova.plugins.DBR";
    BarcodeScanner.repo = "https://github.com/xulihang/cordova-plugin-dynamsoft-barcode-reader";
    BarcodeScanner.install = "";
    BarcodeScanner.installVariables = [];
    BarcodeScanner.platforms = ["Android", "iOS"];
    BarcodeScanner = __decorate([], BarcodeScanner);
    return BarcodeScanner;
}(AwesomeCordovaNativePlugin));
export { BarcodeScanner };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BarcodeScanner, decorators: [{
            type: Injectable
        }], propDecorators: { init: [], initRuntimeSettingsWithString: [], outputSettingsToString: [], destroy: [], startScanning: [], stopScanning: [], resumeScanning: [], pauseScanning: [], getResolution: [], switchTorch: [], setZoom: [], setFocus: [] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvZHluYW1zb2Z0LWJhcmNvZGUtc2Nhbm5lci9uZ3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyx1Q0FPTixNQUFNLCtCQUErQixDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7O0FBa0NsQyxNQUFNLENBQU4sSUFBWSxjQU9YO0FBUEQsV0FBWSxjQUFjO0lBQ3hCLHlFQUFtQixDQUFBO0lBQ25CLHlFQUFtQixDQUFBO0lBQ25CLHlFQUFtQixDQUFBO0lBQ25CLDJFQUFvQixDQUFBO0lBQ3BCLHFFQUFpQixDQUFBO0lBQ2pCLHFFQUFpQixDQUFBO0FBQ25CLENBQUMsRUFQVyxjQUFjLEtBQWQsY0FBYyxRQU96Qjs7SUFrQ21DLGtDQUEwQjs7OztJQVU1RCw2QkFBSSxhQUFDLE9BQWU7SUFhcEIsc0RBQTZCLGFBQUMsUUFBaUI7SUFTL0MsK0NBQXNCO0lBU3RCLGdDQUFPO0lBY1Asc0NBQWEsYUFBQyxPQUFxQjtJQVNuQyxxQ0FBWTtJQVNaLHVDQUFjO0lBU2Qsc0NBQWE7SUFTYixzQ0FBYTtJQVViLG9DQUFXLGFBQUMsYUFBcUI7SUFVakMsZ0NBQU8sYUFBQyxNQUFjO0lBVXRCLGlDQUFRLGFBQUMsS0FBK0I7Z0hBekg3QixjQUFjO29IQUFkLGNBQWM7Ozs7Ozs7O0lBQWQsY0FBYyxrQkFBZCxjQUFjO3lCQXBGM0I7RUFvRm9DLDBCQUEwQjtTQUFqRCxjQUFjOzRGQUFkLGNBQWM7a0JBRDFCLFVBQVU7OEJBV1QsSUFBSSxNQWFKLDZCQUE2QixNQVM3QixzQkFBc0IsTUFTdEIsT0FBTyxNQWNQLGFBQWEsTUFTYixZQUFZLE1BU1osY0FBYyxNQVNkLGFBQWEsTUFTYixhQUFhLE1BVWIsV0FBVyxNQVVYLE9BQU8sTUFVUCxRQUFRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgUGx1Z2luLFxuICBDb3Jkb3ZhLFxuICBDb3Jkb3ZhUHJvcGVydHksXG4gIENvcmRvdmFJbnN0YW5jZSxcbiAgSW5zdGFuY2VQcm9wZXJ0eSxcbiAgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4sXG59IGZyb20gJ0Bhd2Vzb21lLWNvcmRvdmEtcGx1Z2lucy9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuLyoqXG4gKiBkY2VMaWNlbnNlOiBMaWNlbnNlIG9mIER5bmFtc29mdCBDYW1lcmEgRW5oYW5jZXJcbiAqIHJlc29sdXRpb246IHVzZSBFbnVtUmVzb2x1dGlvblxuICogcm90YXRlOiBjb252ZXJ0IGZyYW1lIHRvIGJpdG1hcCBhbmQgcm90YXRlIGl0XG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU2Nhbk9wdGlvbnMge1xuICBkY2VMaWNlbnNlPzogc3RyaW5nO1xuICByZXNvbHV0aW9uPzogbnVtYmVyO1xuICByb3RhdGU/OiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEZyYW1lUmVzdWx0IHtcbiAgZnJhbWVXaWR0aDogbnVtYmVyO1xuICBmcmFtZUhlaWdodDogbnVtYmVyO1xuICBmcmFtZVJvdGF0aW9uOiBudW1iZXI7XG4gIHJlc3VsdHM6IEJhcmNvZGVSZXN1bHRbXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCYXJjb2RlUmVzdWx0IHtcbiAgYmFyY29kZVRleHQ6IHN0cmluZztcbiAgYmFyY29kZUZvcm1hdDogc3RyaW5nO1xuICBiYXJjb2RlQnl0ZXNCYXNlNjQ/OiBzdHJpbmc7XG4gIHgxOiBudW1iZXI7XG4gIHgyOiBudW1iZXI7XG4gIHgzOiBudW1iZXI7XG4gIHg0OiBudW1iZXI7XG4gIHkxOiBudW1iZXI7XG4gIHkyOiBudW1iZXI7XG4gIHkzOiBudW1iZXI7XG4gIHk0OiBudW1iZXI7XG59XG5cbmV4cG9ydCBlbnVtIEVudW1SZXNvbHV0aW9uIHtcbiAgUkVTT0xVVElPTl9BVVRPID0gMCxcbiAgUkVTT0xVVElPTl80ODBQID0gMSxcbiAgUkVTT0xVVElPTl83MjBQID0gMixcbiAgUkVTT0xVVElPTl8xMDgwUCA9IDMsXG4gIFJFU09MVVRJT05fMksgPSA0LFxuICBSRVNPTFVUSU9OXzRLID0gNSxcbn1cblxuLyoqXG4gKiBAbmFtZSBkeW5hbXNvZnQtYmFyY29kZS1zY2FubmVyXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoaXMgcGx1Z2luIHNjYW5zIGJhcmNvZGVzIHVzaW5nIER5bmFtc29mdCBCYXJjb2RlIFJlYWRlclxuICpcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgZHluYW1zb2Z0LWJhcmNvZGUtc2Nhbm5lciB9IGZyb20gJ0Bhd2Vzb21lLWNvcmRvdmEtcGx1Z2lucy9keW5hbXNvZnQtYmFyY29kZS1zY2FubmVyJztcbiAqXG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSBkeW5hbXNvZnQtYmFyY29kZS1zY2FubmVyOiBkeW5hbXNvZnQtYmFyY29kZS1zY2FubmVyKSB7IH1cbiAqXG4gKiAuLi5cbiAqXG4gKlxuICogYXdhaXQgdGhpcy5keW5hbXNvZnQtYmFyY29kZS1zY2FubmVyLmluaXQoXCJsaWNlbnNlXCIpO1xuICogdGhpcy5keW5hbXNvZnQtYmFyY29kZS1zY2FubmVyLnN0YXJ0U2Nhbm5pbmcoXCJsaWNlbnNlXCIpLnN1YnNjcmliZShyZXN1bHQgPT4ge1xuICAgICBjb25zb2xlLmxvZyhyZXN1bHQpO1xuICAgfSk7XG4gKlxuICogYGBgXG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnZHluYW1zb2Z0LWJhcmNvZGUtc2Nhbm5lcicsXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLWR5bmFtc29mdC1iYXJjb2RlLXJlYWRlcicsXG4gIHBsdWdpblJlZjogJ2NvcmRvdmEucGx1Z2lucy5EQlInLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL3h1bGloYW5nL2NvcmRvdmEtcGx1Z2luLWR5bmFtc29mdC1iYXJjb2RlLXJlYWRlcicsXG4gIGluc3RhbGw6ICcnLFxuICBpbnN0YWxsVmFyaWFibGVzOiBbXSxcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJ10sXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEJhcmNvZGVTY2FubmVyIGV4dGVuZHMgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4ge1xuICAvKipcbiAgICogSW5pdGlhbGl6ZSBEeW5hbXNvZnQgQmFyY29kZSBSZWFkZXJcbiAgICogQHBhcmFtIGxpY2Vuc2Uge3N0cmluZ31cbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gdGhlIGluaXRpYWxpemF0aW9uIGlzIGRvbmVcbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBzdWNjZXNzSW5kZXg6IDEsXG4gICAgZXJyb3JJbmRleDogMixcbiAgfSlcbiAgaW5pdChsaWNlbnNlOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdXAgcnVudGltZSBzZXR0aW5nc1xuICAgKiBAcGFyYW0gc2V0dGluZ3Mge3N0cmluZ30gcnVudGltZSBzZXR0aW5ncyB0ZW1wbGF0ZSBpbiBKU09OXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBzdWNjZXNzSW5kZXg6IDEsXG4gICAgZXJyb3JJbmRleDogMixcbiAgfSlcbiAgaW5pdFJ1bnRpbWVTZXR0aW5nc1dpdGhTdHJpbmcoc2V0dGluZ3M/OiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBPdXRwdXQgcnVudGltZSBzZXR0aW5ncyB0byBKU09OIHN0cmluZ1xuICAgKiBAcmV0dXJuIHtQcm9taXNlPFN0cmluZz59IFJldHVybnMgYSBwcm9taXNlXG4gICAqL1xuICBAQ29yZG92YSh7IHN1Y2Nlc3NJbmRleDogMSwgZXJyb3JJbmRleDogMiB9KVxuICBvdXRwdXRTZXR0aW5nc1RvU3RyaW5nKCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIGRlc3Ryb3kgRHluYW1zb2Z0IEJhcmNvZGUgUmVhZGVyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcbiAgICovXG4gIEBDb3Jkb3ZhKHsgc3VjY2Vzc0luZGV4OiAxLCBlcnJvckluZGV4OiAyIH0pXG4gIGRlc3Ryb3koKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogc3RhcnQgdGhlIGNhbWVyYSB0byBzY2FuIGJhcmNvZGVzXG4gICAqIEBwYXJhbSBvcHRpb25zIHtTY2FuT3B0aW9uc31cbiAgICogQHJldHVybiB7T2JzZXJ2YWJsZTxGcmFtZVJlc3VsdD59XG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgc3VjY2Vzc0luZGV4OiAxLFxuICAgIGVycm9ySW5kZXg6IDIsXG4gICAgb2JzZXJ2YWJsZTogdHJ1ZSxcbiAgfSlcbiAgc3RhcnRTY2FubmluZyhvcHRpb25zPzogU2Nhbk9wdGlvbnMpOiBPYnNlcnZhYmxlPEZyYW1lUmVzdWx0PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIHN0b3Agc2Nhbm5pbmdcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxuICAgKi9cbiAgQENvcmRvdmEoeyBzdWNjZXNzSW5kZXg6IDEsIGVycm9ySW5kZXg6IDIgfSlcbiAgc3RvcFNjYW5uaW5nKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIHJlc3VtZSBzY2FubmluZ1xuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXG4gICAqL1xuICBAQ29yZG92YSh7IHN1Y2Nlc3NJbmRleDogMSwgZXJyb3JJbmRleDogMiB9KVxuICByZXN1bWVTY2FubmluZygpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBwYXVzZSBzY2FubmluZ1xuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXG4gICAqL1xuICBAQ29yZG92YSh7IHN1Y2Nlc3NJbmRleDogMSwgZXJyb3JJbmRleDogMiB9KVxuICBwYXVzZVNjYW5uaW5nKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIGdldCByZXNvbHV0aW9uIGxpa2U6IDEyODB4NzIwXG4gICAqIEByZXR1cm4ge1Byb21pc2U8c3RyaW5nPn0gUmV0dXJucyBhIHByb21pc2VcbiAgICovXG4gIEBDb3Jkb3ZhKHsgc3VjY2Vzc0luZGV4OiAxLCBlcnJvckluZGV4OiAyIH0pXG4gIGdldFJlc29sdXRpb24oKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogc3dpdGNoIHRvcmNoXG4gICAqIEBwYXJhbSBkZXNpcmVkU3RhdHVzIHtzdHJpbmd9IG9uIG9yIG9mZlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXG4gICAqL1xuICBAQ29yZG92YSh7IHN1Y2Nlc3NJbmRleDogMSwgZXJyb3JJbmRleDogMiB9KVxuICBzd2l0Y2hUb3JjaChkZXNpcmVkU3RhdHVzOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBzZXQgem9vbVxuICAgKiBAcGFyYW0gZmFjdG9yIHtudW1iZXJ9IHpvb20gZmFjdG9yXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcbiAgICovXG4gIEBDb3Jkb3ZhKHsgc3VjY2Vzc0luZGV4OiAxLCBlcnJvckluZGV4OiAyIH0pXG4gIHNldFpvb20oZmFjdG9yOiBudW1iZXIpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBzZXQgZm9jdXNcbiAgICogQHBhcmFtIHBvaW50IGZvY3VzIHBvaW50XG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcbiAgICovXG4gIEBDb3Jkb3ZhKHsgc3VjY2Vzc0luZGV4OiAxLCBlcnJvckluZGV4OiAyIH0pXG4gIHNldEZvY3VzKHBvaW50OiB7IHg6IG51bWJlcjsgeTogbnVtYmVyIH0pOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxufVxuIl19