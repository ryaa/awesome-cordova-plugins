import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import { Observable } from 'rxjs';
var BarcodeScanner = /** @class */ (function (_super) {
    __extends(BarcodeScanner, _super);
    function BarcodeScanner() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BarcodeScanner.prototype.init = function (license) { return cordova(this, "init", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    BarcodeScanner.prototype.initRuntimeSettingsWithString = function (settings) { return cordova(this, "initRuntimeSettingsWithString", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    BarcodeScanner.prototype.outputSettingsToString = function () { return cordova(this, "outputSettingsToString", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    BarcodeScanner.prototype.destroy = function () { return cordova(this, "destroy", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    BarcodeScanner.prototype.startScanning = function (dceLicense) { return cordova(this, "startScanning", { "successIndex": 1, "errorIndex": 2, "observable": true }, arguments); };
    BarcodeScanner.prototype.stopScanning = function () { return cordova(this, "stopScanning", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    BarcodeScanner.prototype.resumeScanning = function () { return cordova(this, "resumeScanning", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    BarcodeScanner.prototype.pauseScanning = function () { return cordova(this, "pauseScanning", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    BarcodeScanner.prototype.getResolution = function () { return cordova(this, "getResolution", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    BarcodeScanner.prototype.switchTorch = function (desiredStatus) { return cordova(this, "switchTorch", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    BarcodeScanner.pluginName = "dynamsoft-barcode-scanner";
    BarcodeScanner.plugin = "cordova-plugin-dynamsoft-barcode-reader";
    BarcodeScanner.pluginRef = "cordova.plugins.DBR";
    BarcodeScanner.repo = "https://github.com/xulihang/cordova-plugin-dynamsoft-barcode-reader";
    BarcodeScanner.install = "";
    BarcodeScanner.installVariables = [];
    BarcodeScanner.platforms = ["Android", "iOS"];
    BarcodeScanner.decorators = [
        { type: Injectable }
    ];
    return BarcodeScanner;
}(AwesomeCordovaNativePlugin));
export { BarcodeScanner };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvZHluYW1zb2Z0LWJhcmNvZGUtc2Nhbm5lci9uZ3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyx1Q0FPTixNQUFNLCtCQUErQixDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7O0lBcURFLGtDQUEwQjs7OztJQVU1RCw2QkFBSSxhQUFDLE9BQWU7SUFhcEIsc0RBQTZCLGFBQUMsUUFBaUI7SUFTL0MsK0NBQXNCO0lBU3RCLGdDQUFPO0lBY1Asc0NBQWEsYUFBQyxVQUFtQjtJQVNqQyxxQ0FBWTtJQVNaLHVDQUFjO0lBU2Qsc0NBQWE7SUFTYixzQ0FBYTtJQVViLG9DQUFXLGFBQUMsYUFBcUI7Ozs7Ozs7OztnQkF0R2xDLFVBQVU7O3lCQTdEWDtFQThEb0MsMEJBQTBCO1NBQWpELGNBQWMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBQbHVnaW4sXG4gIENvcmRvdmEsXG4gIENvcmRvdmFQcm9wZXJ0eSxcbiAgQ29yZG92YUluc3RhbmNlLFxuICBJbnN0YW5jZVByb3BlcnR5LFxuICBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbixcbn0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEZyYW1lUmVzdWx0IHtcbiAgZnJhbWVXaWR0aDogbnVtYmVyO1xuICBmcmFtZUhlaWdodDogbnVtYmVyO1xuICByZXN1bHRzOiBCYXJjb2RlUmVzdWx0W107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmFyY29kZVJlc3VsdCB7XG4gIGJhcmNvZGVUZXh0OiBzdHJpbmc7XG4gIGJhcmNvZGVGb3JtYXQ6IHN0cmluZztcbiAgeDE6IG51bWJlcjtcbiAgeDI6IG51bWJlcjtcbiAgeDM6IG51bWJlcjtcbiAgeDQ6IG51bWJlcjtcbiAgeTE6IG51bWJlcjtcbiAgeTI6IG51bWJlcjtcbiAgeTM6IG51bWJlcjtcbiAgeTQ6IG51bWJlcjtcbn1cblxuLyoqXG4gKiBAbmFtZSBkeW5hbXNvZnQtYmFyY29kZS1zY2FubmVyXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoaXMgcGx1Z2luIHNjYW5zIGJhcmNvZGVzIHVzaW5nIER5bmFtc29mdCBCYXJjb2RlIFJlYWRlclxuICpcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgZHluYW1zb2Z0LWJhcmNvZGUtc2Nhbm5lciB9IGZyb20gJ0Bhd2Vzb21lLWNvcmRvdmEtcGx1Z2lucy9keW5hbXNvZnQtYmFyY29kZS1zY2FubmVyJztcbiAqXG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSBkeW5hbXNvZnQtYmFyY29kZS1zY2FubmVyOiBkeW5hbXNvZnQtYmFyY29kZS1zY2FubmVyKSB7IH1cbiAqXG4gKiAuLi5cbiAqXG4gKlxuICogYXdhaXQgdGhpcy5keW5hbXNvZnQtYmFyY29kZS1zY2FubmVyLmluaXQoXCJsaWNlbnNlXCIpO1xuICogdGhpcy5keW5hbXNvZnQtYmFyY29kZS1zY2FubmVyLnN0YXJ0U2Nhbm5pbmcoXCJsaWNlbnNlXCIpLnN1YnNjcmliZShyZXN1bHQgPT4ge1xuICAgICBjb25zb2xlLmxvZyhyZXN1bHQpO1xuICAgfSk7XG4gKlxuICogYGBgXG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnZHluYW1zb2Z0LWJhcmNvZGUtc2Nhbm5lcicsXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLWR5bmFtc29mdC1iYXJjb2RlLXJlYWRlcicsXG4gIHBsdWdpblJlZjogJ2NvcmRvdmEucGx1Z2lucy5EQlInLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL3h1bGloYW5nL2NvcmRvdmEtcGx1Z2luLWR5bmFtc29mdC1iYXJjb2RlLXJlYWRlcicsXG4gIGluc3RhbGw6ICcnLFxuICBpbnN0YWxsVmFyaWFibGVzOiBbXSxcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJ10sXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEJhcmNvZGVTY2FubmVyIGV4dGVuZHMgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4ge1xuICAvKipcbiAgICogSW5pdGlhbGl6ZSBEeW5hbXNvZnQgQmFyY29kZSBSZWFkZXJcbiAgICogQHBhcmFtIGxpY2Vuc2Uge3N0cmluZ31cbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gdGhlIGluaXRpYWxpemF0aW9uIGlzIGRvbmVcbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBzdWNjZXNzSW5kZXg6IDEsXG4gICAgZXJyb3JJbmRleDogMixcbiAgfSlcbiAgaW5pdChsaWNlbnNlOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdXAgcnVudGltZSBzZXR0aW5nc1xuICAgKiBAcGFyYW0gc2V0dGluZ3Mge3N0cmluZ30gcnVudGltZSBzZXR0aW5ncyB0ZW1wbGF0ZSBpbiBKU09OXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBzdWNjZXNzSW5kZXg6IDEsXG4gICAgZXJyb3JJbmRleDogMixcbiAgfSlcbiAgaW5pdFJ1bnRpbWVTZXR0aW5nc1dpdGhTdHJpbmcoc2V0dGluZ3M/OiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBPdXRwdXQgcnVudGltZSBzZXR0aW5ncyB0byBKU09OIHN0cmluZ1xuICAgKiBAcmV0dXJuIHtQcm9taXNlPFN0cmluZz59IFJldHVybnMgYSBwcm9taXNlXG4gICAqL1xuICBAQ29yZG92YSh7IHN1Y2Nlc3NJbmRleDogMSwgZXJyb3JJbmRleDogMiB9KVxuICBvdXRwdXRTZXR0aW5nc1RvU3RyaW5nKCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIGRlc3Ryb3kgRHluYW1zb2Z0IEJhcmNvZGUgUmVhZGVyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcbiAgICovXG4gIEBDb3Jkb3ZhKHsgc3VjY2Vzc0luZGV4OiAxLCBlcnJvckluZGV4OiAyIH0pXG4gIGRlc3Ryb3koKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogc3RhcnQgdGhlIGNhbWVyYSB0byBzY2FuIGJhcmNvZGVzXG4gICAqIEBwYXJhbSBkY2VMaWNlbnNlIHtzdHJpbmd9IExpY2Vuc2Ugb2YgRHluYW1zb2Z0IENhbWVyYSBFbmhhbmNlclxuICAgKiBAcmV0dXJuIHtPYnNlcnZhYmxlPEZyYW1lUmVzdWx0Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBzdWNjZXNzSW5kZXg6IDEsXG4gICAgZXJyb3JJbmRleDogMixcbiAgICBvYnNlcnZhYmxlOiB0cnVlLFxuICB9KVxuICBzdGFydFNjYW5uaW5nKGRjZUxpY2Vuc2U/OiBzdHJpbmcpOiBPYnNlcnZhYmxlPEZyYW1lUmVzdWx0PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIHN0b3Agc2Nhbm5pbmdcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxuICAgKi9cbiAgQENvcmRvdmEoeyBzdWNjZXNzSW5kZXg6IDEsIGVycm9ySW5kZXg6IDIgfSlcbiAgc3RvcFNjYW5uaW5nKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIHJlc3VtZSBzY2FubmluZ1xuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXG4gICAqL1xuICBAQ29yZG92YSh7IHN1Y2Nlc3NJbmRleDogMSwgZXJyb3JJbmRleDogMiB9KVxuICByZXN1bWVTY2FubmluZygpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBwYXVzZSBzY2FubmluZ1xuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXG4gICAqL1xuICBAQ29yZG92YSh7IHN1Y2Nlc3NJbmRleDogMSwgZXJyb3JJbmRleDogMiB9KVxuICBwYXVzZVNjYW5uaW5nKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIGdldCByZXNvbHV0aW9uIGxpa2U6IDEyODB4NzIwXG4gICAqIEByZXR1cm4ge1Byb21pc2U8c3RyaW5nPn0gUmV0dXJucyBhIHByb21pc2VcbiAgICovXG4gIEBDb3Jkb3ZhKHsgc3VjY2Vzc0luZGV4OiAxLCBlcnJvckluZGV4OiAyIH0pXG4gIGdldFJlc29sdXRpb24oKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogc3dpdGNoIHRvcmNoXG4gICAqIEBwYXJhbSBkZXNpcmVkU3RhdHVzIHtzdHJpbmd9IG9uIG9yIG9mZlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXG4gICAqL1xuICBAQ29yZG92YSh7IHN1Y2Nlc3NJbmRleDogMSwgZXJyb3JJbmRleDogMiB9KVxuICBzd2l0Y2hUb3JjaChkZXNpcmVkU3RhdHVzOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxufVxuIl19