var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import { Observable } from 'rxjs';
var BarcodeScannerOriginal = /** @class */ (function (_super) {
    __extends(BarcodeScannerOriginal, _super);
    function BarcodeScannerOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BarcodeScannerOriginal.prototype.init = function (license) { return cordova(this, "init", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    BarcodeScannerOriginal.prototype.initRuntimeSettingsWithString = function (settings) { return cordova(this, "initRuntimeSettingsWithString", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    BarcodeScannerOriginal.prototype.outputSettingsToString = function () { return cordova(this, "outputSettingsToString", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    BarcodeScannerOriginal.prototype.destroy = function () { return cordova(this, "destroy", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    BarcodeScannerOriginal.prototype.startScanning = function (dceLicense) { return cordova(this, "startScanning", { "successIndex": 1, "errorIndex": 2, "observable": true }, arguments); };
    BarcodeScannerOriginal.prototype.stopScanning = function () { return cordova(this, "stopScanning", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    BarcodeScannerOriginal.prototype.resumeScanning = function () { return cordova(this, "resumeScanning", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    BarcodeScannerOriginal.prototype.pauseScanning = function () { return cordova(this, "pauseScanning", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    BarcodeScannerOriginal.prototype.getResolution = function () { return cordova(this, "getResolution", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    BarcodeScannerOriginal.prototype.switchTorch = function (desiredStatus) { return cordova(this, "switchTorch", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    BarcodeScannerOriginal.pluginName = "dynamsoft-barcode-scanner";
    BarcodeScannerOriginal.plugin = "cordova-plugin-dynamsoft-barcode-reader";
    BarcodeScannerOriginal.pluginRef = "cordova.plugins.DBR";
    BarcodeScannerOriginal.repo = "https://github.com/xulihang/cordova-plugin-dynamsoft-barcode-reader";
    BarcodeScannerOriginal.install = "";
    BarcodeScannerOriginal.installVariables = [];
    BarcodeScannerOriginal.platforms = ["Android", "iOS"];
    return BarcodeScannerOriginal;
}(AwesomeCordovaNativePlugin));
var BarcodeScanner = new BarcodeScannerOriginal();
export { BarcodeScanner };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvZHluYW1zb2Z0LWJhcmNvZGUtc2Nhbm5lci9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQ0EsT0FBTyx1Q0FPTixNQUFNLCtCQUErQixDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7O0lBcURFLGtDQUEwQjs7OztJQVU1RCw2QkFBSSxhQUFDLE9BQWU7SUFhcEIsc0RBQTZCLGFBQUMsUUFBaUI7SUFTL0MsK0NBQXNCO0lBU3RCLGdDQUFPO0lBY1Asc0NBQWEsYUFBQyxVQUFtQjtJQVNqQyxxQ0FBWTtJQVNaLHVDQUFjO0lBU2Qsc0NBQWE7SUFTYixzQ0FBYTtJQVViLG9DQUFXLGFBQUMsYUFBcUI7Ozs7Ozs7O3lCQW5LbkM7RUE4RG9DLDBCQUEwQjtTQUFqRCxjQUFjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgUGx1Z2luLFxuICBDb3Jkb3ZhLFxuICBDb3Jkb3ZhUHJvcGVydHksXG4gIENvcmRvdmFJbnN0YW5jZSxcbiAgSW5zdGFuY2VQcm9wZXJ0eSxcbiAgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4sXG59IGZyb20gJ0Bhd2Vzb21lLWNvcmRvdmEtcGx1Z2lucy9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuZXhwb3J0IGludGVyZmFjZSBGcmFtZVJlc3VsdCB7XG4gIGZyYW1lV2lkdGg6IG51bWJlcjtcbiAgZnJhbWVIZWlnaHQ6IG51bWJlcjtcbiAgcmVzdWx0czogQmFyY29kZVJlc3VsdFtdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJhcmNvZGVSZXN1bHQge1xuICBiYXJjb2RlVGV4dDogc3RyaW5nO1xuICBiYXJjb2RlRm9ybWF0OiBzdHJpbmc7XG4gIHgxOiBudW1iZXI7XG4gIHgyOiBudW1iZXI7XG4gIHgzOiBudW1iZXI7XG4gIHg0OiBudW1iZXI7XG4gIHkxOiBudW1iZXI7XG4gIHkyOiBudW1iZXI7XG4gIHkzOiBudW1iZXI7XG4gIHk0OiBudW1iZXI7XG59XG5cbi8qKlxuICogQG5hbWUgZHluYW1zb2Z0LWJhcmNvZGUtc2Nhbm5lclxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGlzIHBsdWdpbiBzY2FucyBiYXJjb2RlcyB1c2luZyBEeW5hbXNvZnQgQmFyY29kZSBSZWFkZXJcbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IGR5bmFtc29mdC1iYXJjb2RlLXNjYW5uZXIgfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvZHluYW1zb2Z0LWJhcmNvZGUtc2Nhbm5lcic7XG4gKlxuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgZHluYW1zb2Z0LWJhcmNvZGUtc2Nhbm5lcjogZHluYW1zb2Z0LWJhcmNvZGUtc2Nhbm5lcikgeyB9XG4gKlxuICogLi4uXG4gKlxuICpcbiAqIGF3YWl0IHRoaXMuZHluYW1zb2Z0LWJhcmNvZGUtc2Nhbm5lci5pbml0KFwibGljZW5zZVwiKTtcbiAqIHRoaXMuZHluYW1zb2Z0LWJhcmNvZGUtc2Nhbm5lci5zdGFydFNjYW5uaW5nKFwibGljZW5zZVwiKS5zdWJzY3JpYmUocmVzdWx0ID0+IHtcbiAgICAgY29uc29sZS5sb2cocmVzdWx0KTtcbiAgIH0pO1xuICpcbiAqIGBgYFxuICovXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ2R5bmFtc29mdC1iYXJjb2RlLXNjYW5uZXInLFxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1keW5hbXNvZnQtYmFyY29kZS1yZWFkZXInLFxuICBwbHVnaW5SZWY6ICdjb3Jkb3ZhLnBsdWdpbnMuREJSJyxcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS94dWxpaGFuZy9jb3Jkb3ZhLXBsdWdpbi1keW5hbXNvZnQtYmFyY29kZS1yZWFkZXInLFxuICBpbnN0YWxsOiAnJyxcbiAgaW5zdGFsbFZhcmlhYmxlczogW10sXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddLFxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBCYXJjb2RlU2Nhbm5lciBleHRlbmRzIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luIHtcbiAgLyoqXG4gICAqIEluaXRpYWxpemUgRHluYW1zb2Z0IEJhcmNvZGUgUmVhZGVyXG4gICAqIEBwYXJhbSBsaWNlbnNlIHtzdHJpbmd9XG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHRoZSBpbml0aWFsaXphdGlvbiBpcyBkb25lXG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgc3VjY2Vzc0luZGV4OiAxLFxuICAgIGVycm9ySW5kZXg6IDIsXG4gIH0pXG4gIGluaXQobGljZW5zZTogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogU2V0IHVwIHJ1bnRpbWUgc2V0dGluZ3NcbiAgICogQHBhcmFtIHNldHRpbmdzIHtzdHJpbmd9IHJ1bnRpbWUgc2V0dGluZ3MgdGVtcGxhdGUgaW4gSlNPTlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgc3VjY2Vzc0luZGV4OiAxLFxuICAgIGVycm9ySW5kZXg6IDIsXG4gIH0pXG4gIGluaXRSdW50aW1lU2V0dGluZ3NXaXRoU3RyaW5nKHNldHRpbmdzPzogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogT3V0cHV0IHJ1bnRpbWUgc2V0dGluZ3MgdG8gSlNPTiBzdHJpbmdcbiAgICogQHJldHVybiB7UHJvbWlzZTxTdHJpbmc+fSBSZXR1cm5zIGEgcHJvbWlzZVxuICAgKi9cbiAgQENvcmRvdmEoeyBzdWNjZXNzSW5kZXg6IDEsIGVycm9ySW5kZXg6IDIgfSlcbiAgb3V0cHV0U2V0dGluZ3NUb1N0cmluZygpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBkZXN0cm95IER5bmFtc29mdCBCYXJjb2RlIFJlYWRlclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXG4gICAqL1xuICBAQ29yZG92YSh7IHN1Y2Nlc3NJbmRleDogMSwgZXJyb3JJbmRleDogMiB9KVxuICBkZXN0cm95KCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIHN0YXJ0IHRoZSBjYW1lcmEgdG8gc2NhbiBiYXJjb2Rlc1xuICAgKiBAcGFyYW0gZGNlTGljZW5zZSB7c3RyaW5nfSBMaWNlbnNlIG9mIER5bmFtc29mdCBDYW1lcmEgRW5oYW5jZXJcbiAgICogQHJldHVybiB7T2JzZXJ2YWJsZTxGcmFtZVJlc3VsdD59XG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgc3VjY2Vzc0luZGV4OiAxLFxuICAgIGVycm9ySW5kZXg6IDIsXG4gICAgb2JzZXJ2YWJsZTogdHJ1ZSxcbiAgfSlcbiAgc3RhcnRTY2FubmluZyhkY2VMaWNlbnNlPzogc3RyaW5nKTogT2JzZXJ2YWJsZTxGcmFtZVJlc3VsdD4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBzdG9wIHNjYW5uaW5nXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcbiAgICovXG4gIEBDb3Jkb3ZhKHsgc3VjY2Vzc0luZGV4OiAxLCBlcnJvckluZGV4OiAyIH0pXG4gIHN0b3BTY2FubmluZygpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiByZXN1bWUgc2Nhbm5pbmdcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxuICAgKi9cbiAgQENvcmRvdmEoeyBzdWNjZXNzSW5kZXg6IDEsIGVycm9ySW5kZXg6IDIgfSlcbiAgcmVzdW1lU2Nhbm5pbmcoKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogcGF1c2Ugc2Nhbm5pbmdcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxuICAgKi9cbiAgQENvcmRvdmEoeyBzdWNjZXNzSW5kZXg6IDEsIGVycm9ySW5kZXg6IDIgfSlcbiAgcGF1c2VTY2FubmluZygpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBnZXQgcmVzb2x1dGlvbiBsaWtlOiAxMjgweDcyMFxuICAgKiBAcmV0dXJuIHtQcm9taXNlPHN0cmluZz59IFJldHVybnMgYSBwcm9taXNlXG4gICAqL1xuICBAQ29yZG92YSh7IHN1Y2Nlc3NJbmRleDogMSwgZXJyb3JJbmRleDogMiB9KVxuICBnZXRSZXNvbHV0aW9uKCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIHN3aXRjaCB0b3JjaFxuICAgKiBAcGFyYW0gZGVzaXJlZFN0YXR1cyB7c3RyaW5nfSBvbiBvciBvZmZcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxuICAgKi9cbiAgQENvcmRvdmEoeyBzdWNjZXNzSW5kZXg6IDEsIGVycm9ySW5kZXg6IDIgfSlcbiAgc3dpdGNoVG9yY2goZGVzaXJlZFN0YXR1czogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cbn1cbiJdfQ==