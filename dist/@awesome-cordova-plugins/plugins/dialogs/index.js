var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var DialogsOriginal = /** @class */ (function (_super) {
    __extends(DialogsOriginal, _super);
    function DialogsOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DialogsOriginal.prototype.alert = function (message, title, buttonName) { return cordova(this, "alert", { "successIndex": 1, "errorIndex": 4 }, arguments); };
    DialogsOriginal.prototype.confirm = function (message, title, buttonLabels) { return cordova(this, "confirm", { "successIndex": 1, "errorIndex": 4 }, arguments); };
    DialogsOriginal.prototype.prompt = function (message, title, buttonLabels, defaultText) { return cordova(this, "prompt", { "successIndex": 1, "errorIndex": 5 }, arguments); };
    DialogsOriginal.prototype.beep = function (times) { return cordova(this, "beep", { "sync": true }, arguments); };
    DialogsOriginal.pluginName = "Dialogs";
    DialogsOriginal.plugin = "cordova-plugin-dialogs";
    DialogsOriginal.pluginRef = "navigator.notification";
    DialogsOriginal.repo = "https://github.com/apache/cordova-plugin-dialogs";
    DialogsOriginal.platforms = ["Amazon Fire OS", "Android", "Browser", "iOS", "Windows"];
    return DialogsOriginal;
}(AwesomeCordovaNativePlugin));
var Dialogs = new DialogsOriginal();
export { Dialogs };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvZGlhbG9ncy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQ0EsT0FBTyx1Q0FBK0MsTUFBTSwrQkFBK0IsQ0FBQzs7SUE4Qy9ELDJCQUEwQjs7OztJQWFyRCx1QkFBSyxhQUFDLE9BQWUsRUFBRSxLQUFjLEVBQUUsVUFBbUI7SUFnQjFELHlCQUFPLGFBQUMsT0FBZSxFQUFFLEtBQWMsRUFBRSxZQUF1QjtJQWlCaEUsd0JBQU0sYUFDSixPQUFnQixFQUNoQixLQUFjLEVBQ2QsWUFBdUIsRUFDdkIsV0FBb0I7SUFhdEIsc0JBQUksYUFBQyxLQUFhOzs7Ozs7a0JBOUdwQjtFQStDNkIsMEJBQTBCO1NBQTFDLE9BQU8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb3Jkb3ZhLCBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL2NvcmUnO1xuXG5leHBvcnQgaW50ZXJmYWNlIERpYWxvZ3NQcm9tcHRDYWxsYmFjayB7XG4gIC8qKlxuICAgKiBUaGUgaW5kZXggb2YgdGhlIHByZXNzZWQgYnV0dG9uLiAoTnVtYmVyKSBOb3RlIHRoYXQgdGhlIGluZGV4IHVzZXMgb25lLWJhc2VkIGluZGV4aW5nLCBzbyB0aGUgdmFsdWUgaXMgMSwgMiwgMywgZXRjLlxuICAgKi9cbiAgYnV0dG9uSW5kZXg6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIHRleHQgZW50ZXJlZCBpbiB0aGUgcHJvbXB0IGRpYWxvZyBib3guIChTdHJpbmcpXG4gICAqL1xuICBpbnB1dDE6IHN0cmluZztcbn1cblxuLyoqXG4gKiBAbmFtZSBEaWFsb2dzXG4gKiBAcHJlbWllciBkaWFsb2dzXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoaXMgcGx1Z2luIGdpdmVzIHlvdSBhYmlsaXR5IHRvIGFjY2VzcyBhbmQgY3VzdG9taXplIHRoZSBkZXZpY2UgbmF0aXZlIGRpYWxvZ3MuXG4gKlxuICogUmVxdWlyZXMgQ29yZG92YSBwbHVnaW46IGBjb3Jkb3ZhLXBsdWdpbi1kaWFsb2dzYC4gRm9yIG1vcmUgaW5mbywgcGxlYXNlIHNlZSB0aGUgW0RpYWxvZ3MgcGx1Z2luIGRvY3NdKGh0dHBzOi8vZ2l0aHViLmNvbS9hcGFjaGUvY29yZG92YS1wbHVnaW4tZGlhbG9ncykuXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IERpYWxvZ3MgfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvZGlhbG9ncy9uZ3gnO1xuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgZGlhbG9nczogRGlhbG9ncykgeyB9XG4gKlxuICogLi4uXG4gKlxuICogdGhpcy5kaWFsb2dzLmFsZXJ0KCdIZWxsbyB3b3JsZCcpXG4gKiAgIC50aGVuKCgpID0+IGNvbnNvbGUubG9nKCdEaWFsb2cgZGlzbWlzc2VkJykpXG4gKiAgIC5jYXRjaChlID0+IGNvbnNvbGUubG9nKCdFcnJvciBkaXNwbGF5aW5nIGRpYWxvZycsIGUpKTtcbiAqXG4gKlxuICogYGBgXG4gKiBAaW50ZXJmYWNlc1xuICogRGlhbG9nc1Byb21wdENhbGxiYWNrXG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnRGlhbG9ncycsXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLWRpYWxvZ3MnLFxuICBwbHVnaW5SZWY6ICduYXZpZ2F0b3Iubm90aWZpY2F0aW9uJyxcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9hcGFjaGUvY29yZG92YS1wbHVnaW4tZGlhbG9ncycsXG4gIHBsYXRmb3JtczogWydBbWF6b24gRmlyZSBPUycsICdBbmRyb2lkJywgJ0Jyb3dzZXInLCAnaU9TJywgJ1dpbmRvd3MnXSxcbn0pXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgRGlhbG9ncyBleHRlbmRzIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luIHtcbiAgLyoqXG4gICAqIFNob3dzIGEgY3VzdG9tIGFsZXJ0IG9yIGRpYWxvZyBib3guXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIERpYWxvZyBtZXNzYWdlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW3RpdGxlXSBEaWFsb2cgdGl0bGUuIChPcHRpb25hbCwgZGVmYXVsdHMgdG8gQWxlcnQpXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbYnV0dG9uTmFtZV0gQnV0dG9uIG5hbWUuIChPcHRpb25hbCwgZGVmYXVsdHMgdG8gT0spXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBibGFuayBwcm9taXNlIG9uY2UgdGhlIHVzZXIgaGFzIGRpc21pc3NlZCB0aGUgYWxlcnQuXG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgc3VjY2Vzc0luZGV4OiAxLFxuICAgIGVycm9ySW5kZXg6IDQsXG4gIH0pXG4gIGFsZXJ0KG1lc3NhZ2U6IHN0cmluZywgdGl0bGU/OiBzdHJpbmcsIGJ1dHRvbk5hbWU/OiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBEaXNwbGF5cyBhIGN1c3RvbWl6YWJsZSBjb25maXJtYXRpb24gZGlhbG9nIGJveC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgRGlhbG9nIG1lc3NhZ2UuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbdGl0bGVdIERpYWxvZyB0aXRsZS4gKE9wdGlvbmFsLCBkZWZhdWx0cyB0byBDb25maXJtKVxuICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBbYnV0dG9uTGFiZWxzXSBBcnJheSBvZiBzdHJpbmdzIHNwZWNpZnlpbmcgYnV0dG9uIGxhYmVscy4gKE9wdGlvbmFsLCBkZWZhdWx0cyB0byBbT0ssQ2FuY2VsXSlcbiAgICogQHJldHVybnMge1Byb21pc2U8bnVtYmVyPn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB0aGUgYnV0dG9uIGluZGV4IHRoYXQgd2FzIGNsaWNrZWQsIG9yIDAgaWYgdGhlIHVzZXIgaGFzIGRpc21pc3NlZCB0aGUgZGlhbG9nIGJ5IGNsaWNraW5nIG91dHNpZGUgdGhlIGRpYWxvZyBib3guIE5vdGUgdGhhdCB0aGUgaW5kZXggdXNlIG9uZS1iYXNlZCBpbmRleGluZy5cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBzdWNjZXNzSW5kZXg6IDEsXG4gICAgZXJyb3JJbmRleDogNCxcbiAgfSlcbiAgY29uZmlybShtZXNzYWdlOiBzdHJpbmcsIHRpdGxlPzogc3RyaW5nLCBidXR0b25MYWJlbHM/OiBzdHJpbmdbXSk6IFByb21pc2U8bnVtYmVyPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIERpc3BsYXlzIGEgbmF0aXZlIGRpYWxvZyBib3ggdGhhdCBpcyBtb3JlIGN1c3RvbWl6YWJsZSB0aGFuIHRoZSBicm93c2VyJ3MgcHJvbXB0IGZ1bmN0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW21lc3NhZ2VdIERpYWxvZyBtZXNzYWdlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW3RpdGxlXSBEaWFsb2cgdGl0bGUuIChPcHRpb25hbCwgZGVmYXVsdHMgdG8gUHJvbXB0KVxuICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBbYnV0dG9uTGFiZWxzXSAgQXJyYXkgb2Ygc3RyaW5ncyBzcGVjaWZ5aW5nIGJ1dHRvbiBsYWJlbHMuIChPcHRpb25hbCwgZGVmYXVsdHMgdG8gW1wiT0tcIixcIkNhbmNlbFwiXSlcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtkZWZhdWx0VGV4dF0gRGVmYXVsdCB0ZXh0IGJveCBpbnB1dCB2YWx1ZS4gIChPcHRpb25hbCwgRGVmYXVsdDogZW1wdHkgc3RyaW5nKVxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxEaWFsb2dzUHJvbXB0Q2FsbGJhY2s+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIGFuIG9iamVjdCB3aXRoIHRoZSBidXR0b24gaW5kZXggY2xpY2tlZCBhbmQgdGhlIHRleHQgZW50ZXJlZFxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIHN1Y2Nlc3NJbmRleDogMSxcbiAgICBlcnJvckluZGV4OiA1LFxuICB9KVxuICBwcm9tcHQoXG4gICAgbWVzc2FnZT86IHN0cmluZyxcbiAgICB0aXRsZT86IHN0cmluZyxcbiAgICBidXR0b25MYWJlbHM/OiBzdHJpbmdbXSxcbiAgICBkZWZhdWx0VGV4dD86IHN0cmluZ1xuICApOiBQcm9taXNlPERpYWxvZ3NQcm9tcHRDYWxsYmFjaz4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgZGV2aWNlIHBsYXlzIGEgYmVlcCBzb3VuZC5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJzfSB0aW1lcyBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIHJlcGVhdCB0aGUgYmVlcC5cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBzeW5jOiB0cnVlLFxuICB9KVxuICBiZWVwKHRpbWVzOiBudW1iZXIpOiB2b2lkIHt9XG59XG4iXX0=