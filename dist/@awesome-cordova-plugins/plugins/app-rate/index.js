var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova, cordovaPropertyGet, cordovaPropertySet } from '@awesome-cordova-plugins/core';
export var AppRateReviewTypeIos;
(function (AppRateReviewTypeIos) {
    /**
     * Write review directly in your application (iOS 10.3+), limited to 3 prompts per year.
     * Will fallback to 'AppStoreReview' for other iOS versions
     */
    AppRateReviewTypeIos["InAppReview"] = "InAppReview";
    /**
     * Open the store within the app. Use this option as an alternative to inAppReview to avoid the rate action from doing nothing
     */
    AppRateReviewTypeIos["AppStoreReview"] = "AppStoreReview";
    /**
     * Open the store using the openUrl preference (defaults to InAppBrowser). Be advised that WKWebView might not open the app store links
     */
    AppRateReviewTypeIos["InAppBrowser"] = "InAppBrowser";
})(AppRateReviewTypeIos || (AppRateReviewTypeIos = {}));
export var AppRateReviewTypeAndroid;
(function (AppRateReviewTypeAndroid) {
    /**
     * Write review directly in your application. Will fallback to InAppBrowser if not available
     */
    AppRateReviewTypeAndroid["InAppReview"] = "InAppReview";
    /**
     *  Open the store using the openUrl preference (defaults to InAppBrowser)
     */
    AppRateReviewTypeAndroid["InAppBrowser"] = "InAppBrowser";
})(AppRateReviewTypeAndroid || (AppRateReviewTypeAndroid = {}));
export var AppRatePromptType;
(function (AppRatePromptType) {
    /**
     * Prompt asking to rate the app.
     */
    AppRatePromptType["AppRatingPrompt"] = "AppRatingPrompt";
    /**
     * Prompt asking to rate the app within the store.
     */
    AppRatePromptType["StoreRatingPrompt"] = "StoreRatingPrompt";
    /**
     * Prompt asking to give feedback.
     */
    AppRatePromptType["FeedbackPrompt"] = "FeedbackPrompt";
})(AppRatePromptType || (AppRatePromptType = {}));
var AppRateOriginal = /** @class */ (function (_super) {
    __extends(AppRateOriginal, _super);
    function AppRateOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AppRateOriginal.prototype.setPreferences = function (pref) { return cordova(this, "setPreferences", {}, arguments); };
    AppRateOriginal.prototype.getPreferences = function () { return cordova(this, "getPreferences", {}, arguments); };
    AppRateOriginal.prototype.promptForRating = function (immediately) { return cordova(this, "promptForRating", {}, arguments); };
    AppRateOriginal.prototype.navigateToAppStore = function () { return cordova(this, "navigateToAppStore", {}, arguments); };
    Object.defineProperty(AppRateOriginal.prototype, "locales", {
        get: function () { return cordovaPropertyGet(this, "locales"); },
        set: function (value) { cordovaPropertySet(this, "locales", value); },
        enumerable: false,
        configurable: true
    });
    AppRateOriginal.pluginName = "AppRate";
    AppRateOriginal.plugin = "cordova-plugin-apprate";
    AppRateOriginal.pluginRef = "AppRate";
    AppRateOriginal.repo = "https://github.com/pushandplay/cordova-plugin-apprate";
    AppRateOriginal.platforms = ["Android", "BlackBerry 10", "iOS", "Windows"];
    return AppRateOriginal;
}(AwesomeCordovaNativePlugin));
var AppRate = new AppRateOriginal();
export { AppRate };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvYXBwLXJhdGUvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUNBLE9BQU8sK0VBQWdFLE1BQU0sK0JBQStCLENBQUM7QUFFN0csTUFBTSxDQUFOLElBQVksb0JBY1g7QUFkRCxXQUFZLG9CQUFvQjtJQUM5Qjs7O09BR0c7SUFDSCxtREFBMkIsQ0FBQTtJQUMzQjs7T0FFRztJQUNILHlEQUFpQyxDQUFBO0lBQ2pDOztPQUVHO0lBQ0gscURBQTZCLENBQUE7QUFDL0IsQ0FBQyxFQWRXLG9CQUFvQixLQUFwQixvQkFBb0IsUUFjL0I7QUFFRCxNQUFNLENBQU4sSUFBWSx3QkFTWDtBQVRELFdBQVksd0JBQXdCO0lBQ2xDOztPQUVHO0lBQ0gsdURBQTJCLENBQUE7SUFDM0I7O09BRUc7SUFDSCx5REFBNkIsQ0FBQTtBQUMvQixDQUFDLEVBVFcsd0JBQXdCLEtBQXhCLHdCQUF3QixRQVNuQztBQUVELE1BQU0sQ0FBTixJQUFZLGlCQWVYO0FBZkQsV0FBWSxpQkFBaUI7SUFDM0I7O09BRUc7SUFDSCx3REFBbUMsQ0FBQTtJQUVuQzs7T0FFRztJQUNILDREQUF1QyxDQUFBO0lBRXZDOztPQUVHO0lBQ0gsc0RBQWlDLENBQUE7QUFDbkMsQ0FBQyxFQWZXLGlCQUFpQixLQUFqQixpQkFBaUIsUUFlNUI7O0lBOE00QiwyQkFBMEI7Ozs7SUFjckQsZ0NBQWMsYUFBQyxJQUF3QjtJQVV2QyxnQ0FBYztJQVVkLGlDQUFlLGFBQUMsV0FBcUI7SUFRckMsb0NBQWtCOzBCQXJDbEIsNEJBQU87Ozs7Ozs7Ozs7O2tCQWhRVDtFQTJQNkIsMEJBQTBCO1NBQTFDLE9BQU8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb3Jkb3ZhLCBDb3Jkb3ZhUHJvcGVydHksIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvY29yZSc7XG5cbmV4cG9ydCBlbnVtIEFwcFJhdGVSZXZpZXdUeXBlSW9zIHtcbiAgLyoqXG4gICAqIFdyaXRlIHJldmlldyBkaXJlY3RseSBpbiB5b3VyIGFwcGxpY2F0aW9uIChpT1MgMTAuMyspLCBsaW1pdGVkIHRvIDMgcHJvbXB0cyBwZXIgeWVhci5cbiAgICogV2lsbCBmYWxsYmFjayB0byAnQXBwU3RvcmVSZXZpZXcnIGZvciBvdGhlciBpT1MgdmVyc2lvbnNcbiAgICovXG4gIEluQXBwUmV2aWV3ID0gJ0luQXBwUmV2aWV3JyxcbiAgLyoqXG4gICAqIE9wZW4gdGhlIHN0b3JlIHdpdGhpbiB0aGUgYXBwLiBVc2UgdGhpcyBvcHRpb24gYXMgYW4gYWx0ZXJuYXRpdmUgdG8gaW5BcHBSZXZpZXcgdG8gYXZvaWQgdGhlIHJhdGUgYWN0aW9uIGZyb20gZG9pbmcgbm90aGluZ1xuICAgKi9cbiAgQXBwU3RvcmVSZXZpZXcgPSAnQXBwU3RvcmVSZXZpZXcnLFxuICAvKipcbiAgICogT3BlbiB0aGUgc3RvcmUgdXNpbmcgdGhlIG9wZW5VcmwgcHJlZmVyZW5jZSAoZGVmYXVsdHMgdG8gSW5BcHBCcm93c2VyKS4gQmUgYWR2aXNlZCB0aGF0IFdLV2ViVmlldyBtaWdodCBub3Qgb3BlbiB0aGUgYXBwIHN0b3JlIGxpbmtzXG4gICAqL1xuICBJbkFwcEJyb3dzZXIgPSAnSW5BcHBCcm93c2VyJyxcbn1cblxuZXhwb3J0IGVudW0gQXBwUmF0ZVJldmlld1R5cGVBbmRyb2lkIHtcbiAgLyoqXG4gICAqIFdyaXRlIHJldmlldyBkaXJlY3RseSBpbiB5b3VyIGFwcGxpY2F0aW9uLiBXaWxsIGZhbGxiYWNrIHRvIEluQXBwQnJvd3NlciBpZiBub3QgYXZhaWxhYmxlXG4gICAqL1xuICBJbkFwcFJldmlldyA9ICdJbkFwcFJldmlldycsXG4gIC8qKlxuICAgKiAgT3BlbiB0aGUgc3RvcmUgdXNpbmcgdGhlIG9wZW5VcmwgcHJlZmVyZW5jZSAoZGVmYXVsdHMgdG8gSW5BcHBCcm93c2VyKVxuICAgKi9cbiAgSW5BcHBCcm93c2VyID0gJ0luQXBwQnJvd3NlcicsXG59XG5cbmV4cG9ydCBlbnVtIEFwcFJhdGVQcm9tcHRUeXBlIHtcbiAgLyoqXG4gICAqIFByb21wdCBhc2tpbmcgdG8gcmF0ZSB0aGUgYXBwLlxuICAgKi9cbiAgQXBwUmF0aW5nUHJvbXB0ID0gJ0FwcFJhdGluZ1Byb21wdCcsXG5cbiAgLyoqXG4gICAqIFByb21wdCBhc2tpbmcgdG8gcmF0ZSB0aGUgYXBwIHdpdGhpbiB0aGUgc3RvcmUuXG4gICAqL1xuICBTdG9yZVJhdGluZ1Byb21wdCA9ICdTdG9yZVJhdGluZ1Byb21wdCcsXG5cbiAgLyoqXG4gICAqIFByb21wdCBhc2tpbmcgdG8gZ2l2ZSBmZWVkYmFjay5cbiAgICovXG4gIEZlZWRiYWNrUHJvbXB0ID0gJ0ZlZWRiYWNrUHJvbXB0Jyxcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBcHBSYXRlUHJlZmVyZW5jZXMge1xuICAvKipcbiAgICogQ3VzdG9tIEJDUCA0NyBsYW5ndWFnZSB0YWdcbiAgICovXG4gIHVzZUxhbmd1YWdlPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBDdXN0b20gYXBwbGljYXRpb24gdGl0bGVcbiAgICovXG4gIGRpc3BsYXlBcHBOYW1lPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBTaG93IGRpYWxvZyBhZ2FpbiB3aGVuIGFwcGxpY2F0aW9uIHZlcnNpb24gd2lsbCBiZSB1cGRhdGVkLiBEZWZhdWx0cyB0byBgdHJ1ZWBcbiAgICovXG4gIHByb21wdEFnYWluRm9yRWFjaE5ld1ZlcnNpb24/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBjb3VudCBvZiBydW5zIG9mIGFwcGxpY2F0aW9uIGJlZm9yZSBkaWFsb2cgd2lsbCBiZSBkaXNwbGF5ZWQuIERlZmF1bHRzIHRvIGAzYFxuICAgKi9cbiAgdXNlc1VudGlsUHJvbXB0PzogbnVtYmVyO1xuXG4gIHJldmlld1R5cGU/OiB7XG4gICAgLyoqXG4gICAgICogdGhlIHR5cGUgb2YgcmV2aWV3IGRpc3BsYXkgdG8gc2hvdyB0aGUgdXNlciBvbiBpT1NcbiAgICAgKiBEZWZhdWx0OiBBcHBTdG9yZVJldmlld1xuICAgICAqL1xuICAgIGlvcz86IEFwcFJhdGVSZXZpZXdUeXBlSW9zO1xuICAgIC8qKlxuICAgICAqIHRoZSB0eXBlIG9mIHJldmlldyBkaXNwbGF5IHRvIHNob3cgdGhlIHVzZXIgb24gQW5kcm9pZFxuICAgICAqIERlZmF1bHQ6IEluQXBwQnJvd3NlclxuICAgICAqL1xuICAgIGFuZHJvaWQ/OiBBcHBSYXRlUmV2aWV3VHlwZUFuZHJvaWQ7XG4gIH07XG5cbiAgLyoqXG4gICAqIFNpbXBsZSBNb2RlIHRvIGRpc3BsYXkgdGhlIHJhdGUgZGlhbG9nIGRpcmVjdGx5IGFuZCBieXBhc3MgbmVnYXRpdmUgZmVlZGJhY2sgZmlsdGVyaW5nIGZsb3dcbiAgICovXG4gIHNpbXBsZU1vZGU/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBEaXNhYmxpbmcgd291bGQgc2tpcCBkaXNwbGF5aW5nIGEgcmF0ZSBkaWFsb2cgaWYgaW4gYXBwIHJldmlldyBpcyBzZXQgYW5kIGF2YWlsYWJsZS4gRGVmYXVsdHMgdG8gYHRydWVgXG4gICAqL1xuICBzaG93UHJvbXB0Rm9ySW5BcHBSZXZpZXc/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBDdXN0b20gbG9jYWxlIG9iamVjdFxuICAgKi9cbiAgY3VzdG9tTG9jYWxlPzogQXBwUmF0ZUN1c3RvbUxvY2FsZTtcblxuICAvKipcbiAgICogQ2FsbGJhY2tzIGZvciBldmVudHNcbiAgICovXG4gIGNhbGxiYWNrcz86IEFwcFJhdGVDYWxsYmFja3M7XG5cbiAgLyoqXG4gICAqIEFwcCBTdG9yZSBVUkxTXG4gICAqL1xuICBzdG9yZUFwcFVSTD86IEFwcFVybHM7XG5cbiAgLyoqXG4gICAqIE9wZW4gVVJMIGZ1bmN0aW9uXG4gICAqL1xuICBvcGVuVXJsPzogKHVybDogc3RyaW5nKSA9PiB2b2lkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFwcFJhdGVDdXN0b21Mb2NhbGUge1xuICAvKiogVGl0bGUgKi9cbiAgdGl0bGU/OiBzdHJpbmc7XG5cbiAgLyoqIE1lc3NhZ2UgKi9cbiAgbWVzc2FnZT86IHN0cmluZztcblxuICAvKiogQ2FuY2VsIGJ1dHRvbiBsYWJlbCAqL1xuICBjYW5jZWxCdXR0b25MYWJlbD86IHN0cmluZztcblxuICAvKiogTGF0ZXIgYnV0dG9uIGxhYmVsICovXG4gIGxhdGVyQnV0dG9uTGFiZWw/OiBzdHJpbmc7XG5cbiAgLyoqIFJhdGUgYnV0dG9uIGxhYmVsICovXG4gIHJhdGVCdXR0b25MYWJlbD86IHN0cmluZztcblxuICAvKiogWWVzIGJ1dHRvbiBsYWJlbCAqL1xuICB5ZXNCdXR0b25MYWJlbD86IHN0cmluZztcblxuICAvKiogTm8gYnV0dG9uIGxhYmVsICovXG4gIG5vQnV0dG9uTGFiZWw/OiBzdHJpbmc7XG5cbiAgLyoqIEFwcCByYXRlIHByb21wdCB0aXRsZSAqL1xuICBhcHBSYXRlUHJvbXB0VGl0bGU/OiBzdHJpbmc7XG5cbiAgLyoqIEZlZWRiYWNrIHByb21wdCB0aXRsZSAqL1xuICBmZWVkYmFja1Byb21wdFRpdGxlPzogc3RyaW5nO1xuXG4gIC8qKiBGZWVkYmFjayBwcm9tcHQgbWVzc2FnZSAqL1xuICBhcHBSYXRlUHJvbXB0TWVzc2FnZT86IHN0cmluZztcblxuICAvKiogRmVlZGJhY2sgcHJvbXB0IG1lc3NhZ2UgKi9cbiAgZmVlZGJhY2tQcm9tcHRNZXNzYWdlPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFwcFJhdGVMb2NhbGVzIHtcbiAgYWRkTG9jYWxlKGxvY2FsZU9iamVjdDogQXBwUmF0ZUN1c3RvbUxvY2FsZSk6IEFwcFJhdGVDdXN0b21Mb2NhbGU7XG5cbiAgZ2V0TG9jYWxlKGxhbmd1YWdlOiBzdHJpbmcsIGFwcGxpY2F0aW9uVGl0bGU/OiBzdHJpbmcsIGN1c3RvbUxvY2FsZT86IEFwcFJhdGVDdXN0b21Mb2NhbGUpOiBBcHBSYXRlQ3VzdG9tTG9jYWxlO1xuXG4gIGdldExvY2FsZXNOYW1lcygpOiB7IFtwcm9wOiBzdHJpbmddOiBBcHBSYXRlQ3VzdG9tTG9jYWxlIH07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXBwUmF0ZUNhbGxiYWNrcyB7XG4gIC8qKlxuICAgKiBjYWxsIGJhY2sgZnVuY3Rpb24uIGNhbGxlZCB3aGVuIHVzZXIgY2xpY2tlZCBvbiByYXRlLWRpYWxvZyBidXR0b25zXG4gICAqL1xuICBvbkJ1dHRvbkNsaWNrZWQ/OiAoYnV0dG9uSW5kZXg6IG51bWJlciwgYnV0dG9uTGFiZWw6IHN0cmluZywgcHJvbXB0VHlwZTogQXBwUmF0ZVByb21wdFR5cGUpID0+IHZvaWQ7XG5cbiAgLyoqXG4gICAqIGNhbGwgYmFjayBmdW5jdGlvbi4gY2FsbGVkIHdoZW4gcmF0ZS1kaWFsb2cgc2hvd2luZ1xuICAgKi9cbiAgb25SYXRlRGlhbG9nU2hvdz86IChyYXRlQ2FsbGJhY2s6IChidXR0b25JbmRleDogbnVtYmVyKSA9PiB2b2lkKSA9PiB2b2lkO1xuICAvKipcbiAgICogY2FsbCBiYWNrIGZ1bmN0aW9uLiBjYWxsZWQgd2hlbiB1c2VyIGNsaWNrZWQgb24gbmVnYXRpdmUgZmVlZGJhY2tcbiAgICovXG4gIGhhbmRsZU5lZ2F0aXZlRmVlZGJhY2s/OiAoKSA9PiB2b2lkO1xuXG4gIGRvbmU/OiAoKSA9PiB2b2lkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFwcFVybHMge1xuICAvKipcbiAgICogYXBwbGljYXRpb24gaWQgaW4gQXBwU3RvcmVcbiAgICovXG4gIGlvcz86IHN0cmluZztcblxuICAvKipcbiAgICogYXBwbGljYXRpb24gVVJMIGluIEdvb2dsZVBsYXlcbiAgICovXG4gIGFuZHJvaWQ/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIGFwcGxpY2F0aW9uIFVSTCBpbiBXaW5kb3dzIFN0b3JlXG4gICAqL1xuICB3aW5kb3dzPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBhcHBsaWNhdGlvbiBVUkwgaW4gQXBwV29ybGRcbiAgICovXG4gIGJsYWNrYmVycnk/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIGFwcGxpY2F0aW9uIFVSTCBpbiBXaW5kb3dzU3RvcmVcbiAgICovXG4gIHdpbmRvd3M4Pzogc3RyaW5nO1xufVxuXG4vKipcbiAqIEBuYW1lIEFwcCBSYXRlXG4gKiBAcHJlbWllciBhcHAtcmF0ZVxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgQXBwUmF0ZSBwbHVnaW4gbWFrZXMgaXQgZWFzeSB0byBwcm9tcHQgdGhlIHVzZXIgdG8gcmF0ZSB5b3VyIGFwcCwgZWl0aGVyIG5vdywgbGF0ZXIsIG9yIG5ldmVyLlxuICpcbiAqIFJlcXVpcmVzIENvcmRvdmEgcGx1Z2luOiBjb3Jkb3ZhLXBsdWdpbi1hcHByYXRlLiBGb3IgbW9yZSBpbmZvLCBwbGVhc2Ugc2VlIHRoZSBbQXBwUmF0ZSBwbHVnaW4gZG9jc10oaHR0cHM6Ly9naXRodWIuY29tL3B1c2hhbmRwbGF5L2NvcmRvdmEtcGx1Z2luLWFwcHJhdGUpLlxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBBcHBSYXRlIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL2FwcC1yYXRlL25neCc7XG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSBhcHBSYXRlOiBBcHBSYXRlKSB7IH1cbiAqXG4gKiAuLi5cbiAqIC8vIHNldCBjZXJ0YWluIHByZWZlcmVuY2VzXG4gKiB0aGlzLmFwcFJhdGUuc2V0UHJlZmVyZW5jZXMoe1xuICogICBzdG9yZUFwcFVSTDoge1xuICogICAgIGlvczogJzxhcHBfaWQ+JyxcbiAqICAgICBhbmRyb2lkOiAnbWFya2V0Oi8vZGV0YWlscz9pZD08cGFja2FnZV9uYW1lPicsXG4gKiAgICAgd2luZG93czogJ21zLXdpbmRvd3Mtc3RvcmU6Ly9yZXZpZXcvP1Byb2R1Y3RJZD08c3RvcmVfaWQ+J1xuICogICB9XG4gKiB9KTtcbiAqXG4gKiB0aGlzLmFwcFJhdGUucHJvbXB0Rm9yUmF0aW5nKHRydWUpO1xuICpcbiAqIC8vIG9yLCBvdmVycmlkZSB0aGUgd2hvbGUgcHJlZmVyZW5jZXMgb2JqZWN0XG4gKiB0aGlzLmFwcFJhdGUuc2V0UHJlZmVyZW5jZXMoe1xuICogICB1c2VzVW50aWxQcm9tcHQ6IDMsXG4gKiAgIHN0b3JlQXBwVVJMOiB7XG4gKiAgICBpb3M6ICc8YXBwX2lkPicsXG4gKiAgICBhbmRyb2lkOiAnbWFya2V0Oi8vZGV0YWlscz9pZD08cGFja2FnZV9uYW1lPicsXG4gKiAgICB3aW5kb3dzOiAnbXMtd2luZG93cy1zdG9yZTovL3Jldmlldy8/UHJvZHVjdElkPTxzdG9yZV9pZD4nXG4gKiAgIH1cbiAqIH0pO1xuICpcbiAqIHRoaXMuYXBwUmF0ZS5wcm9tcHRGb3JSYXRpbmcoZmFsc2UpO1xuICogYGBgXG4gKiBAaW50ZXJmYWNlc1xuICogQXBwUmF0ZVByZWZlcmVuY2VzXG4gKiBBcHBVcmxzXG4gKiBBcHBSYXRlQ2FsbGJhY2tzXG4gKiBBcHBSYXRlQ3VzdG9tTG9jYWxcbiAqL1xuQFBsdWdpbih7XG4gIHBsdWdpbk5hbWU6ICdBcHBSYXRlJyxcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tYXBwcmF0ZScsXG4gIHBsdWdpblJlZjogJ0FwcFJhdGUnLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL3B1c2hhbmRwbGF5L2NvcmRvdmEtcGx1Z2luLWFwcHJhdGUnLFxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdCbGFja0JlcnJ5IDEwJywgJ2lPUycsICdXaW5kb3dzJ10sXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEFwcFJhdGUgZXh0ZW5kcyBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiB7XG4gIC8qKlxuICAgKiBNYW5hZ2VyIGN1c3RvbSBsb2NhbGVzXG4gICAqL1xuICBAQ29yZG92YVByb3BlcnR5KClcbiAgbG9jYWxlczogQXBwUmF0ZUxvY2FsZXM7XG5cbiAgLyoqXG4gICAqIFNldCBwcmVmZXJlbmNlc1xuICAgKlxuICAgKiBAcGFyYW0gcHJlZlxuICAgKiBAcmV0dXJucyB2b2lkXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHNldFByZWZlcmVuY2VzKHByZWY6IEFwcFJhdGVQcmVmZXJlbmNlcyk6IHZvaWQge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgcHJlZmVyZW5jZXNcbiAgICpcbiAgICogQHJldHVybnMgQXBwUmF0ZVByZWZlcmVuY2VzXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGdldFByZWZlcmVuY2VzKCk6IEFwcFJhdGVQcmVmZXJlbmNlcyB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFByb21wdHMgdGhlIHVzZXIgZm9yIHJhdGluZ1xuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGltbWVkaWF0ZWx5ICBTaG93IHRoZSByYXRpbmcgcHJvbXB0IGltbWVkaWF0ZWx5LlxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBwcm9tcHRGb3JSYXRpbmcoaW1tZWRpYXRlbHk/OiBib29sZWFuKTogdm9pZCB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIEltbWVkaWF0ZWx5IHNlbmQgdGhlIHVzZXIgdG8gdGhlIGFwcCBzdG9yZSByYXRpbmcgcGFnZVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBuYXZpZ2F0ZVRvQXBwU3RvcmUoKTogdm9pZCB7fVxufVxuIl19