import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var MLKitTranslate = /** @class */ (function (_super) {
    __extends(MLKitTranslate, _super);
    function MLKitTranslate() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MLKitTranslate.prototype.translate = function (text, targetLanguage, sourceLanguage) { return cordova(this, "translate", {}, arguments); };
    MLKitTranslate.prototype.identifyLanguage = function (text) { return cordova(this, "identifyLanguage", {}, arguments); };
    MLKitTranslate.prototype.getDownloadedModels = function () { return cordova(this, "getDownloadedModels", {}, arguments); };
    MLKitTranslate.prototype.getAvailableModels = function () { return cordova(this, "getAvailableModels", {}, arguments); };
    MLKitTranslate.prototype.downloadModel = function (code) { return cordova(this, "downloadModel", {}, arguments); };
    MLKitTranslate.prototype.deleteModel = function (code) { return cordova(this, "deleteModel", {}, arguments); };
    MLKitTranslate.pluginName = "MLKitTranslate";
    MLKitTranslate.plugin = "cordova-plugin-mlkit-translate";
    MLKitTranslate.pluginRef = "MLKitTranslate";
    MLKitTranslate.repo = "https://github.com/rigelglen/cordova-plugin-mlkit-translate";
    MLKitTranslate.platforms = ["Android", "iOS"];
    MLKitTranslate.decorators = [
        { type: Injectable }
    ];
    return MLKitTranslate;
}(AwesomeCordovaNativePlugin));
export { MLKitTranslate };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvbWxraXQtdHJhbnNsYXRlL25neC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLHVDQUErQyxNQUFNLCtCQUErQixDQUFDOztJQStDeEQsa0NBQTBCOzs7O0lBVzVELGtDQUFTLGFBQUMsSUFBWSxFQUFFLGNBQXNCLEVBQUUsY0FBdUI7SUFXdkUseUNBQWdCLGFBQUMsSUFBWTtJQVU3Qiw0Q0FBbUI7SUFVbkIsMkNBQWtCO0lBV2xCLHNDQUFhLGFBQUMsSUFBWTtJQVcxQixvQ0FBVyxhQUFDLElBQVk7Ozs7Ozs7Z0JBakV6QixVQUFVOzt5QkEvQ1g7RUFnRG9DLDBCQUEwQjtTQUFqRCxjQUFjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUGx1Z2luLCBDb3Jkb3ZhLCBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiB9IGZyb20gJ0Bhd2Vzb21lLWNvcmRvdmEtcGx1Z2lucy9jb3JlJztcblxuLyoqXG4gKiBUaGlzIGlzIHRoZSBsYW5ndWFnZSBvYmplY3Qgd2hpY2ggd2lsbCBiZSByZXR1cm5lZCBieSBgZG93bmxvYWRNb2RlbGAsIGBkZWxldGVNb2RlbGAsIGBnZXRBdmFpbGFibGVNb2RlbHNgIGFuZCBgZ2V0RG93bmxvYWRlZE1vZGVsc2AgbWV0aG9kcy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBMYW5ndWFnZU1vZGVsIHtcbiAgLyoqXG4gICAqIEJDUC00NyBsYW5ndWFnZSBjb2RlIG9mIHRoZSBsYW5ndWFnZS4gRm9yIGV4YW1wbGU6IGVuXG4gICAqIEZvciBmdWxsIGxpc3Qgb2YgbGFuZ3VhZ2VzIGNvZGVzLCBzZWUgaHR0cHM6Ly9maXJlYmFzZS5nb29nbGUuY29tL2RvY3MvbWwta2l0L3RyYW5zbGF0aW9uLWxhbmd1YWdlLXN1cHBvcnRcbiAgICovXG4gIGNvZGU6IHN0cmluZztcblxuICAvKipcbiAgICogRGlzcGxheSBuYW1lIG9mIHRoZSBsYW5ndWFnZS4gRm9yIGV4YW1wbGU6IEVuZ2xpc2hcbiAgICovXG4gIGRpc3BsYXlOYW1lOiBzdHJpbmc7XG59XG5cbi8qKlxuICogQG5hbWUgTUxLaXRUcmFuc2xhdGVcbiAqIEBkZXNjcmlwdGlvblxuICogUGx1Z2luIHRoYXQgaW1wbGVtZW50cyBNTEtpdCBUcmFuc2xhdGlvbiBhbmQgTGFuZ3VhZ2UgSWRlbnRpZmljYXRpb24gZmVhdHVyZXMuXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IE1MS2l0VHJhbnNsYXRlIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL21sLWtpdC10cmFuc2xhdGUnO1xuICpcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIG1sa2l0VHJhbnNsYXRlOiBNTEtpdFRyYW5zbGF0ZSkgeyB9XG4gKlxuICogLi4uXG4gKlxuICogdGhpcy5tbGtpdFRyYW5zbGF0ZS50cmFuc2xhdGUoJ0hlbGxvJywgJ2VuJywgJ2VzJylcbiAqICAgLnRoZW4oKHJlc3VsdFRleHQ6IHN0cmluZykgPT4gY29uc29sZS5sb2cocmVzKSlcbiAqICAgLmNhdGNoKChlcnJvcjogc3RyaW5nKSA9PiBjb25zb2xlLmVycm9yKGVycm9yKSk7XG4gKlxuICogQGludGVyZmFjZXNcbiAqIExhbmd1YWdlTW9kZWxcbiAqIGBgYFxuICovXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ01MS2l0VHJhbnNsYXRlJyxcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tbWxraXQtdHJhbnNsYXRlJyxcbiAgcGx1Z2luUmVmOiAnTUxLaXRUcmFuc2xhdGUnLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL3JpZ2VsZ2xlbi9jb3Jkb3ZhLXBsdWdpbi1tbGtpdC10cmFuc2xhdGUnLFxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXSxcbn0pXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTUxLaXRUcmFuc2xhdGUgZXh0ZW5kcyBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiB7XG4gIC8qKlxuICAgKiBUcmFuc2xhdGVzIHRleHQgZnJvbSBvbmUgbGFuZ3VhZ2UgdG8gYW5vdGhlci4gUmVxdWlyZXMgdGhlIHNvdXJjZSBhbmQgdGFyZ2V0IGxhbmd1YWdlcyBuZWVkIHRvIGJlIGRvd25sb2FkZWQuXG4gICAqIElmIG5vdCB0aGUgbGFuZ3VhZ2VzIGFyZSBkb3dubG9hZGVkIGluIHRoZSBiYWNrZ3JvdW5kIGF1dG9tYXRpY2FsbHkuXG4gICAqXG4gICAqIEBwYXJhbSB0ZXh0IHtzdHJpbmd9IHRleHQgdG8gYmUgdHJhbnNsYXRlZFxuICAgKiBAcGFyYW0gdGFyZ2V0TGFuZ3VhZ2Uge3N0cmluZ30gQkNQLTQ3IGxhbmd1YWdlIGNvZGUgb2YgdGhlIGxhbmd1YWdlIHRvIHRyYW5zbGF0ZSB0b1xuICAgKiBAcGFyYW0gc291cmNlTGFuZ3VhZ2Uge3N0cmluZz19IChvcHRpb25hbCkgQkNQLTQ3IGxhbmd1YWdlIGNvZGUgb2YgdGhlIGxhbmd1YWdlIHRvIHRyYW5zbGF0ZSB0by4gSWYgbm90IHByb3ZpZGVkLCBzb3VyY2UgbGFuZ3VhZ2UgaXMgaW5mZXJyZWQgZnJvbSB0ZXh0XG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHN0cmluZz59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgdHJhbnNsYXRlZCB0ZXh0XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHRyYW5zbGF0ZSh0ZXh0OiBzdHJpbmcsIHRhcmdldExhbmd1YWdlOiBzdHJpbmcsIHNvdXJjZUxhbmd1YWdlPzogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB0aGUgbGFuZ3VhZ2Ugb2YgYSBzdHJpbmcgb2YgdGV4dC5cbiAgICpcbiAgICogQHBhcmFtIHRleHQge3N0cmluZ30gdGV4dCB0byBiZSB0cmFuc2xhdGVkXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPExhbmd1YWdlTW9kZWw+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdGhlIGlkZW50aWZpZWQgbGFuZ3VhZ2VcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgaWRlbnRpZnlMYW5ndWFnZSh0ZXh0OiBzdHJpbmcpOiBQcm9taXNlPExhbmd1YWdlTW9kZWw+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogTGlzdCBvZiBsYW5ndWFnZSBtb2RlbHMgdGhhdCBoYXZlIGJlZW4gZG93bmxvYWRlZCB0byB0aGUgZGV2aWNlLlxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxMYW5ndWFnZU1vZGVsW10+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggYW4gYXJyYXkgb2YgbGFuZ3VhZ2VzIHRoYXQgaGF2ZSBiZWVuIGRvd25sb2FkZWQuXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGdldERvd25sb2FkZWRNb2RlbHMoKTogUHJvbWlzZTxMYW5ndWFnZU1vZGVsW10+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogTGlzdCBvZiBsYW5ndWFnZSBtb2RlbHMgdGhhdCBjYW4gYmUgZG93bmxvYWRlZC5cbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2U8TGFuZ3VhZ2VNb2RlbFtdPn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIGFuIGFycmF5IG9mIHBvc3NpYmxlIGxhbmd1YWdlcyB0aGF0IGNhbiBiZSBkb3dubG9hZGVkLlxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBnZXRBdmFpbGFibGVNb2RlbHMoKTogUHJvbWlzZTxMYW5ndWFnZU1vZGVsW10+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogRG93bmxvYWRzIGEgc3BlY2lmaWVkIGxhbmd1YWdlIG1vZGVsLlxuICAgKlxuICAgKiBAcGFyYW0gY29kZSB7c3RyaW5nfSBCQ1AtNDcgbGFuZ3VhZ2UgY29kZSBvZiB0aGUgbGFuZ3VhZ2UgdG8gZG93bmxvYWRcbiAgICogQHJldHVybnMge1Byb21pc2U8TGFuZ3VhZ2VNb2RlbD59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgZG93bmxvYWRlZCBsYW5ndWFnZS5cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgZG93bmxvYWRNb2RlbChjb2RlOiBzdHJpbmcpOiBQcm9taXNlPExhbmd1YWdlTW9kZWw+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogRGVsZXRlcyBhIHNwZWNpZmllZCBsYW5ndWFnZSBtb2RlbC5cbiAgICpcbiAgICogQHBhcmFtIGNvZGUge3N0cmluZ30gQkNQLTQ3IGxhbmd1YWdlIGNvZGUgb2YgdGhlIGxhbmd1YWdlIHRvIGRlbGV0ZVxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxMYW5ndWFnZU1vZGVsPn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSBkZWxldGVkIGxhbmd1YWdlLlxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBkZWxldGVNb2RlbChjb2RlOiBzdHJpbmcpOiBQcm9taXNlPExhbmd1YWdlTW9kZWw+IHtcbiAgICByZXR1cm47XG4gIH1cbn1cbiJdfQ==