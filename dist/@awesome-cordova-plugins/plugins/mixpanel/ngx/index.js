import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var Mixpanel = /** @class */ (function (_super) {
    __extends(Mixpanel, _super);
    function Mixpanel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Mixpanel.prototype.alias = function (aliasId, originalId) { return cordova(this, "alias", {}, arguments); };
    Mixpanel.prototype.distinctId = function () { return cordova(this, "distinctId", {}, arguments); };
    Mixpanel.prototype.flush = function () { return cordova(this, "flush", {}, arguments); };
    Mixpanel.prototype.identify = function (distinctId, usePeople) { return cordova(this, "identify", {}, arguments); };
    Mixpanel.prototype.init = function (token) { return cordova(this, "init", {}, arguments); };
    Mixpanel.prototype.getSuperProperties = function () { return cordova(this, "getSuperProperties", {}, arguments); };
    Mixpanel.prototype.registerSuperProperties = function (superProperties) { return cordova(this, "registerSuperProperties", {}, arguments); };
    Mixpanel.prototype.registerSuperPropertiesOnce = function (superProperties) { return cordova(this, "registerSuperPropertiesOnce", {}, arguments); };
    Mixpanel.prototype.unregisterSuperProperty = function (superPropertyName) { return cordova(this, "unregisterSuperProperty", {}, arguments); };
    Mixpanel.prototype.reset = function () { return cordova(this, "reset", {}, arguments); };
    Mixpanel.prototype.timeEvent = function (eventName) { return cordova(this, "timeEvent", {}, arguments); };
    Mixpanel.prototype.track = function (eventName, eventProperties) { return cordova(this, "track", { "successIndex": 2, "errorIndex": 3 }, arguments); };
    Mixpanel.pluginName = "Mixpanel";
    Mixpanel.plugin = "cordova-plugin-mixpanel";
    Mixpanel.pluginRef = "mixpanel";
    Mixpanel.repo = "https://github.com/samzilverberg/cordova-mixpanel-plugin";
    Mixpanel.platforms = ["Android", "Browser", "iOS"];
    Mixpanel.decorators = [
        { type: Injectable }
    ];
    return Mixpanel;
}(AwesomeCordovaNativePlugin));
export { Mixpanel };
var MixpanelPeople = /** @class */ (function (_super) {
    __extends(MixpanelPeople, _super);
    function MixpanelPeople() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MixpanelPeople.prototype.append = function (appendObject) { return cordova(this, "append", {}, arguments); };
    MixpanelPeople.prototype.deleteUser = function () { return cordova(this, "deleteUser", {}, arguments); };
    MixpanelPeople.prototype.identify = function (distinctId) { return cordova(this, "identify", {}, arguments); };
    MixpanelPeople.prototype.increment = function (peopleProperties) { return cordova(this, "increment", {}, arguments); };
    MixpanelPeople.prototype.setPushId = function (pushId) { return cordova(this, "setPushId", {}, arguments); };
    MixpanelPeople.prototype.set = function (peopleProperties) { return cordova(this, "set", {}, arguments); };
    MixpanelPeople.prototype.setOnce = function (peopleProperties) { return cordova(this, "setOnce", {}, arguments); };
    MixpanelPeople.prototype.trackCharge = function (amount, chargeProperties) { return cordova(this, "trackCharge", {}, arguments); };
    MixpanelPeople.prototype.unset = function (propertiesArray) { return cordova(this, "unset", {}, arguments); };
    MixpanelPeople.prototype.union = function (unionObject) { return cordova(this, "union", {}, arguments); };
    MixpanelPeople.plugin = "cordova-plugin-mixpanel";
    MixpanelPeople.pluginRef = "mixpanel.people";
    MixpanelPeople.pluginName = "Mixpanel";
    MixpanelPeople.decorators = [
        { type: Injectable }
    ];
    return MixpanelPeople;
}(AwesomeCordovaNativePlugin));
export { MixpanelPeople };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvbWl4cGFuZWwvbmd4L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sdUNBQStDLE1BQU0sK0JBQStCLENBQUM7O0lBZ0M5RCw0QkFBMEI7Ozs7SUFTdEQsd0JBQUssYUFBQyxPQUFlLEVBQUUsVUFBbUI7SUFTMUMsNkJBQVU7SUFRVix3QkFBSztJQVlMLDJCQUFRLGFBQUMsVUFBa0IsRUFBRSxTQUFtQjtJQVVoRCx1QkFBSSxhQUFDLEtBQWE7SUFTbEIscUNBQWtCO0lBVWxCLDBDQUF1QixhQUFDLGVBQW9CO0lBVTVDLDhDQUEyQixhQUFDLGVBQW9CO0lBVWhELDBDQUF1QixhQUFDLGlCQUF5QjtJQVNqRCx3QkFBSztJQVVMLDRCQUFTLGFBQUMsU0FBaUI7SUFjM0Isd0JBQUssYUFBQyxTQUFpQixFQUFFLGVBQXFCOzs7Ozs7O2dCQXpIL0MsVUFBVTs7bUJBaENYO0VBaUM4QiwwQkFBMEI7U0FBM0MsUUFBUTs7SUFzSWUsa0NBQTBCOzs7O0lBTzVELCtCQUFNLGFBQUMsWUFBaUI7SUFTeEIsbUNBQVU7SUFXVixpQ0FBUSxhQUFDLFVBQWtCO0lBVTNCLGtDQUFTLGFBQUMsZ0JBQXFCO0lBVS9CLGtDQUFTLGFBQUMsTUFBYztJQVV4Qiw0QkFBRyxhQUFDLGdCQUFxQjtJQVV6QixnQ0FBTyxhQUFDLGdCQUFxQjtJQVc3QixvQ0FBVyxhQUFDLE1BQWMsRUFBRSxnQkFBcUI7SUFVakQsOEJBQUssYUFBQyxlQUF5QjtJQVUvQiw4QkFBSyxhQUFDLFdBQWdCOzs7OztnQkFuR3ZCLFVBQVU7O3lCQXRLWDtFQXVLb0MsMEJBQTBCO1NBQWpELGNBQWMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb3Jkb3ZhLCBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL2NvcmUnO1xuXG5kZWNsYXJlIGxldCBtaXhwYW5lbDogYW55O1xuXG4vKipcbiAqIEBuYW1lIE1peHBhbmVsXG4gKiBAZGVzY3JpcHRpb25cbiAqIENvcmRvdmEgUGx1Z2luIHRoYXQgd3JhcHMgTWl4cGFuZWwgU0RLIGZvciBBbmRyb2lkIGFuZCBpT1NcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgTWl4cGFuZWwgfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvbWl4cGFuZWwvbmd4JztcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIG1peHBhbmVsOiBNaXhwYW5lbCwgcHJpdmF0ZSBtaXhwYW5lbFBlb3BsZTogTWl4cGFuZWxQZW9wbGUpIHsgfVxuICpcbiAqIC4uLlxuICpcbiAqIHRoaXMubWl4cGFuZWwuaW5pdCh0b2tlbilcbiAqICAgLnRoZW4ob25TdWNjZXNzKVxuICogICAuY2F0Y2gob25FcnJvcik7XG4gKlxuICogYGBgXG4gKiBAY2xhc3Nlc1xuICogTWl4cGFuZWxQZW9wbGVcbiAqL1xuQFBsdWdpbih7XG4gIHBsdWdpbk5hbWU6ICdNaXhwYW5lbCcsXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLW1peHBhbmVsJyxcbiAgcGx1Z2luUmVmOiAnbWl4cGFuZWwnLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL3NhbXppbHZlcmJlcmcvY29yZG92YS1taXhwYW5lbC1wbHVnaW4nLFxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdCcm93c2VyJywgJ2lPUyddLFxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBNaXhwYW5lbCBleHRlbmRzIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luIHtcbiAgLyoqXG4gICAqIElmIG9yaWdpbmFsSWQgaXMgb21pdHRlZCwgYWxpYXNJZCB3aWxsIGJlIHVzZWQgYXMgb3JpZ2luYWxJZC5cbiAgICpcbiAgICogQHBhcmFtIGFsaWFzSWQge3N0cmluZ31cbiAgICogQHBhcmFtIG9yaWdpbmFsSWQge3N0cmluZ31cbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgYWxpYXMoYWxpYXNJZDogc3RyaW5nLCBvcmlnaW5hbElkPzogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgZGlzdGluY3RJZCgpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBmbHVzaCgpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgdXNlUGVvcGxlIHBhcmFtZXRlciBpcyB1c2VkIGZvciB0aGUgaU9TIE1peHBhbmVsIFNESy5cbiAgICpcbiAgICogQHBhcmFtIGRpc3RpbmN0SWQge3N0cmluZ31cbiAgICogQHBhcmFtIHVzZVBlb3BsZSB7Ym9vbGVhbn1cbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgaWRlbnRpZnkoZGlzdGluY3RJZDogc3RyaW5nLCB1c2VQZW9wbGU/OiBib29sZWFuKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHRva2VuIHtzdHJpbmd9XG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGluaXQodG9rZW46IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGdldFN1cGVyUHJvcGVydGllcygpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0gc3VwZXJQcm9wZXJ0aWVzIHthbnl9XG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHJlZ2lzdGVyU3VwZXJQcm9wZXJ0aWVzKHN1cGVyUHJvcGVydGllczogYW55KTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHN1cGVyUHJvcGVydGllcyB7YW55fVxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICByZWdpc3RlclN1cGVyUHJvcGVydGllc09uY2Uoc3VwZXJQcm9wZXJ0aWVzOiBhbnkpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0gc3VwZXJQcm9wZXJ0eU5hbWUge3N0cmluZ31cbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgdW5yZWdpc3RlclN1cGVyUHJvcGVydHkoc3VwZXJQcm9wZXJ0eU5hbWU6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHJlc2V0KCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSBldmVudE5hbWUge3N0cmluZ31cbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgdGltZUV2ZW50KGV2ZW50TmFtZTogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIGV2ZW50TmFtZSB7c3RyaW5nfVxuICAgKiBAcGFyYW0gZXZlbnRQcm9wZXJ0aWVzIHthbnl9IG9wdGlvbmFsXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgc3VjY2Vzc0luZGV4OiAyLFxuICAgIGVycm9ySW5kZXg6IDMsXG4gIH0pXG4gIHRyYWNrKGV2ZW50TmFtZTogc3RyaW5nLCBldmVudFByb3BlcnRpZXM/OiBhbnkpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxufVxuXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuQFBsdWdpbih7XG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLW1peHBhbmVsJyxcbiAgcGx1Z2luUmVmOiAnbWl4cGFuZWwucGVvcGxlJyxcbiAgcGx1Z2luTmFtZTogJ01peHBhbmVsJyxcbn0pXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTWl4cGFuZWxQZW9wbGUgZXh0ZW5kcyBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiB7XG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0gYXBwZW5kT2JqZWN0IHthbnl9XG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGFwcGVuZChhcHBlbmRPYmplY3Q6IGFueSk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGRlbGV0ZVVzZXIoKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIGRpc3RpbmN0SWQge3N0cmluZ31cbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICogQGRlcHJlY2F0ZWQgc2luY2UgMjAxNi0xMS0yMSAtIFVzZSBNaXhwYW5lbC5pZGVudGlmeSBpbnN0ZWFkLlxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBpZGVudGlmeShkaXN0aW5jdElkOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0gcGVvcGxlUHJvcGVydGllcyB7c3RyaW5nfVxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBpbmNyZW1lbnQocGVvcGxlUHJvcGVydGllczogYW55KTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHB1c2hJZFxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBzZXRQdXNoSWQocHVzaElkOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0gcGVvcGxlUHJvcGVydGllc1xuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBzZXQocGVvcGxlUHJvcGVydGllczogYW55KTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHBlb3BsZVByb3BlcnRpZXMge2FueX1cbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgc2V0T25jZShwZW9wbGVQcm9wZXJ0aWVzOiBhbnkpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0gYW1vdW50IHtudW1iZXJ9XG4gICAqIEBwYXJhbSBjaGFyZ2VQcm9wZXJ0aWVzXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHRyYWNrQ2hhcmdlKGFtb3VudDogbnVtYmVyLCBjaGFyZ2VQcm9wZXJ0aWVzOiBhbnkpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0gcHJvcGVydGllc0FycmF5XG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHVuc2V0KHByb3BlcnRpZXNBcnJheTogc3RyaW5nW10pOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0gdW5pb25PYmplY3Qge2FueX1cbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgdW5pb24odW5pb25PYmplY3Q6IGFueSk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG59XG4iXX0=