var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordovaPropertyGet, cordovaPropertySet } from '@awesome-cordova-plugins/core';
var BuildInfoOriginal = /** @class */ (function (_super) {
    __extends(BuildInfoOriginal, _super);
    function BuildInfoOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(BuildInfoOriginal.prototype, "baseUrl", {
        get: function () { return cordovaPropertyGet(this, "baseUrl"); },
        set: function (value) { cordovaPropertySet(this, "baseUrl", value); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BuildInfoOriginal.prototype, "packageName", {
        get: function () { return cordovaPropertyGet(this, "packageName"); },
        set: function (value) { cordovaPropertySet(this, "packageName", value); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BuildInfoOriginal.prototype, "basePackageName", {
        get: function () { return cordovaPropertyGet(this, "basePackageName"); },
        set: function (value) { cordovaPropertySet(this, "basePackageName", value); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BuildInfoOriginal.prototype, "displayName", {
        get: function () { return cordovaPropertyGet(this, "displayName"); },
        set: function (value) { cordovaPropertySet(this, "displayName", value); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BuildInfoOriginal.prototype, "name", {
        get: function () { return cordovaPropertyGet(this, "name"); },
        set: function (value) { cordovaPropertySet(this, "name", value); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BuildInfoOriginal.prototype, "version", {
        get: function () { return cordovaPropertyGet(this, "version"); },
        set: function (value) { cordovaPropertySet(this, "version", value); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BuildInfoOriginal.prototype, "versionCode", {
        get: function () { return cordovaPropertyGet(this, "versionCode"); },
        set: function (value) { cordovaPropertySet(this, "versionCode", value); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BuildInfoOriginal.prototype, "debug", {
        get: function () { return cordovaPropertyGet(this, "debug"); },
        set: function (value) { cordovaPropertySet(this, "debug", value); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BuildInfoOriginal.prototype, "buildType", {
        get: function () { return cordovaPropertyGet(this, "buildType"); },
        set: function (value) { cordovaPropertySet(this, "buildType", value); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BuildInfoOriginal.prototype, "flavor", {
        get: function () { return cordovaPropertyGet(this, "flavor"); },
        set: function (value) { cordovaPropertySet(this, "flavor", value); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BuildInfoOriginal.prototype, "buildDate", {
        get: function () { return cordovaPropertyGet(this, "buildDate"); },
        set: function (value) { cordovaPropertySet(this, "buildDate", value); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BuildInfoOriginal.prototype, "installDate", {
        get: function () { return cordovaPropertyGet(this, "installDate"); },
        set: function (value) { cordovaPropertySet(this, "installDate", value); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BuildInfoOriginal.prototype, "windows", {
        get: function () { return cordovaPropertyGet(this, "windows"); },
        set: function (value) { cordovaPropertySet(this, "windows", value); },
        enumerable: false,
        configurable: true
    });
    BuildInfoOriginal.pluginName = "BuildInfo";
    BuildInfoOriginal.plugin = "cordova-plugin-buildinfo";
    BuildInfoOriginal.pluginRef = "BuildInfo";
    BuildInfoOriginal.repo = "https://github.com/lynrin/cordova-plugin-buildinfo";
    BuildInfoOriginal.platforms = ["Android", "iOS", "Windows", "macOS", "browser", "Electron"];
    return BuildInfoOriginal;
}(AwesomeCordovaNativePlugin));
var BuildInfo = new BuildInfoOriginal();
export { BuildInfo };
//# sourceMappingURL=data:application/json;base64,