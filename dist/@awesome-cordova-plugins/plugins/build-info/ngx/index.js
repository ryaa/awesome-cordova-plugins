import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordovaPropertyGet, cordovaPropertySet } from '@awesome-cordova-plugins/core';
import * as i0 from "@angular/core";
var BuildInfo = /** @class */ (function (_super) {
    __extends(BuildInfo, _super);
    function BuildInfo() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(BuildInfo.prototype, "baseUrl", {
        get: function () { return cordovaPropertyGet(this, "baseUrl"); },
        set: function (value) { cordovaPropertySet(this, "baseUrl", value); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BuildInfo.prototype, "packageName", {
        get: function () { return cordovaPropertyGet(this, "packageName"); },
        set: function (value) { cordovaPropertySet(this, "packageName", value); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BuildInfo.prototype, "basePackageName", {
        get: function () { return cordovaPropertyGet(this, "basePackageName"); },
        set: function (value) { cordovaPropertySet(this, "basePackageName", value); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BuildInfo.prototype, "displayName", {
        get: function () { return cordovaPropertyGet(this, "displayName"); },
        set: function (value) { cordovaPropertySet(this, "displayName", value); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BuildInfo.prototype, "name", {
        get: function () { return cordovaPropertyGet(this, "name"); },
        set: function (value) { cordovaPropertySet(this, "name", value); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BuildInfo.prototype, "version", {
        get: function () { return cordovaPropertyGet(this, "version"); },
        set: function (value) { cordovaPropertySet(this, "version", value); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BuildInfo.prototype, "versionCode", {
        get: function () { return cordovaPropertyGet(this, "versionCode"); },
        set: function (value) { cordovaPropertySet(this, "versionCode", value); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BuildInfo.prototype, "debug", {
        get: function () { return cordovaPropertyGet(this, "debug"); },
        set: function (value) { cordovaPropertySet(this, "debug", value); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BuildInfo.prototype, "buildType", {
        get: function () { return cordovaPropertyGet(this, "buildType"); },
        set: function (value) { cordovaPropertySet(this, "buildType", value); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BuildInfo.prototype, "flavor", {
        get: function () { return cordovaPropertyGet(this, "flavor"); },
        set: function (value) { cordovaPropertySet(this, "flavor", value); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BuildInfo.prototype, "buildDate", {
        get: function () { return cordovaPropertyGet(this, "buildDate"); },
        set: function (value) { cordovaPropertySet(this, "buildDate", value); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BuildInfo.prototype, "installDate", {
        get: function () { return cordovaPropertyGet(this, "installDate"); },
        set: function (value) { cordovaPropertySet(this, "installDate", value); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BuildInfo.prototype, "windows", {
        get: function () { return cordovaPropertyGet(this, "windows"); },
        set: function (value) { cordovaPropertySet(this, "windows", value); },
        enumerable: false,
        configurable: true
    });
    BuildInfo.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BuildInfo, deps: null, target: i0.ɵɵFactoryTarget.Injectable });
    BuildInfo.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BuildInfo });
    BuildInfo.pluginName = "BuildInfo";
    BuildInfo.plugin = "cordova-plugin-buildinfo";
    BuildInfo.pluginRef = "BuildInfo";
    BuildInfo.repo = "https://github.com/lynrin/cordova-plugin-buildinfo";
    BuildInfo.platforms = ["Android", "iOS", "Windows", "macOS", "browser", "Electron"];
    BuildInfo = __decorate([], BuildInfo);
    return BuildInfo;
}(AwesomeCordovaNativePlugin));
export { BuildInfo };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BuildInfo, decorators: [{
            type: Injectable
        }], propDecorators: { baseUrl: [], packageName: [], basePackageName: [], displayName: [], name: [], version: [], versionCode: [], debug: [], buildType: [], flavor: [], buildDate: [], installDate: [], windows: [] } });
//# sourceMappingURL=data:application/json;base64,