var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var NativePageTransitionsOriginal = /** @class */ (function (_super) {
    __extends(NativePageTransitionsOriginal, _super);
    function NativePageTransitionsOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NativePageTransitionsOriginal.prototype.slide = function (options) { return cordova(this, "slide", {}, arguments); };
    NativePageTransitionsOriginal.prototype.flip = function (options) { return cordova(this, "flip", {}, arguments); };
    NativePageTransitionsOriginal.prototype.fade = function (options) { return cordova(this, "fade", { "platforms": ["iOS", "Android"] }, arguments); };
    NativePageTransitionsOriginal.prototype.drawer = function (options) { return cordova(this, "drawer", { "platforms": ["iOS", "Android"] }, arguments); };
    NativePageTransitionsOriginal.prototype.curl = function (options) { return cordova(this, "curl", { "platforms": ["iOS"] }, arguments); };
    NativePageTransitionsOriginal.prototype.executePendingTransition = function () { return cordova(this, "executePendingTransition", {}, arguments); };
    NativePageTransitionsOriginal.prototype.cancelPendingTransition = function () { return cordova(this, "cancelPendingTransition", {}, arguments); };
    NativePageTransitionsOriginal.pluginName = "NativePageTransitions";
    NativePageTransitionsOriginal.plugin = "com.telerik.plugins.nativepagetransitions";
    NativePageTransitionsOriginal.pluginRef = "plugins.nativepagetransitions";
    NativePageTransitionsOriginal.repo = "https://github.com/Telerik-Verified-Plugins/NativePageTransitions";
    NativePageTransitionsOriginal.platforms = ["Android", "iOS", "Windows Phone 8"];
    return NativePageTransitionsOriginal;
}(AwesomeCordovaNativePlugin));
var NativePageTransitions = new NativePageTransitionsOriginal();
export { NativePageTransitions };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvbmF0aXZlLXBhZ2UtdHJhbnNpdGlvbnMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUNBLE9BQU8sdUNBQStDLE1BQU0sK0JBQStCLENBQUM7O0lBcUVqRCx5Q0FBMEI7Ozs7SUFRbkUscUNBQUssYUFBQyxPQUFnQztJQVd0QyxvQ0FBSSxhQUFDLE9BQWdDO0lBV3JDLG9DQUFJLGFBQUMsT0FBZ0M7SUFXckMsc0NBQU0sYUFBQyxPQUFnQztJQVd2QyxvQ0FBSSxhQUFDLE9BQWdDO0lBVXJDLHdEQUF3QjtJQVV4Qix1REFBdUI7Ozs7OztnQ0E5SXpCO0VBc0UyQywwQkFBMEI7U0FBeEQscUJBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29yZG92YSwgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bhd2Vzb21lLWNvcmRvdmEtcGx1Z2lucy9jb3JlJztcblxuZXhwb3J0IGludGVyZmFjZSBOYXRpdmVUcmFuc2l0aW9uT3B0aW9ucyB7XG4gIGRpcmVjdGlvbj86IHN0cmluZztcbiAgZHVyYXRpb24/OiBudW1iZXI7XG4gIHNsb3dkb3duZmFjdG9yPzogbnVtYmVyO1xuICBzbGlkZVBpeGVscz86IG51bWJlcjtcbiAgaW9zZGVsYXk/OiBudW1iZXI7XG4gIGFuZHJvaWRkZWxheT86IG51bWJlcjtcbiAgd2lucGhvbmVkZWxheT86IG51bWJlcjtcbiAgZml4ZWRQaXhlbHNUb3A/OiBudW1iZXI7XG4gIGZpeGVkUGl4ZWxzQm90dG9tPzogbnVtYmVyO1xuICBhY3Rpb24/OiBzdHJpbmc7XG4gIG9yaWdpbj86IHN0cmluZztcbiAgaHJlZj86IHN0cmluZztcbn1cblxuLyoqXG4gKiBAbmFtZSBOYXRpdmUgUGFnZSBUcmFuc2l0aW9uc1xuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgTmF0aXZlIFBhZ2UgVHJhbnNpdGlvbnMgcGx1Z2luIHVzZXMgbmF0aXZlIGhhcmR3YXJlIGFjY2VsZXJhdGlvbiB0byBhbmltYXRlIHlvdXIgdHJhbnNpdGlvbnMgYmV0d2VlbiB2aWV3cy4gWW91IGhhdmUgY29tcGxldGUgY29udHJvbCBvdmVyIHRoZSB0eXBlIG9mIHRyYW5zaXRpb24sIHRoZSBkdXJhdGlvbiwgYW5kIGRpcmVjdGlvbi5cbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgTmF0aXZlUGFnZVRyYW5zaXRpb25zLCBOYXRpdmVUcmFuc2l0aW9uT3B0aW9ucyB9IGZyb20gJ0Bhd2Vzb21lLWNvcmRvdmEtcGx1Z2lucy9uYXRpdmUtcGFnZS10cmFuc2l0aW9ucy9uZ3gnO1xuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgbmF0aXZlUGFnZVRyYW5zaXRpb25zOiBOYXRpdmVQYWdlVHJhbnNpdGlvbnMpIHsgfVxuICpcbiAqIC4uLlxuICpcbiAqXG4gKiAvLyBleGFtcGxlIG9mIGFkZGluZyBhIHRyYW5zaXRpb24gd2hlbiBhIHBhZ2UvbW9kYWwgY2xvc2VzXG4gKiBpb25WaWV3V2lsbExlYXZlKCkge1xuICpcbiAqICBsZXQgb3B0aW9uczogTmF0aXZlVHJhbnNpdGlvbk9wdGlvbnMgPSB7XG4gKiAgICAgZGlyZWN0aW9uOiAndXAnLFxuICogICAgIGR1cmF0aW9uOiA1MDAsXG4gKiAgICAgc2xvd2Rvd25mYWN0b3I6IDMsXG4gKiAgICAgc2xpZGVQaXhlbHM6IDIwLFxuICogICAgIGlvc2RlbGF5OiAxMDAsXG4gKiAgICAgYW5kcm9pZGRlbGF5OiAxNTAsXG4gKiAgICAgZml4ZWRQaXhlbHNUb3A6IDAsXG4gKiAgICAgZml4ZWRQaXhlbHNCb3R0b206IDYwXG4gKiAgICB9XG4gKlxuICogIHRoaXMubmF0aXZlUGFnZVRyYW5zaXRpb25zLnNsaWRlKG9wdGlvbnMpXG4gKiAgICAudGhlbihvblN1Y2Nlc3MpXG4gKiAgICAuY2F0Y2gob25FcnJvcik7XG4gKlxuICogfVxuICpcbiAqXG4gKiAvLyBleGFtcGxlIG9mIGFkZGluZyBhIHRyYW5zaXRpb24gd2hlbiBwdXNoaW5nIGEgbmV3IHBhZ2VcbiAqIG9wZW5QYWdlKHBhZ2U6IGFueSkge1xuICpcbiAqICAgdGhpcy5uYXRpdmVQYWdlVHJhbnNpdGlvbnMuc2xpZGUob3B0aW9ucyk7XG4gKiAgIHRoaXMubmF2Q3RybC5wdXNoKHBhZ2UpO1xuICpcbiAqIH1cbiAqXG4gKiBgYGBcbiAqL1xuQFBsdWdpbih7XG4gIHBsdWdpbk5hbWU6ICdOYXRpdmVQYWdlVHJhbnNpdGlvbnMnLFxuICBwbHVnaW46ICdjb20udGVsZXJpay5wbHVnaW5zLm5hdGl2ZXBhZ2V0cmFuc2l0aW9ucycsXG4gIHBsdWdpblJlZjogJ3BsdWdpbnMubmF0aXZlcGFnZXRyYW5zaXRpb25zJyxcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9UZWxlcmlrLVZlcmlmaWVkLVBsdWdpbnMvTmF0aXZlUGFnZVRyYW5zaXRpb25zJyxcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJywgJ1dpbmRvd3MgUGhvbmUgOCddLFxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBOYXRpdmVQYWdlVHJhbnNpdGlvbnMgZXh0ZW5kcyBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiB7XG4gIC8qKlxuICAgKiBQZXJmb3JtIGEgc2xpZGUgYW5pbWF0aW9uXG4gICAqXG4gICAqIEBwYXJhbSBvcHRpb25zIHtOYXRpdmVUcmFuc2l0aW9uT3B0aW9uc30gT3B0aW9ucyBmb3IgdGhlIHRyYW5zaXRpb25cbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgc2xpZGUob3B0aW9uczogTmF0aXZlVHJhbnNpdGlvbk9wdGlvbnMpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBQZXJmb3JtIGEgZmxpcCBhbmltYXRpb25cbiAgICpcbiAgICogQHBhcmFtIG9wdGlvbnMge05hdGl2ZVRyYW5zaXRpb25PcHRpb25zfSBPcHRpb25zIGZvciB0aGUgdHJhbnNpdGlvblxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBmbGlwKG9wdGlvbnM6IE5hdGl2ZVRyYW5zaXRpb25PcHRpb25zKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogUGVyZm9ybSBhIGZhZGUgYW5pbWF0aW9uXG4gICAqXG4gICAqIEBwYXJhbSBvcHRpb25zIHtOYXRpdmVUcmFuc2l0aW9uT3B0aW9uc30gT3B0aW9ucyBmb3IgdGhlIHRyYW5zaXRpb25cbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKHsgcGxhdGZvcm1zOiBbJ2lPUycsICdBbmRyb2lkJ10gfSlcbiAgZmFkZShvcHRpb25zOiBOYXRpdmVUcmFuc2l0aW9uT3B0aW9ucyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFBlcmZvcm0gYSBzbGlkZSBhbmltYXRpb25cbiAgICpcbiAgICogQHBhcmFtIG9wdGlvbnMge05hdGl2ZVRyYW5zaXRpb25PcHRpb25zfSBPcHRpb25zIGZvciB0aGUgdHJhbnNpdGlvblxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoeyBwbGF0Zm9ybXM6IFsnaU9TJywgJ0FuZHJvaWQnXSB9KVxuICBkcmF3ZXIob3B0aW9uczogTmF0aXZlVHJhbnNpdGlvbk9wdGlvbnMpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBQZXJmb3JtIGEgc2xpZGUgYW5pbWF0aW9uXG4gICAqXG4gICAqIEBwYXJhbSBvcHRpb25zIHtOYXRpdmVUcmFuc2l0aW9uT3B0aW9uc30gT3B0aW9ucyBmb3IgdGhlIHRyYW5zaXRpb25cbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKHsgcGxhdGZvcm1zOiBbJ2lPUyddIH0pXG4gIGN1cmwob3B0aW9uczogTmF0aXZlVHJhbnNpdGlvbk9wdGlvbnMpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBFeGVjdXRlIHBlbmRpbmcgdHJhbnNpdGlvblxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBleGVjdXRlUGVuZGluZ1RyYW5zaXRpb24oKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogQ2FuY2VsIHBlbmRpbmcgdHJhbnNpdGlvblxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBjYW5jZWxQZW5kaW5nVHJhbnNpdGlvbigpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxufVxuIl19