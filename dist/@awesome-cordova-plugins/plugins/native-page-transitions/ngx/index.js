import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var NativePageTransitions = /** @class */ (function (_super) {
    __extends(NativePageTransitions, _super);
    function NativePageTransitions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NativePageTransitions.prototype.slide = function (options) { return cordova(this, "slide", {}, arguments); };
    NativePageTransitions.prototype.flip = function (options) { return cordova(this, "flip", {}, arguments); };
    NativePageTransitions.prototype.fade = function (options) { return cordova(this, "fade", { "platforms": ["iOS", "Android"] }, arguments); };
    NativePageTransitions.prototype.drawer = function (options) { return cordova(this, "drawer", { "platforms": ["iOS", "Android"] }, arguments); };
    NativePageTransitions.prototype.curl = function (options) { return cordova(this, "curl", { "platforms": ["iOS"] }, arguments); };
    NativePageTransitions.prototype.executePendingTransition = function () { return cordova(this, "executePendingTransition", {}, arguments); };
    NativePageTransitions.prototype.cancelPendingTransition = function () { return cordova(this, "cancelPendingTransition", {}, arguments); };
    NativePageTransitions.pluginName = "NativePageTransitions";
    NativePageTransitions.plugin = "com.telerik.plugins.nativepagetransitions";
    NativePageTransitions.pluginRef = "plugins.nativepagetransitions";
    NativePageTransitions.repo = "https://github.com/Telerik-Verified-Plugins/NativePageTransitions";
    NativePageTransitions.platforms = ["Android", "iOS", "Windows Phone 8"];
    NativePageTransitions.decorators = [
        { type: Injectable }
    ];
    return NativePageTransitions;
}(AwesomeCordovaNativePlugin));
export { NativePageTransitions };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvbmF0aXZlLXBhZ2UtdHJhbnNpdGlvbnMvbmd4L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sdUNBQStDLE1BQU0sK0JBQStCLENBQUM7O0lBcUVqRCx5Q0FBMEI7Ozs7SUFRbkUscUNBQUssYUFBQyxPQUFnQztJQVd0QyxvQ0FBSSxhQUFDLE9BQWdDO0lBV3JDLG9DQUFJLGFBQUMsT0FBZ0M7SUFXckMsc0NBQU0sYUFBQyxPQUFnQztJQVd2QyxvQ0FBSSxhQUFDLE9BQWdDO0lBVXJDLHdEQUF3QjtJQVV4Qix1REFBdUI7Ozs7Ozs7Z0JBekV4QixVQUFVOztnQ0FyRVg7RUFzRTJDLDBCQUEwQjtTQUF4RCxxQkFBcUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb3Jkb3ZhLCBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL2NvcmUnO1xuXG5leHBvcnQgaW50ZXJmYWNlIE5hdGl2ZVRyYW5zaXRpb25PcHRpb25zIHtcbiAgZGlyZWN0aW9uPzogc3RyaW5nO1xuICBkdXJhdGlvbj86IG51bWJlcjtcbiAgc2xvd2Rvd25mYWN0b3I/OiBudW1iZXI7XG4gIHNsaWRlUGl4ZWxzPzogbnVtYmVyO1xuICBpb3NkZWxheT86IG51bWJlcjtcbiAgYW5kcm9pZGRlbGF5PzogbnVtYmVyO1xuICB3aW5waG9uZWRlbGF5PzogbnVtYmVyO1xuICBmaXhlZFBpeGVsc1RvcD86IG51bWJlcjtcbiAgZml4ZWRQaXhlbHNCb3R0b20/OiBudW1iZXI7XG4gIGFjdGlvbj86IHN0cmluZztcbiAgb3JpZ2luPzogc3RyaW5nO1xuICBocmVmPzogc3RyaW5nO1xufVxuXG4vKipcbiAqIEBuYW1lIE5hdGl2ZSBQYWdlIFRyYW5zaXRpb25zXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBOYXRpdmUgUGFnZSBUcmFuc2l0aW9ucyBwbHVnaW4gdXNlcyBuYXRpdmUgaGFyZHdhcmUgYWNjZWxlcmF0aW9uIHRvIGFuaW1hdGUgeW91ciB0cmFuc2l0aW9ucyBiZXR3ZWVuIHZpZXdzLiBZb3UgaGF2ZSBjb21wbGV0ZSBjb250cm9sIG92ZXIgdGhlIHR5cGUgb2YgdHJhbnNpdGlvbiwgdGhlIGR1cmF0aW9uLCBhbmQgZGlyZWN0aW9uLlxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBOYXRpdmVQYWdlVHJhbnNpdGlvbnMsIE5hdGl2ZVRyYW5zaXRpb25PcHRpb25zIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL25hdGl2ZS1wYWdlLXRyYW5zaXRpb25zL25neCc7XG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSBuYXRpdmVQYWdlVHJhbnNpdGlvbnM6IE5hdGl2ZVBhZ2VUcmFuc2l0aW9ucykgeyB9XG4gKlxuICogLi4uXG4gKlxuICpcbiAqIC8vIGV4YW1wbGUgb2YgYWRkaW5nIGEgdHJhbnNpdGlvbiB3aGVuIGEgcGFnZS9tb2RhbCBjbG9zZXNcbiAqIGlvblZpZXdXaWxsTGVhdmUoKSB7XG4gKlxuICogIGxldCBvcHRpb25zOiBOYXRpdmVUcmFuc2l0aW9uT3B0aW9ucyA9IHtcbiAqICAgICBkaXJlY3Rpb246ICd1cCcsXG4gKiAgICAgZHVyYXRpb246IDUwMCxcbiAqICAgICBzbG93ZG93bmZhY3RvcjogMyxcbiAqICAgICBzbGlkZVBpeGVsczogMjAsXG4gKiAgICAgaW9zZGVsYXk6IDEwMCxcbiAqICAgICBhbmRyb2lkZGVsYXk6IDE1MCxcbiAqICAgICBmaXhlZFBpeGVsc1RvcDogMCxcbiAqICAgICBmaXhlZFBpeGVsc0JvdHRvbTogNjBcbiAqICAgIH1cbiAqXG4gKiAgdGhpcy5uYXRpdmVQYWdlVHJhbnNpdGlvbnMuc2xpZGUob3B0aW9ucylcbiAqICAgIC50aGVuKG9uU3VjY2VzcylcbiAqICAgIC5jYXRjaChvbkVycm9yKTtcbiAqXG4gKiB9XG4gKlxuICpcbiAqIC8vIGV4YW1wbGUgb2YgYWRkaW5nIGEgdHJhbnNpdGlvbiB3aGVuIHB1c2hpbmcgYSBuZXcgcGFnZVxuICogb3BlblBhZ2UocGFnZTogYW55KSB7XG4gKlxuICogICB0aGlzLm5hdGl2ZVBhZ2VUcmFuc2l0aW9ucy5zbGlkZShvcHRpb25zKTtcbiAqICAgdGhpcy5uYXZDdHJsLnB1c2gocGFnZSk7XG4gKlxuICogfVxuICpcbiAqIGBgYFxuICovXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ05hdGl2ZVBhZ2VUcmFuc2l0aW9ucycsXG4gIHBsdWdpbjogJ2NvbS50ZWxlcmlrLnBsdWdpbnMubmF0aXZlcGFnZXRyYW5zaXRpb25zJyxcbiAgcGx1Z2luUmVmOiAncGx1Z2lucy5uYXRpdmVwYWdldHJhbnNpdGlvbnMnLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL1RlbGVyaWstVmVyaWZpZWQtUGx1Z2lucy9OYXRpdmVQYWdlVHJhbnNpdGlvbnMnLFxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnLCAnV2luZG93cyBQaG9uZSA4J10sXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE5hdGl2ZVBhZ2VUcmFuc2l0aW9ucyBleHRlbmRzIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luIHtcbiAgLyoqXG4gICAqIFBlcmZvcm0gYSBzbGlkZSBhbmltYXRpb25cbiAgICpcbiAgICogQHBhcmFtIG9wdGlvbnMge05hdGl2ZVRyYW5zaXRpb25PcHRpb25zfSBPcHRpb25zIGZvciB0aGUgdHJhbnNpdGlvblxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBzbGlkZShvcHRpb25zOiBOYXRpdmVUcmFuc2l0aW9uT3B0aW9ucyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFBlcmZvcm0gYSBmbGlwIGFuaW1hdGlvblxuICAgKlxuICAgKiBAcGFyYW0gb3B0aW9ucyB7TmF0aXZlVHJhbnNpdGlvbk9wdGlvbnN9IE9wdGlvbnMgZm9yIHRoZSB0cmFuc2l0aW9uXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGZsaXAob3B0aW9uczogTmF0aXZlVHJhbnNpdGlvbk9wdGlvbnMpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBQZXJmb3JtIGEgZmFkZSBhbmltYXRpb25cbiAgICpcbiAgICogQHBhcmFtIG9wdGlvbnMge05hdGl2ZVRyYW5zaXRpb25PcHRpb25zfSBPcHRpb25zIGZvciB0aGUgdHJhbnNpdGlvblxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoeyBwbGF0Zm9ybXM6IFsnaU9TJywgJ0FuZHJvaWQnXSB9KVxuICBmYWRlKG9wdGlvbnM6IE5hdGl2ZVRyYW5zaXRpb25PcHRpb25zKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogUGVyZm9ybSBhIHNsaWRlIGFuaW1hdGlvblxuICAgKlxuICAgKiBAcGFyYW0gb3B0aW9ucyB7TmF0aXZlVHJhbnNpdGlvbk9wdGlvbnN9IE9wdGlvbnMgZm9yIHRoZSB0cmFuc2l0aW9uXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSh7IHBsYXRmb3JtczogWydpT1MnLCAnQW5kcm9pZCddIH0pXG4gIGRyYXdlcihvcHRpb25zOiBOYXRpdmVUcmFuc2l0aW9uT3B0aW9ucyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFBlcmZvcm0gYSBzbGlkZSBhbmltYXRpb25cbiAgICpcbiAgICogQHBhcmFtIG9wdGlvbnMge05hdGl2ZVRyYW5zaXRpb25PcHRpb25zfSBPcHRpb25zIGZvciB0aGUgdHJhbnNpdGlvblxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoeyBwbGF0Zm9ybXM6IFsnaU9TJ10gfSlcbiAgY3VybChvcHRpb25zOiBOYXRpdmVUcmFuc2l0aW9uT3B0aW9ucyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIEV4ZWN1dGUgcGVuZGluZyB0cmFuc2l0aW9uXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGV4ZWN1dGVQZW5kaW5nVHJhbnNpdGlvbigpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYW5jZWwgcGVuZGluZyB0cmFuc2l0aW9uXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGNhbmNlbFBlbmRpbmdUcmFuc2l0aW9uKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG59XG4iXX0=