import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var PSPDFKit = /** @class */ (function (_super) {
    __extends(PSPDFKit, _super);
    function PSPDFKit() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PSPDFKit.prototype.setLicenseKey = function (licenseKey) { return cordova(this, "setLicenseKey", {}, arguments); };
    PSPDFKit.prototype.present = function (path, options) { return cordova(this, "present", {}, arguments); };
    PSPDFKit.prototype.presentFromAssets = function (assetFile, options) { return cordova(this, "presentFromAssets", {}, arguments); };
    PSPDFKit.prototype.presentWithXFDF = function (path, xfdfPath, options) { return cordova(this, "presentWithXFDF", {}, arguments); };
    PSPDFKit.prototype.dismiss = function () { return cordova(this, "dismiss", {}, arguments); };
    PSPDFKit.prototype.reload = function () { return cordova(this, "reload", {}, arguments); };
    PSPDFKit.prototype.saveDocument = function () { return cordova(this, "saveDocument", {}, arguments); };
    PSPDFKit.prototype.saveAnnotations = function () { return cordova(this, "saveAnnotations", {}, arguments); };
    PSPDFKit.prototype.getHasDirtyAnnotations = function () { return cordova(this, "getHasDirtyAnnotations", {}, arguments); };
    PSPDFKit.prototype.search = function (query, animated, headless) { return cordova(this, "search", {}, arguments); };
    PSPDFKit.prototype.setOptions = function (options, animated) { return cordova(this, "setOptions", {}, arguments); };
    PSPDFKit.prototype.getOptions = function (names) { return cordova(this, "getOptions", {}, arguments); };
    PSPDFKit.prototype.setOption = function (name, value, animated) { return cordova(this, "setOption", {}, arguments); };
    PSPDFKit.prototype.getOption = function (name) { return cordova(this, "getOption", {}, arguments); };
    PSPDFKit.prototype.setPage = function (page, animated) { return cordova(this, "setPage", {}, arguments); };
    PSPDFKit.prototype.getPage = function () { return cordova(this, "getPage", {}, arguments); };
    PSPDFKit.prototype.getPageCount = function () { return cordova(this, "getPageCount", {}, arguments); };
    PSPDFKit.prototype.scrollToNextPage = function (animated) { return cordova(this, "scrollToNextPage", {}, arguments); };
    PSPDFKit.prototype.scrollToPreviousPage = function (animated) { return cordova(this, "scrollToPreviousPage", {}, arguments); };
    PSPDFKit.prototype.setAppearanceMode = function (appearanceMode) { return cordova(this, "setAppearanceMode", {}, arguments); };
    PSPDFKit.prototype.clearCache = function (clearDiskCache) { return cordova(this, "clearCache", {}, arguments); };
    PSPDFKit.prototype.removeCacheForPresentedDocument = function () { return cordova(this, "removeCacheForPresentedDocument", {}, arguments); };
    PSPDFKit.prototype.clearCacheForPage = function (pageIndex) { return cordova(this, "clearCacheForPage", {}, arguments); };
    PSPDFKit.prototype.hideAnnotationToolbar = function () { return cordova(this, "hideAnnotationToolbar", {}, arguments); };
    PSPDFKit.prototype.showAnnotationToolbar = function () { return cordova(this, "showAnnotationToolbar", {}, arguments); };
    PSPDFKit.prototype.toggleAnnotationToolbar = function () { return cordova(this, "toggleAnnotationToolbar", {}, arguments); };
    PSPDFKit.prototype.applyInstantJSON = function (jsonValue) { return cordova(this, "applyInstantJSON", {}, arguments); };
    PSPDFKit.prototype.addAnnotation = function (jsonAnnotation) { return cordova(this, "addAnnotation", {}, arguments); };
    PSPDFKit.prototype.removeAnnotation = function (jsonAnnotation) { return cordova(this, "removeAnnotation", {}, arguments); };
    PSPDFKit.prototype.getAnnotations = function (pageIndex, type) { return cordova(this, "getAnnotations", {}, arguments); };
    PSPDFKit.prototype.getAllUnsavedAnnotations = function () { return cordova(this, "getAllUnsavedAnnotations", {}, arguments); };
    PSPDFKit.prototype.setFormFieldValue = function (value, fullyQualifiedName) { return cordova(this, "setFormFieldValue", {}, arguments); };
    PSPDFKit.prototype.getFormFieldValue = function (fullyQualifiedName) { return cordova(this, "getFormFieldValue", {}, arguments); };
    PSPDFKit.prototype.importXFDF = function (xfdfPath) { return cordova(this, "importXFDF", {}, arguments); };
    PSPDFKit.prototype.exportXFDF = function (xfdfPath) { return cordova(this, "exportXFDF", {}, arguments); };
    PSPDFKit.prototype.processAnnotations = function (annotationChange, processedDocumentPath, annotationType) { return cordova(this, "processAnnotations", {}, arguments); };
    PSPDFKit.prototype.convertPDFFromHTMLString = function (html, fileName, options) { return cordova(this, "convertPDFFromHTMLString", {}, arguments); };
    PSPDFKit.pluginName = "PSPDFKit";
    PSPDFKit.plugin = "pspdfkit-cordova";
    PSPDFKit.pluginRef = "PSPDFKit";
    PSPDFKit.repo = "https://github.com/PSPDFKit/PSPDFKit-Cordova";
    PSPDFKit.install = "ionic cordova plugin add pspdfkit-cordova";
    PSPDFKit.platforms = ["Android", "iOS"];
    PSPDFKit.decorators = [
        { type: Injectable }
    ];
    return PSPDFKit;
}(AwesomeCordovaNativePlugin));
export { PSPDFKit };
//# sourceMappingURL=data:application/json;base64,